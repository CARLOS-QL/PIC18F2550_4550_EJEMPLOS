

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Mar 19 19:38:37 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    47                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    48  0000                     
    49                           ; Version 2.40
    50                           ; Generated 17/11/2021 GMT
    51                           ; 
    52                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution. Publication is not required when
    66                           ;        this file is used in an embedded application.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F4550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	smallconst
    86  000800                     __psmallconst:
    87                           	callstack 0
    88  000800  00                 	db	0
    89  000801                     __powers_:
    90                           	callstack 0
    91  000801  00                 	db	0
    92  000802  80                 	db	128
    93  000803  3F                 	db	63
    94  000804  00                 	db	0
    95  000805  20                 	db	32
    96  000806  41                 	db	65
    97  000807  00                 	db	0
    98  000808  C8                 	db	200
    99  000809  42                 	db	66
   100  00080A  00                 	db	0
   101  00080B  7A                 	db	122
   102  00080C  44                 	db	68
   103  00080D  40                 	db	64
   104  00080E  1C                 	db	28
   105  00080F  46                 	db	70
   106  000810  50                 	db	80
   107  000811  C3                 	db	195
   108  000812  47                 	db	71
   109  000813  24                 	db	36
   110  000814  74                 	db	116
   111  000815  49                 	db	73
   112  000816  97                 	db	151
   113  000817  18                 	db	24
   114  000818  4B                 	db	75
   115  000819  BC                 	db	188
   116  00081A  BE                 	db	190
   117  00081B  4C                 	db	76
   118  00081C  6B                 	db	107
   119  00081D  6E                 	db	110
   120  00081E  4E                 	db	78
   121  00081F  03                 	db	3
   122  000820  15                 	db	21
   123  000821  50                 	db	80
   124  000822  79                 	db	121
   125  000823  AD                 	db	173
   126  000824  60                 	db	96
   127  000825  F3                 	db	243
   128  000826  49                 	db	73
   129  000827  71                 	db	113
   130  000828                     __end_of__powers_:
   131                           	callstack 0
   132  000828                     __npowers_:
   133                           	callstack 0
   134  000828  00                 	db	0
   135  000829  80                 	db	128
   136  00082A  3F                 	db	63
   137  00082B  CD                 	db	205
   138  00082C  CC                 	db	204
   139  00082D  3D                 	db	61
   140  00082E  D7                 	db	215
   141  00082F  23                 	db	35
   142  000830  3C                 	db	60
   143  000831  12                 	db	18
   144  000832  83                 	db	131
   145  000833  3A                 	db	58
   146  000834  B7                 	db	183
   147  000835  D1                 	db	209
   148  000836  38                 	db	56
   149  000837  C6                 	db	198
   150  000838  27                 	db	39
   151  000839  37                 	db	55
   152  00083A  38                 	db	56
   153  00083B  86                 	db	134
   154  00083C  35                 	db	53
   155  00083D  C0                 	db	192
   156  00083E  D6                 	db	214
   157  00083F  33                 	db	51
   158  000840  CC                 	db	204
   159  000841  2B                 	db	43
   160  000842  32                 	db	50
   161  000843  70                 	db	112
   162  000844  89                 	db	137
   163  000845  30                 	db	48
   164  000846  E7                 	db	231
   165  000847  DB                 	db	219
   166  000848  2E                 	db	46
   167  000849  E5                 	db	229
   168  00084A  3C                 	db	60
   169  00084B  1E                 	db	30
   170  00084C  42                 	db	66
   171  00084D  A2                 	db	162
   172  00084E  0D                 	db	13
   173  00084F                     __end_of__npowers_:
   174                           	callstack 0
   175  00084F                     _dpowers:
   176                           	callstack 0
   177  00084F  0001               	dw	1
   178  000851  0000               	dw	0
   179  000853  000A               	dw	10
   180  000855  0000               	dw	0
   181  000857  0064               	dw	100
   182  000859  0000               	dw	0
   183  00085B  03E8               	dw	1000
   184  00085D  0000               	dw	0
   185  00085F  2710               	dw	10000
   186  000861  0000               	dw	0
   187  000863  86A0               	dw	34464
   188  000865  0001               	dw	1
   189  000867  4240               	dw	16960
   190  000869  000F               	dw	15
   191  00086B  9680               	dw	38528
   192  00086D  0098               	dw	152
   193  00086F  E100               	dw	57600
   194  000871  05F5               	dw	1525
   195  000873  CA00               	dw	51712
   196  000875  3B9A               	dw	15258
   197  000877                     __end_of_dpowers:
   198                           	callstack 0
   199  0000                     _PORTCbits	set	3970
   200  0000                     _LATCbits	set	3979
   201  0000                     _TRISCbits	set	3988
   202  0000                     _TRISDbits	set	3989
   203  0000                     _LATDbits	set	3980
   204  000877                     STR_2:
   205  000877  20                 	db	32
   206  000878  20                 	db	32
   207  000879  48                 	db	72	;'H'
   208  00087A  75                 	db	117	;'u'
   209  00087B  6D                 	db	109	;'m'
   210  00087C  65                 	db	101	;'e'
   211  00087D  2E                 	db	46
   212  00087E  20                 	db	32
   213  00087F  25                 	db	37
   214  000880  32                 	db	50	;'2'
   215  000881  2E                 	db	46
   216  000882  32                 	db	50	;'2'
   217  000883  66                 	db	102	;'f'
   218  000884  00                 	db	0
   219  000885                     STR_1:
   220  000885  20                 	db	32
   221  000886  20                 	db	32
   222  000887  54                 	db	84	;'T'
   223  000888  65                 	db	101	;'e'
   224  000889  6D                 	db	109	;'m'
   225  00088A  70                 	db	112	;'p'
   226  00088B  2E                 	db	46
   227  00088C  20                 	db	32
   228  00088D  25                 	db	37
   229  00088E  32                 	db	50	;'2'
   230  00088F  2E                 	db	46
   231  000890  32                 	db	50	;'2'
   232  000891  66                 	db	102	;'f'
   233  000892  00                 	db	0
   234  000893                     STR_3:
   235  000893  65                 	db	101	;'e'
   236  000894  72                 	db	114	;'r'
   237  000895  72                 	db	114	;'r'
   238  000896  6F                 	db	111	;'o'
   239  000897  72                 	db	114	;'r'
   240  000898  00                 	db	0
   241  000899  00                 	db	0	; dummy byte at the end
   242  0000                     
   243                           ; #config settings
   244                           
   245                           	psect	cinit
   246  0024F2                     __pcinit:
   247                           	callstack 0
   248  0024F2                     start_initialization:
   249                           	callstack 0
   250  0024F2                     __initialization:
   251                           	callstack 0
   252                           
   253                           ; Clear objects allocated to BANK0 (8 bytes)
   254  0024F2  EE00  F079         	lfsr	0,__pbssBANK0
   255  0024F6  0E08               	movlw	8
   256  0024F8                     clear_0:
   257  0024F8  6AEE               	clrf	postinc0,c
   258  0024FA  06E8               	decf	wreg,f,c
   259  0024FC  E1FD               	bnz	clear_0
   260  0024FE                     end_of_initialization:
   261                           	callstack 0
   262  0024FE                     __end_of__initialization:
   263                           	callstack 0
   264  0024FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   265  002500  6EF8               	movwf	tblptru,c
   266  002502  0100               	movlb	0
   267  002504  EFAC  F00F         	goto	_main	;jump to C main() function
   268                           
   269                           	psect	bssBANK0
   270  000079                     __pbssBANK0:
   271                           	callstack 0
   272  000079                     	ds	8
   273                           
   274                           	psect	cstackBANK0
   275  000060                     __pcstackBANK0:
   276                           	callstack 0
   277  000060                     _printf$1101:
   278                           	callstack 0
   279                           
   280                           ; 3 bytes @ 0x0
   281  000060                     	ds	3
   282  000063                     printf@ap:
   283                           	callstack 0
   284                           
   285                           ; 2 bytes @ 0x3
   286  000063                     	ds	2
   287  000065                     printf@val:
   288                           	callstack 0
   289                           
   290                           ; 4 bytes @ 0x5
   291  000065                     	ds	4
   292  000069                     printf@flag:
   293                           	callstack 0
   294                           
   295                           ; 2 bytes @ 0x9
   296  000069                     	ds	2
   297  00006B                     printf@width:
   298                           	callstack 0
   299                           
   300                           ; 2 bytes @ 0xB
   301  00006B                     	ds	2
   302  00006D                     printf@tmpval:
   303                           	callstack 0
   304                           
   305                           ; 4 bytes @ 0xD
   306  00006D                     	ds	4
   307  000071                     printf@eexp:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x11
   311  000071                     	ds	2
   312  000073                     printf@fval:
   313                           	callstack 0
   314                           
   315                           ; 3 bytes @ 0x13
   316  000073                     	ds	3
   317  000076                     printf@prec:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x16
   321  000076                     	ds	2
   322  000078                     printf@c:
   323                           	callstack 0
   324                           
   325                           ; 1 bytes @ 0x18
   326  000078                     	ds	1
   327                           
   328                           	psect	cstackCOMRAM
   329  000001                     __pcstackCOMRAM:
   330                           	callstack 0
   331  000001                     ??_isdigit:
   332  000001                     ?___awmod:
   333                           	callstack 0
   334  000001                     ?___lwmod:
   335                           	callstack 0
   336  000001                     ?___ftpack:
   337                           	callstack 0
   338  000001                     ?___ftneg:
   339                           	callstack 0
   340  000001                     ?__tdiv_to_l_:
   341                           	callstack 0
   342  000001                     ?__div_to_l_:
   343                           	callstack 0
   344  000001                     ?___lldiv:
   345                           	callstack 0
   346  000001                     ?___llmod:
   347                           	callstack 0
   348  000001                     LCD_write@dato:
   349                           	callstack 0
   350  000001                     ___awmod@dividend:
   351                           	callstack 0
   352  000001                     ___lwmod@dividend:
   353                           	callstack 0
   354  000001                     __div_to_l_@f1:
   355                           	callstack 0
   356  000001                     ___ftpack@arg:
   357                           	callstack 0
   358  000001                     __tdiv_to_l_@f1:
   359                           	callstack 0
   360  000001                     ___ftge@ff1:
   361                           	callstack 0
   362  000001                     ___ftneg@f1:
   363                           	callstack 0
   364  000001                     ___lldiv@dividend:
   365                           	callstack 0
   366  000001                     ___llmod@dividend:
   367                           	callstack 0
   368                           
   369                           ; 4 bytes @ 0x0
   370  000001                     	ds	1
   371  000002                     LCD_cmd@dato:
   372                           	callstack 0
   373  000002                     LCD_dato@dato:
   374                           	callstack 0
   375  000002                     _isdigit$881:
   376                           	callstack 0
   377                           
   378                           ; 1 bytes @ 0x1
   379  000002                     	ds	1
   380  000003                     ??_LCD_init:
   381  000003                     ??_LCD_clear:
   382  000003                     putch@dato:
   383                           	callstack 0
   384  000003                     isdigit@c:
   385                           	callstack 0
   386  000003                     LCD_printf@dato:
   387                           	callstack 0
   388  000003                     ___awmod@divisor:
   389                           	callstack 0
   390  000003                     ___lwmod@divisor:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x2
   394  000003                     	ds	1
   395  000004                     ___ftpack@exp:
   396                           	callstack 0
   397  000004                     __div_to_l_@f2:
   398                           	callstack 0
   399  000004                     __tdiv_to_l_@f2:
   400                           	callstack 0
   401  000004                     ___ftge@ff2:
   402                           	callstack 0
   403                           
   404                           ; 3 bytes @ 0x3
   405  000004                     	ds	1
   406  000005                     ___awmod@counter:
   407                           	callstack 0
   408  000005                     ___ftpack@sign:
   409                           	callstack 0
   410  000005                     ___lwmod@counter:
   411                           	callstack 0
   412  000005                     ___lldiv@divisor:
   413                           	callstack 0
   414  000005                     ___llmod@divisor:
   415                           	callstack 0
   416                           
   417                           ; 4 bytes @ 0x4
   418  000005                     	ds	1
   419  000006                     ??___ftpack:
   420  000006                     ?___lwdiv:
   421                           	callstack 0
   422  000006                     ___awmod@sign:
   423                           	callstack 0
   424  000006                     ___lwdiv@dividend:
   425                           	callstack 0
   426                           
   427                           ; 2 bytes @ 0x5
   428  000006                     	ds	1
   429  000007                     ??__tdiv_to_l_:
   430  000007                     ??___ftge:
   431  000007                     ?___awdiv:
   432                           	callstack 0
   433  000007                     ___awdiv@dividend:
   434                           	callstack 0
   435  000007                     __div_to_l_@quot:
   436                           	callstack 0
   437                           
   438                           ; 4 bytes @ 0x6
   439  000007                     	ds	1
   440  000008                     ___lwdiv@divisor:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x7
   444  000008                     	ds	1
   445  000009                     ?___lltoft:
   446                           	callstack 0
   447  000009                     ?___lwtoft:
   448                           	callstack 0
   449  000009                     ___llmod@counter:
   450                           	callstack 0
   451  000009                     ___awdiv@divisor:
   452                           	callstack 0
   453  000009                     ___lwtoft@c:
   454                           	callstack 0
   455  000009                     ___lldiv@quotient:
   456                           	callstack 0
   457  000009                     ___lltoft@c:
   458                           	callstack 0
   459                           
   460                           ; 4 bytes @ 0x8
   461  000009                     	ds	1
   462  00000A                     ___lwdiv@quotient:
   463                           	callstack 0
   464  00000A                     __tdiv_to_l_@quot:
   465                           	callstack 0
   466                           
   467                           ; 4 bytes @ 0x9
   468  00000A                     	ds	1
   469  00000B                     ___awdiv@counter:
   470                           	callstack 0
   471  00000B                     __div_to_l_@cntr:
   472                           	callstack 0
   473                           
   474                           ; 1 bytes @ 0xA
   475  00000B                     	ds	1
   476  00000C                     ?___ftdiv:
   477                           	callstack 0
   478  00000C                     ___awdiv@sign:
   479                           	callstack 0
   480  00000C                     __div_to_l_@exp1:
   481                           	callstack 0
   482  00000C                     ___lwdiv@counter:
   483                           	callstack 0
   484  00000C                     ___ftdiv@f1:
   485                           	callstack 0
   486                           
   487                           ; 3 bytes @ 0xB
   488  00000C                     	ds	1
   489  00000D                     ??___lltoft:
   490  00000D                     ?___wmul:
   491                           	callstack 0
   492  00000D                     ___lldiv@counter:
   493                           	callstack 0
   494  00000D                     ___wmul@multiplier:
   495                           	callstack 0
   496  00000D                     ___awdiv@quotient:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0xC
   500  00000D                     	ds	1
   501  00000E                     __tdiv_to_l_@cntr:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0xD
   505  00000E                     	ds	1
   506  00000F                     __tdiv_to_l_@exp1:
   507                           	callstack 0
   508  00000F                     ___wmul@multiplicand:
   509                           	callstack 0
   510  00000F                     ___ftdiv@f2:
   511                           	callstack 0
   512                           
   513                           ; 3 bytes @ 0xE
   514  00000F                     	ds	2
   515  000011                     ___lltoft@exp:
   516                           	callstack 0
   517  000011                     ___wmul@product:
   518                           	callstack 0
   519                           
   520                           ; 2 bytes @ 0x10
   521  000011                     	ds	1
   522  000012                     ??___ftdiv:
   523                           
   524                           ; 1 bytes @ 0x11
   525  000012                     	ds	3
   526  000015                     ___ftdiv@cntr:
   527                           	callstack 0
   528                           
   529                           ; 1 bytes @ 0x14
   530  000015                     	ds	1
   531  000016                     ___ftdiv@f3:
   532                           	callstack 0
   533                           
   534                           ; 3 bytes @ 0x15
   535  000016                     	ds	3
   536  000019                     ___ftdiv@exp:
   537                           	callstack 0
   538                           
   539                           ; 1 bytes @ 0x18
   540  000019                     	ds	1
   541  00001A                     ___ftdiv@sign:
   542                           	callstack 0
   543                           
   544                           ; 1 bytes @ 0x19
   545  00001A                     	ds	1
   546  00001B                     ?___ftmul:
   547                           	callstack 0
   548  00001B                     ___ftmul@f1:
   549                           	callstack 0
   550                           
   551                           ; 3 bytes @ 0x1A
   552  00001B                     	ds	3
   553  00001E                     ___ftmul@f2:
   554                           	callstack 0
   555                           
   556                           ; 3 bytes @ 0x1D
   557  00001E                     	ds	3
   558  000021                     ??___ftmul:
   559                           
   560                           ; 1 bytes @ 0x20
   561  000021                     	ds	3
   562  000024                     ___ftmul@exp:
   563                           	callstack 0
   564                           
   565                           ; 1 bytes @ 0x23
   566  000024                     	ds	1
   567  000025                     ___ftmul@f3_as_product:
   568                           	callstack 0
   569                           
   570                           ; 3 bytes @ 0x24
   571  000025                     	ds	3
   572  000028                     ___ftmul@cntr:
   573                           	callstack 0
   574                           
   575                           ; 1 bytes @ 0x27
   576  000028                     	ds	1
   577  000029                     ___ftmul@sign:
   578                           	callstack 0
   579                           
   580                           ; 1 bytes @ 0x28
   581  000029                     	ds	1
   582  00002A                     ?_fround:
   583                           	callstack 0
   584  00002A                     ?_scale:
   585                           	callstack 0
   586  00002A                     DHT22_read@dht_temperatura:
   587                           	callstack 0
   588                           
   589                           ; 2 bytes @ 0x29
   590  00002A                     	ds	2
   591  00002C                     DHT22_read@dht_humedad:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x2B
   595  00002C                     	ds	1
   596  00002D                     _fround$1099:
   597                           	callstack 0
   598  00002D                     _scale$1100:
   599                           	callstack 0
   600                           
   601                           ; 3 bytes @ 0x2C
   602  00002D                     	ds	1
   603  00002E                     ??_DHT22_read:
   604                           
   605                           ; 1 bytes @ 0x2D
   606  00002E                     	ds	2
   607  000030                     scale@scl:
   608                           	callstack 0
   609  000030                     DHT22_read@rawhumidity:
   610                           	callstack 0
   611  000030                     _fround$1098:
   612                           	callstack 0
   613                           
   614                           ; 3 bytes @ 0x2F
   615  000030                     	ds	1
   616  000031                     ?___fttol:
   617                           	callstack 0
   618  000031                     ___fttol@f1:
   619                           	callstack 0
   620                           
   621                           ; 3 bytes @ 0x30
   622  000031                     	ds	1
   623  000032                     DHT22_read@result:
   624                           	callstack 0
   625                           
   626                           ; 1 bytes @ 0x31
   627  000032                     	ds	1
   628  000033                     fround@prec:
   629                           	callstack 0
   630  000033                     DHT22_read@bits:
   631                           	callstack 0
   632                           
   633                           ; 5 bytes @ 0x32
   634  000033                     	ds	1
   635  000034                     ?___ftadd:
   636                           	callstack 0
   637  000034                     ___ftadd@f1:
   638                           	callstack 0
   639                           
   640                           ; 3 bytes @ 0x33
   641  000034                     	ds	1
   642  000035                     ??___fttol:
   643                           
   644                           ; 1 bytes @ 0x34
   645  000035                     	ds	2
   646  000037                     ___ftadd@f2:
   647                           	callstack 0
   648                           
   649                           ; 3 bytes @ 0x36
   650  000037                     	ds	1
   651  000038                     DHT22_read@rawtemperature:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x37
   655  000038                     	ds	2
   656  00003A                     ??___ftadd:
   657  00003A                     DHT22_read@i:
   658                           	callstack 0
   659  00003A                     ___fttol@sign1:
   660                           	callstack 0
   661                           
   662                           ; 1 bytes @ 0x39
   663  00003A                     	ds	1
   664  00003B                     DHT22_read@j:
   665                           	callstack 0
   666  00003B                     ___fttol@lval:
   667                           	callstack 0
   668                           
   669                           ; 4 bytes @ 0x3A
   670  00003B                     	ds	2
   671  00003D                     ___ftadd@sign:
   672                           	callstack 0
   673                           
   674                           ; 1 bytes @ 0x3C
   675  00003D                     	ds	1
   676  00003E                     ___ftadd@exp2:
   677                           	callstack 0
   678                           
   679                           ; 1 bytes @ 0x3D
   680  00003E                     	ds	1
   681  00003F                     ___ftadd@exp1:
   682                           	callstack 0
   683  00003F                     ___fttol@exp1:
   684                           	callstack 0
   685                           
   686                           ; 1 bytes @ 0x3E
   687  00003F                     	ds	1
   688  000040                     ?___ftsub:
   689                           	callstack 0
   690  000040                     ___ftsub@f1:
   691                           	callstack 0
   692                           
   693                           ; 3 bytes @ 0x3F
   694  000040                     	ds	3
   695  000043                     ___ftsub@f2:
   696                           	callstack 0
   697                           
   698                           ; 3 bytes @ 0x42
   699  000043                     	ds	3
   700  000046                     ?_printf:
   701                           	callstack 0
   702  000046                     printf@f:
   703                           	callstack 0
   704                           
   705                           ; 2 bytes @ 0x45
   706  000046                     	ds	5
   707  00004B                     ??_printf:
   708                           
   709                           ; 1 bytes @ 0x4A
   710  00004B                     	ds	6
   711  000051                     ??_main:
   712                           
   713                           ; 1 bytes @ 0x50
   714  000051                     	ds	2
   715  000053                     main@status:
   716                           	callstack 0
   717                           
   718                           ; 1 bytes @ 0x52
   719  000053                     	ds	1
   720  000054                     main@humedad:
   721                           	callstack 0
   722                           
   723                           ; 3 bytes @ 0x53
   724  000054                     	ds	3
   725  000057                     main@temperatura:
   726                           	callstack 0
   727                           
   728                           ; 3 bytes @ 0x56
   729  000057                     	ds	3
   730                           
   731 ;;
   732 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   733 ;;
   734 ;; *************** function _main *****************
   735 ;; Defined at:
   736 ;;		line 70 in file "main.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;		None
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  status          1   82[COMRAM] unsigned char 
   741 ;;  temperatura     3   86[COMRAM] float 
   742 ;;  humedad         3   83[COMRAM] float 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  1    wreg      void 
   745 ;; Registers used:
   746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   752 ;;      Params:         0       0       0       0       0       0       0       0       0
   753 ;;      Locals:         7       0       0       0       0       0       0       0       0
   754 ;;      Temps:          2       0       0       0       0       0       0       0       0
   755 ;;      Totals:         9       0       0       0       0       0       0       0       0
   756 ;;Total ram usage:        9 bytes
   757 ;; Hardware stack levels required when called: 4
   758 ;; This function calls:
   759 ;;		_DHT22_init
   760 ;;		_DHT22_read
   761 ;;		_LCD_clear
   762 ;;		_LCD_init
   763 ;;		_LCD_printf
   764 ;;		_LCD_segunda_linea
   765 ;;		_printf
   766 ;; This function is called by:
   767 ;;		Startup code after reset
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text0
   772  001F58                     __ptext0:
   773                           	callstack 0
   774  001F58                     _main:
   775                           	callstack 27
   776                           
   777                           ;main.c: 72: float temperatura;;main.c: 73: float humedad;;main.c: 75: DHT22_init();
   778                           
   779                           ;incstack = 0
   780  001F58  ECA4  F012         	call	_DHT22_init	;wreg free
   781                           
   782                           ;main.c: 76: LCD_init();
   783  001F5C  ECCE  F011         	call	_LCD_init	;wreg free
   784  001F60                     l3189:
   785                           
   786                           ;main.c: 82: uint8_t status = DHT22_read(&temperatura, &humedad);
   787  001F60  0E57               	movlw	low main@temperatura
   788  001F62  6E2A               	movwf	DHT22_read@dht_temperatura^0,c
   789  001F64  0E00               	movlw	high main@temperatura
   790  001F66  6E2B               	movwf	(DHT22_read@dht_temperatura+1)^0,c
   791  001F68  0E54               	movlw	low main@humedad
   792  001F6A  6E2C               	movwf	DHT22_read@dht_humedad^0,c
   793  001F6C  0E00               	movlw	high main@humedad
   794  001F6E  6E2D               	movwf	(DHT22_read@dht_humedad+1)^0,c
   795  001F70  EC58  F00B         	call	_DHT22_read	;wreg free
   796  001F74  6E53               	movwf	main@status^0,c
   797                           
   798                           ;main.c: 83: if(status==1){
   799  001F76  0453               	decf	main@status^0,w,c
   800  001F78  A4D8               	btfss	status,2,c
   801  001F7A  D01D               	goto	l3199
   802                           
   803                           ;main.c: 84: LCD_clear();
   804  001F7C  EC84  F012         	call	_LCD_clear	;wreg free
   805                           
   806                           ;main.c: 85: printf("  Temp. %2.2f", temperatura);
   807  001F80  0E85               	movlw	low STR_1
   808  001F82  6E46               	movwf	printf@f^0,c
   809  001F84  0E08               	movlw	high STR_1
   810  001F86  6E47               	movwf	(printf@f+1)^0,c
   811  001F88  C057  F048         	movff	main@temperatura,?_printf+2
   812  001F8C  C058  F049         	movff	main@temperatura+1,?_printf+3
   813  001F90  C059  F04A         	movff	main@temperatura+2,?_printf+4
   814  001F94  EC4D  F004         	call	_printf	;wreg free
   815                           
   816                           ;main.c: 86: LCD_segunda_linea();
   817  001F98  ECA0  F012         	call	_LCD_segunda_linea	;wreg free
   818                           
   819                           ;main.c: 87: printf("  Hume. %2.2f", humedad);
   820  001F9C  0E77               	movlw	low STR_2
   821  001F9E  6E46               	movwf	printf@f^0,c
   822  001FA0  0E08               	movlw	high STR_2
   823  001FA2  6E47               	movwf	(printf@f+1)^0,c
   824  001FA4  C054  F048         	movff	main@humedad,?_printf+2
   825  001FA8  C055  F049         	movff	main@humedad+1,?_printf+3
   826  001FAC  C056  F04A         	movff	main@humedad+2,?_printf+4
   827  001FB0  EC4D  F004         	call	_printf	;wreg free
   828                           
   829                           ;main.c: 89: }else{
   830  001FB4  D008               	goto	l3203
   831  001FB6                     l3199:
   832                           
   833                           ;main.c: 90: LCD_clear();
   834  001FB6  EC84  F012         	call	_LCD_clear	;wreg free
   835                           
   836                           ;main.c: 91: LCD_printf("error");
   837  001FBA  0E93               	movlw	low STR_3
   838  001FBC  6E03               	movwf	LCD_printf@dato^0,c
   839  001FBE  0E08               	movlw	high STR_3
   840  001FC0  6E04               	movwf	(LCD_printf@dato+1)^0,c
   841  001FC2  ECA5  F011         	call	_LCD_printf	;wreg free
   842  001FC6                     l3203:
   843                           
   844                           ;main.c: 92: };main.c: 93: _delay((unsigned long)((2000)*(20000000/4000.0)));
   845  001FC6  0E33               	movlw	51
   846  001FC8  6E52               	movwf	(??_main+1)^0,c
   847  001FCA  0EBB               	movlw	187
   848  001FCC  6E51               	movwf	??_main^0,c
   849  001FCE  0EE0               	movlw	224
   850  001FD0                     u3517:
   851  001FD0  2EE8               	decfsz	wreg,f,c
   852  001FD2  D7FE               	bra	u3517
   853  001FD4  2E51               	decfsz	??_main^0,f,c
   854  001FD6  D7FC               	bra	u3517
   855  001FD8  2E52               	decfsz	(??_main+1)^0,f,c
   856  001FDA  D7FA               	bra	u3517
   857  001FDC  D7C1               	goto	l3189
   858  001FDE                     __end_of_main:
   859                           	callstack 0
   860                           
   861 ;; *************** function _printf *****************
   862 ;; Defined at:
   863 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  f               2   69[COMRAM] PTR const unsigned char 
   866 ;;		 -> STR_2(14), STR_1(14), 
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  tmpval          4   13[BANK0 ] struct .
   869 ;;  val             4    5[BANK0 ] unsigned long 
   870 ;;  fval            3   19[BANK0 ] unsigned long 
   871 ;;  cp              3    0        PTR const unsigned char 
   872 ;;  prec            2   22[BANK0 ] int 
   873 ;;  eexp            2   17[BANK0 ] int 
   874 ;;  width           2   11[BANK0 ] int 
   875 ;;  flag            2    9[BANK0 ] unsigned short 
   876 ;;  ap              2    3[BANK0 ] PTR void [1]
   877 ;;		 -> ?_printf(2), 
   878 ;;  len             2    0        unsigned int 
   879 ;;  c               1   24[BANK0 ] unsigned char 
   880 ;;  d               1    0        unsigned char 
   881 ;; Return value:  Size  Location     Type
   882 ;;                  2   69[COMRAM] int 
   883 ;; Registers used:
   884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   885 ;; Tracked objects:
   886 ;;		On entry : 0/0
   887 ;;		On exit  : 0/0
   888 ;;		Unchanged: 0/0
   889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   890 ;;      Params:         5       0       0       0       0       0       0       0       0
   891 ;;      Locals:         0      25       0       0       0       0       0       0       0
   892 ;;      Temps:          6       0       0       0       0       0       0       0       0
   893 ;;      Totals:        11      25       0       0       0       0       0       0       0
   894 ;;Total ram usage:       36 bytes
   895 ;; Hardware stack levels used: 1
   896 ;; Hardware stack levels required when called: 3
   897 ;; This function calls:
   898 ;;		___awdiv
   899 ;;		___ftadd
   900 ;;		___ftge
   901 ;;		___ftmul
   902 ;;		___ftneg
   903 ;;		___ftsub
   904 ;;		___fttol
   905 ;;		___lldiv
   906 ;;		___llmod
   907 ;;		___lltoft
   908 ;;		___wmul
   909 ;;		__div_to_l_
   910 ;;		__tdiv_to_l_
   911 ;;		_fround
   912 ;;		_isdigit
   913 ;;		_putch
   914 ;;		_scale
   915 ;; This function is called by:
   916 ;;		_main
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text1
   921  00089A                     __ptext1:
   922                           	callstack 0
   923  00089A                     _printf:
   924                           	callstack 27
   925                           
   926                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          17: int prec;;doprnt.c: 525: unsigned short flag;;doprnt.c: 532: char d;;doprnt.c: 533: 
      +                          double fval;;doprnt.c: 534: int eexp;;doprnt.c: 540: union {;doprnt.c: 541: unsigned lon
      +                          g vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned long
      +                           val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = 
      +                          __va_start();
   927                           
   928                           ;incstack = 0
   929  00089A  0E48               	movlw	low (?_printf+2)
   930  00089C  0100               	movlb	0	; () banked
   931  00089E  6F63               	movwf	printf@ap& (0+255),b
   932  0008A0  0E00               	movlw	high (?_printf+2)
   933  0008A2  6F64               	movwf	(printf@ap+1)& (0+255),b
   934                           
   935                           ;doprnt.c: 553: while((c = *f++)) {
   936  0008A4  EF66  F008         	goto	l3173
   937  0008A8                     l2939:
   938                           
   939                           ; BSR set to: 0
   940                           ;doprnt.c: 555: if(c != '%')
   941  0008A8  0E25               	movlw	37
   942  0008AA  1978               	xorwf	printf@c& (0+255),w,b
   943  0008AC  B4D8               	btfsc	status,2,c
   944  0008AE  D005               	goto	l2943
   945                           
   946                           ; BSR set to: 0
   947                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
   948  0008B0  5178               	movf	printf@c& (0+255),w,b
   949  0008B2  EC9B  F012         	call	_putch
   950                           
   951                           ;doprnt.c: 559: continue;
   952  0008B6  EF66  F008         	goto	l3173
   953  0008BA                     l2943:
   954                           
   955                           ; BSR set to: 0
   956                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
   957  0008BA  0E00               	movlw	0
   958  0008BC  6F6C               	movwf	(printf@width+1)& (0+255),b
   959  0008BE  0E00               	movlw	0
   960  0008C0  6F6B               	movwf	printf@width& (0+255),b
   961                           
   962                           ;doprnt.c: 565: flag = 0;
   963  0008C2  0E00               	movlw	0
   964  0008C4  6F6A               	movwf	(printf@flag+1)& (0+255),b
   965  0008C6  0E00               	movlw	0
   966  0008C8  6F69               	movwf	printf@flag& (0+255),b
   967                           
   968                           ; BSR set to: 0
   969                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
   970  0008CA  C046  FFF6         	movff	printf@f,tblptrl
   971  0008CE  C047  FFF7         	movff	printf@f+1,tblptrh
   972  0008D2                     	if	0	;tblptru may be non-zero
   973  0008D2                     	endif
   974  0008D2                     	if	0	;tblptru may be non-zero
   975  0008D2                     	endif
   976  0008D2  0008               	tblrd		*
   977  0008D4  50F5               	movf	tablat,w,c
   978  0008D6  EC6A  F012         	call	_isdigit
   979  0008DA  A0D8               	btfss	status,0,c
   980  0008DC  D034               	goto	u2970
   981                           
   982                           ;doprnt.c: 615: width = 0;
   983  0008DE  0E00               	movlw	0
   984  0008E0  0100               	movlb	0	; () banked
   985  0008E2  6F6C               	movwf	(printf@width+1)& (0+255),b
   986  0008E4  0E00               	movlw	0
   987  0008E6  6F6B               	movwf	printf@width& (0+255),b
   988  0008E8                     l2949:
   989                           
   990                           ;doprnt.c: 617: width *= 10;
   991  0008E8  C06B  F00D         	movff	printf@width,___wmul@multiplier
   992  0008EC  C06C  F00E         	movff	printf@width+1,___wmul@multiplier+1
   993  0008F0  0E00               	movlw	0
   994  0008F2  6E10               	movwf	(___wmul@multiplicand+1)^0,c
   995  0008F4  0E0A               	movlw	10
   996  0008F6  6E0F               	movwf	___wmul@multiplicand^0,c
   997  0008F8  EC33  F012         	call	___wmul	;wreg free
   998  0008FC  C00D  F06B         	movff	?___wmul,printf@width
   999  000900  C00E  F06C         	movff	?___wmul+1,printf@width+1
  1000                           
  1001                           ;doprnt.c: 618: width += *f++ - '0';
  1002  000904  0ED0               	movlw	208
  1003  000906  6E4B               	movwf	??_printf^0,c
  1004  000908  0EFF               	movlw	255
  1005  00090A  6E4C               	movwf	(??_printf+1)^0,c
  1006  00090C  C046  FFF6         	movff	printf@f,tblptrl
  1007  000910  C047  FFF7         	movff	printf@f+1,tblptrh
  1008  000914                     	if	0	;tblptru may be non-zero
  1009  000914                     	endif
  1010  000914                     	if	0	;tblptru may be non-zero
  1011  000914                     	endif
  1012  000914  0008               	tblrd		*
  1013  000916  50F5               	movf	tablat,w,c
  1014  000918  6E4D               	movwf	(??_printf+2)^0,c
  1015  00091A  6A4E               	clrf	(??_printf+3)^0,c
  1016  00091C  504B               	movf	??_printf^0,w,c
  1017  00091E  264D               	addwf	(??_printf+2)^0,f,c
  1018  000920  504C               	movf	(??_printf+1)^0,w,c
  1019  000922  224E               	addwfc	(??_printf+3)^0,f,c
  1020  000924  504D               	movf	(??_printf+2)^0,w,c
  1021  000926  0100               	movlb	0	; () banked
  1022  000928  276B               	addwf	printf@width& (0+255),f,b
  1023  00092A  504E               	movf	(??_printf+3)^0,w,c
  1024  00092C  236C               	addwfc	(printf@width+1)& (0+255),f,b
  1025                           
  1026                           ; BSR set to: 0
  1027  00092E  4A46               	infsnz	printf@f^0,f,c
  1028  000930  2A47               	incf	(printf@f+1)^0,f,c
  1029                           
  1030                           ; BSR set to: 0
  1031                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  1032  000932  C046  FFF6         	movff	printf@f,tblptrl
  1033  000936  C047  FFF7         	movff	printf@f+1,tblptrh
  1034  00093A                     	if	0	;tblptru may be non-zero
  1035  00093A                     	endif
  1036  00093A                     	if	0	;tblptru may be non-zero
  1037  00093A                     	endif
  1038  00093A  0008               	tblrd		*
  1039  00093C  50F5               	movf	tablat,w,c
  1040  00093E  EC6A  F012         	call	_isdigit
  1041  000942  B0D8               	btfsc	status,0,c
  1042  000944  D7D1               	goto	l2949
  1043  000946                     u2970:
  1044                           
  1045                           ;doprnt.c: 625: };doprnt.c: 628: if(*f == '.') {
  1046  000946  C046  FFF6         	movff	printf@f,tblptrl
  1047  00094A  C047  FFF7         	movff	printf@f+1,tblptrh
  1048  00094E                     	if	0	;tblptru may be non-zero
  1049  00094E                     	endif
  1050  00094E                     	if	0	;tblptru may be non-zero
  1051  00094E                     	endif
  1052  00094E  0008               	tblrd		*
  1053  000950  50F5               	movf	tablat,w,c
  1054  000952  0A2E               	xorlw	46
  1055  000954  A4D8               	btfss	status,2,c
  1056  000956  D039               	goto	l2971
  1057                           
  1058                           ;doprnt.c: 629: flag |= 0x4000;
  1059  000958  0100               	movlb	0	; () banked
  1060  00095A  8D6A               	bsf	(printf@flag+1)& (0+255),6,b
  1061                           
  1062                           ;doprnt.c: 630: f++;
  1063  00095C  4A46               	infsnz	printf@f^0,f,c
  1064  00095E  2A47               	incf	(printf@f+1)^0,f,c
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;doprnt.c: 644: {;doprnt.c: 645: prec = 0;
  1068  000960  0E00               	movlw	0
  1069  000962  6F77               	movwf	(printf@prec+1)& (0+255),b
  1070  000964  0E00               	movlw	0
  1071  000966  6F76               	movwf	printf@prec& (0+255),b
  1072                           
  1073                           ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
  1074  000968  D025               	goto	l2969
  1075  00096A                     l2963:
  1076                           
  1077                           ;doprnt.c: 647: prec *= 10;
  1078  00096A  C076  F00D         	movff	printf@prec,___wmul@multiplier
  1079  00096E  C077  F00E         	movff	printf@prec+1,___wmul@multiplier+1
  1080  000972  0E00               	movlw	0
  1081  000974  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  1082  000976  0E0A               	movlw	10
  1083  000978  6E0F               	movwf	___wmul@multiplicand^0,c
  1084  00097A  EC33  F012         	call	___wmul	;wreg free
  1085  00097E  C00D  F076         	movff	?___wmul,printf@prec
  1086  000982  C00E  F077         	movff	?___wmul+1,printf@prec+1
  1087                           
  1088                           ;doprnt.c: 648: prec += *f++ - '0';
  1089  000986  0ED0               	movlw	208
  1090  000988  6E4B               	movwf	??_printf^0,c
  1091  00098A  0EFF               	movlw	255
  1092  00098C  6E4C               	movwf	(??_printf+1)^0,c
  1093  00098E  C046  FFF6         	movff	printf@f,tblptrl
  1094  000992  C047  FFF7         	movff	printf@f+1,tblptrh
  1095  000996                     	if	0	;tblptru may be non-zero
  1096  000996                     	endif
  1097  000996                     	if	0	;tblptru may be non-zero
  1098  000996                     	endif
  1099  000996  0008               	tblrd		*
  1100  000998  50F5               	movf	tablat,w,c
  1101  00099A  6E4D               	movwf	(??_printf+2)^0,c
  1102  00099C  6A4E               	clrf	(??_printf+3)^0,c
  1103  00099E  504B               	movf	??_printf^0,w,c
  1104  0009A0  264D               	addwf	(??_printf+2)^0,f,c
  1105  0009A2  504C               	movf	(??_printf+1)^0,w,c
  1106  0009A4  224E               	addwfc	(??_printf+3)^0,f,c
  1107  0009A6  504D               	movf	(??_printf+2)^0,w,c
  1108  0009A8  0100               	movlb	0	; () banked
  1109  0009AA  2776               	addwf	printf@prec& (0+255),f,b
  1110  0009AC  504E               	movf	(??_printf+3)^0,w,c
  1111  0009AE  2377               	addwfc	(printf@prec+1)& (0+255),f,b
  1112                           
  1113                           ; BSR set to: 0
  1114  0009B0  4A46               	infsnz	printf@f^0,f,c
  1115  0009B2  2A47               	incf	(printf@f+1)^0,f,c
  1116  0009B4                     l2969:
  1117                           
  1118                           ; BSR set to: 0
  1119  0009B4  C046  FFF6         	movff	printf@f,tblptrl
  1120  0009B8  C047  FFF7         	movff	printf@f+1,tblptrh
  1121  0009BC                     	if	0	;tblptru may be non-zero
  1122  0009BC                     	endif
  1123  0009BC                     	if	0	;tblptru may be non-zero
  1124  0009BC                     	endif
  1125  0009BC  0008               	tblrd		*
  1126  0009BE  50F5               	movf	tablat,w,c
  1127  0009C0  EC6A  F012         	call	_isdigit
  1128  0009C4  A0D8               	btfss	status,0,c
  1129  0009C6  D00A               	goto	l2979
  1130  0009C8  D7D0               	goto	l2963
  1131  0009CA                     l2971:
  1132                           
  1133                           ;doprnt.c: 652: prec = 0;
  1134  0009CA  0E00               	movlw	0
  1135  0009CC  0100               	movlb	0	; () banked
  1136  0009CE  6F77               	movwf	(printf@prec+1)& (0+255),b
  1137  0009D0  0E00               	movlw	0
  1138  0009D2  6F76               	movwf	printf@prec& (0+255),b
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;doprnt.c: 654: flag |= 0x1000;
  1142  0009D4  896A               	bsf	(printf@flag+1)& (0+255),4,b
  1143  0009D6  D002               	goto	l2979
  1144  0009D8                     l2975:
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;doprnt.c: 689: flag |= 0x400;
  1148  0009D8  856A               	bsf	(printf@flag+1)& (0+255),2,b
  1149                           
  1150                           ;doprnt.c: 690: break;
  1151  0009DA  D012               	goto	l2981
  1152  0009DC                     l2979:
  1153  0009DC  C046  FFF6         	movff	printf@f,tblptrl
  1154  0009E0  C047  FFF7         	movff	printf@f+1,tblptrh
  1155  0009E4  4A46               	infsnz	printf@f^0,f,c
  1156  0009E6  2A47               	incf	(printf@f+1)^0,f,c
  1157  0009E8                     	if	0	;tblptru may be non-zero
  1158  0009E8                     	endif
  1159  0009E8                     	if	0	;tblptru may be non-zero
  1160  0009E8                     	endif
  1161  0009E8  0008               	tblrd		*
  1162  0009EA  CFF5 F078          	movff	tablat,printf@c
  1163  0009EE  0100               	movlb	0	; () banked
  1164  0009F0  5178               	movf	printf@c& (0+255),w,b
  1165                           
  1166                           ; Switch size 1, requested type "simple"
  1167                           ; Number of cases is 2, Range of values is 0 to 102
  1168                           ; switch strategies available:
  1169                           ; Name         Instructions Cycles
  1170                           ; simple_byte            7     4 (average)
  1171                           ;	Chosen strategy is simple_byte
  1172  0009F2  0A00               	xorlw	0	; case 0
  1173  0009F4  B4D8               	btfsc	status,2,c
  1174  0009F6  0012               	return	
  1175  0009F8  0A66               	xorlw	102	; case 102
  1176  0009FA  B4D8               	btfsc	status,2,c
  1177  0009FC  D7ED               	goto	l2975
  1178  0009FE  D366               	goto	l3173
  1179  000A00                     l2981:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;doprnt.c: 851: if(flag & (0x700)) {
  1183  000A00  0E07               	movlw	7
  1184  000A02  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1185  000A04  B4D8               	btfsc	status,2,c
  1186  000A06  D2DE               	goto	l3129
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;doprnt.c: 853: if(flag & 0x1000)
  1190  000A08  A96A               	btfss	(printf@flag+1)& (0+255),4,b
  1191  000A0A  D004               	goto	l2987
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;doprnt.c: 855: prec = 6;
  1195  000A0C  0E00               	movlw	0
  1196  000A0E  6F77               	movwf	(printf@prec+1)& (0+255),b
  1197  000A10  0E06               	movlw	6
  1198  000A12  6F76               	movwf	printf@prec& (0+255),b
  1199  000A14                     l2987:
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;doprnt.c: 856: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1203  000A14  C063  FFD9         	movff	printf@ap,fsr2l
  1204  000A18  C064  FFDA         	movff	printf@ap+1,fsr2h
  1205  000A1C  CFDE F073          	movff	postinc2,printf@fval
  1206  000A20  CFDE F074          	movff	postinc2,printf@fval+1
  1207  000A24  CFDD F075          	movff	postdec2,printf@fval+2
  1208                           
  1209                           ; BSR set to: 0
  1210  000A28  0E03               	movlw	3
  1211  000A2A  2763               	addwf	printf@ap& (0+255),f,b
  1212  000A2C  0E00               	movlw	0
  1213  000A2E  2364               	addwfc	(printf@ap+1)& (0+255),f,b
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;doprnt.c: 857: if(fval < 0.0) {
  1217  000A30  AF75               	btfss	(printf@fval+2)& (0+255),7,b
  1218  000A32  D011               	goto	l2997
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;doprnt.c: 858: fval = -fval;
  1222  000A34  C073  F001         	movff	printf@fval,___ftneg@f1
  1223  000A38  C074  F002         	movff	printf@fval+1,___ftneg@f1+1
  1224  000A3C  C075  F003         	movff	printf@fval+2,___ftneg@f1+2
  1225  000A40  EC46  F012         	call	___ftneg	;wreg free
  1226  000A44  C001  F073         	movff	?___ftneg,printf@fval
  1227  000A48  C002  F074         	movff	?___ftneg+1,printf@fval+1
  1228  000A4C  C003  F075         	movff	?___ftneg+2,printf@fval+2
  1229                           
  1230                           ;doprnt.c: 859: flag |= 0x03;
  1231  000A50  0E03               	movlw	3
  1232  000A52  0100               	movlb	0	; () banked
  1233  000A54  1369               	iorwf	printf@flag& (0+255),f,b
  1234  000A56                     l2997:
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;doprnt.c: 860: };doprnt.c: 861: eexp = 0;
  1238  000A56  0E00               	movlw	0
  1239  000A58  6F72               	movwf	(printf@eexp+1)& (0+255),b
  1240  000A5A  0E00               	movlw	0
  1241  000A5C  6F71               	movwf	printf@eexp& (0+255),b
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;doprnt.c: 862: if( fval!=0) {
  1245  000A5E  5173               	movf	printf@fval& (0+255),w,b
  1246  000A60  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1247  000A62  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1248  000A64  B4D8               	btfsc	status,2,c
  1249  000A66  D086               	goto	l3025
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;doprnt.c: 863: (void)(*(&eexp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1253  000A68  0E82               	movlw	130
  1254  000A6A  6E4B               	movwf	??_printf^0,c
  1255  000A6C  0EFF               	movlw	255
  1256  000A6E  6E4C               	movwf	(??_printf+1)^0,c
  1257  000A70  C073  F04D         	movff	printf@fval,??_printf+2
  1258  000A74  C074  F04E         	movff	printf@fval+1,??_printf+3
  1259  000A78  C075  F04F         	movff	printf@fval+2,??_printf+4
  1260  000A7C  C076  F050         	movff	printf@fval+3,??_printf+5
  1261  000A80  0E10               	movlw	16
  1262  000A82  D005               	goto	u3040
  1263  000A84                     u3045:
  1264  000A84  90D8               	bcf	status,0,c
  1265  000A86  3250               	rrcf	(??_printf+5)^0,f,c
  1266  000A88  324F               	rrcf	(??_printf+4)^0,f,c
  1267  000A8A  324E               	rrcf	(??_printf+3)^0,f,c
  1268  000A8C  324D               	rrcf	(??_printf+2)^0,f,c
  1269  000A8E                     u3040:
  1270  000A8E  2EE8               	decfsz	wreg,f,c
  1271  000A90  D7F9               	goto	u3045
  1272  000A92  504D               	movf	(??_printf+2)^0,w,c
  1273  000A94  244B               	addwf	??_printf^0,w,c
  1274  000A96  6F71               	movwf	printf@eexp& (0+255),b
  1275  000A98  0E00               	movlw	0
  1276  000A9A  204C               	addwfc	(??_printf+1)^0,w,c
  1277  000A9C  6F72               	movwf	(printf@eexp+1)& (0+255),b
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;doprnt.c: 864: eexp--;
  1281  000A9E  0771               	decf	printf@eexp& (0+255),f,b
  1282  000AA0  A0D8               	btfss	status,0,c
  1283  000AA2  0772               	decf	(printf@eexp+1)& (0+255),f,b
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 865: eexp *= 3;
  1287  000AA4  C071  F00D         	movff	printf@eexp,___wmul@multiplier
  1288  000AA8  C072  F00E         	movff	printf@eexp+1,___wmul@multiplier+1
  1289  000AAC  0E00               	movlw	0
  1290  000AAE  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  1291  000AB0  0E03               	movlw	3
  1292  000AB2  6E0F               	movwf	___wmul@multiplicand^0,c
  1293  000AB4  EC33  F012         	call	___wmul	;wreg free
  1294  000AB8  C00D  F071         	movff	?___wmul,printf@eexp
  1295  000ABC  C00E  F072         	movff	?___wmul+1,printf@eexp+1
  1296                           
  1297                           ;doprnt.c: 866: eexp /= 10;
  1298  000AC0  C071  F007         	movff	printf@eexp,___awdiv@dividend
  1299  000AC4  C072  F008         	movff	printf@eexp+1,___awdiv@dividend+1
  1300  000AC8  0E00               	movlw	0
  1301  000ACA  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  1302  000ACC  0E0A               	movlw	10
  1303  000ACE  6E09               	movwf	___awdiv@divisor^0,c
  1304  000AD0  ECEF  F00F         	call	___awdiv	;wreg free
  1305  000AD4  C007  F071         	movff	?___awdiv,printf@eexp
  1306  000AD8  C008  F072         	movff	?___awdiv+1,printf@eexp+1
  1307                           
  1308                           ;doprnt.c: 867: if(eexp < 0)
  1309  000ADC  0100               	movlb	0	; () banked
  1310  000ADE  AF72               	btfss	(printf@eexp+1)& (0+255),7,b
  1311  000AE0  D003               	goto	l3013
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;doprnt.c: 868: eexp--;
  1315  000AE2  0771               	decf	printf@eexp& (0+255),f,b
  1316  000AE4  A0D8               	btfss	status,0,c
  1317  000AE6  0772               	decf	(printf@eexp+1)& (0+255),f,b
  1318  000AE8                     l3013:
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;doprnt.c: 872: tmpval.integ = scale(-eexp);
  1322  000AE8  5171               	movf	printf@eexp& (0+255),w,b
  1323  000AEA  0800               	sublw	0
  1324  000AEC  EC75  F008         	call	_scale
  1325  000AF0  C02A  F06D         	movff	?_scale,printf@tmpval
  1326  000AF4  C02B  F06E         	movff	?_scale+1,printf@tmpval+1
  1327  000AF8  C02C  F06F         	movff	?_scale+2,printf@tmpval+2
  1328                           
  1329                           ;doprnt.c: 873: tmpval.integ *= fval;
  1330  000AFC  C06D  F01B         	movff	printf@tmpval,___ftmul@f1
  1331  000B00  C06E  F01C         	movff	printf@tmpval+1,___ftmul@f1+1
  1332  000B04  C06F  F01D         	movff	printf@tmpval+2,___ftmul@f1+2
  1333  000B08  C073  F01E         	movff	printf@fval,___ftmul@f2
  1334  000B0C  C074  F01F         	movff	printf@fval+1,___ftmul@f2+1
  1335  000B10  C075  F020         	movff	printf@fval+2,___ftmul@f2+2
  1336  000B14  ECFF  F00D         	call	___ftmul	;wreg free
  1337  000B18  C01B  F06D         	movff	?___ftmul,printf@tmpval
  1338  000B1C  C01C  F06E         	movff	?___ftmul+1,printf@tmpval+1
  1339  000B20  C01D  F06F         	movff	?___ftmul+2,printf@tmpval+2
  1340                           
  1341                           ;doprnt.c: 874: if(tmpval.integ < 1.0)
  1342  000B24  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1343  000B28  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1344  000B2C  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1345  000B30  0E00               	movlw	0
  1346  000B32  6E04               	movwf	___ftge@ff2^0,c
  1347  000B34  0E80               	movlw	128
  1348  000B36  6E05               	movwf	(___ftge@ff2+1)^0,c
  1349  000B38  0E3F               	movlw	63
  1350  000B3A  6E06               	movwf	(___ftge@ff2+2)^0,c
  1351  000B3C  EC72  F010         	call	___ftge	;wreg free
  1352  000B40  B0D8               	btfsc	status,0,c
  1353  000B42  D005               	goto	l3021
  1354                           
  1355                           ;doprnt.c: 875: eexp--;
  1356  000B44  0100               	movlb	0	; () banked
  1357  000B46  0771               	decf	printf@eexp& (0+255),f,b
  1358  000B48  A0D8               	btfss	status,0,c
  1359  000B4A  0772               	decf	(printf@eexp+1)& (0+255),f,b
  1360  000B4C  D013               	goto	l3025
  1361  000B4E                     l3021:
  1362                           
  1363                           ;doprnt.c: 876: else if(tmpval.integ >= 10.0)
  1364  000B4E  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1365  000B52  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1366  000B56  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1367  000B5A  0E00               	movlw	0
  1368  000B5C  6E04               	movwf	___ftge@ff2^0,c
  1369  000B5E  0E20               	movlw	32
  1370  000B60  6E05               	movwf	(___ftge@ff2+1)^0,c
  1371  000B62  0E41               	movlw	65
  1372  000B64  6E06               	movwf	(___ftge@ff2+2)^0,c
  1373  000B66  EC72  F010         	call	___ftge	;wreg free
  1374  000B6A  A0D8               	btfss	status,0,c
  1375  000B6C  D003               	goto	l3025
  1376                           
  1377                           ;doprnt.c: 877: eexp++;
  1378  000B6E  0100               	movlb	0	; () banked
  1379  000B70  4B71               	infsnz	printf@eexp& (0+255),f,b
  1380  000B72  2B72               	incf	(printf@eexp+1)& (0+255),f,b
  1381  000B74                     l3025:
  1382                           
  1383                           ;doprnt.c: 878: };doprnt.c: 1138: if(prec <= 12)
  1384  000B74  0100               	movlb	0	; () banked
  1385  000B76  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1386  000B78  D006               	goto	u3080
  1387  000B7A  5177               	movf	(printf@prec+1)& (0+255),w,b
  1388  000B7C  E11B               	bnz	l3029
  1389  000B7E  0E0D               	movlw	13
  1390  000B80  5D76               	subwf	printf@prec& (0+255),w,b
  1391  000B82  B0D8               	btfsc	status,0,c
  1392  000B84  D017               	goto	l3029
  1393  000B86                     u3080:
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;doprnt.c: 1139: fval += fround((unsigned int)prec);
  1397  000B86  C073  F034         	movff	printf@fval,___ftadd@f1
  1398  000B8A  C074  F035         	movff	printf@fval+1,___ftadd@f1+1
  1399  000B8E  C075  F036         	movff	printf@fval+2,___ftadd@f1+2
  1400  000B92  5176               	movf	printf@prec& (0+255),w,b
  1401  000B94  EC29  F00A         	call	_fround
  1402  000B98  C02A  F037         	movff	?_fround,___ftadd@f2
  1403  000B9C  C02B  F038         	movff	?_fround+1,___ftadd@f2+1
  1404  000BA0  C02C  F039         	movff	?_fround+2,___ftadd@f2+2
  1405  000BA4  EC32  F00C         	call	___ftadd	;wreg free
  1406  000BA8  C034  F073         	movff	?___ftadd,printf@fval
  1407  000BAC  C035  F074         	movff	?___ftadd+1,printf@fval+1
  1408  000BB0  C036  F075         	movff	?___ftadd+2,printf@fval+2
  1409  000BB4                     l3029:
  1410                           
  1411                           ;doprnt.c: 1142: if((eexp > 9)||(fval != 0 && (unsigned long)fval == 0 && eexp > 1)) {
  1412  000BB4  0100               	movlb	0	; () banked
  1413  000BB6  BF72               	btfsc	(printf@eexp+1)& (0+255),7,b
  1414  000BB8  D006               	goto	u3090
  1415  000BBA  5172               	movf	(printf@eexp+1)& (0+255),w,b
  1416  000BBC  E120               	bnz	l3037
  1417  000BBE  0E0A               	movlw	10
  1418  000BC0  5D71               	subwf	printf@eexp& (0+255),w,b
  1419  000BC2  B0D8               	btfsc	status,0,c
  1420  000BC4  D01C               	goto	u3120
  1421  000BC6                     u3090:
  1422                           
  1423                           ; BSR set to: 0
  1424  000BC6  5173               	movf	printf@fval& (0+255),w,b
  1425  000BC8  1174               	iorwf	(printf@fval+1)& (0+255),w,b
  1426  000BCA  1175               	iorwf	(printf@fval+2)& (0+255),w,b
  1427  000BCC  B4D8               	btfsc	status,2,c
  1428  000BCE  D056               	goto	l3051
  1429                           
  1430                           ; BSR set to: 0
  1431  000BD0  C073  F031         	movff	printf@fval,___fttol@f1
  1432  000BD4  C074  F032         	movff	printf@fval+1,___fttol@f1+1
  1433  000BD8  C075  F033         	movff	printf@fval+2,___fttol@f1+2
  1434  000BDC  ECEC  F00E         	call	___fttol	;wreg free
  1435  000BE0  5031               	movf	?___fttol^0,w,c
  1436  000BE2  1032               	iorwf	(?___fttol+1)^0,w,c
  1437  000BE4  1033               	iorwf	(?___fttol+2)^0,w,c
  1438  000BE6  1034               	iorwf	(?___fttol+3)^0,w,c
  1439  000BE8  A4D8               	btfss	status,2,c
  1440  000BEA  D048               	goto	l3051
  1441  000BEC  0100               	movlb	0	; () banked
  1442  000BEE  BF72               	btfsc	(printf@eexp+1)& (0+255),7,b
  1443  000BF0  D045               	goto	l3051
  1444  000BF2  5172               	movf	(printf@eexp+1)& (0+255),w,b
  1445  000BF4  E104               	bnz	u3120
  1446  000BF6  0E02               	movlw	2
  1447  000BF8  5D71               	subwf	printf@eexp& (0+255),w,b
  1448  000BFA  A0D8               	btfss	status,0,c
  1449  000BFC  D03F               	goto	l3051
  1450  000BFE                     u3120:
  1451  000BFE                     l3037:
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;doprnt.c: 1146: if(tmpval.integ < 4.294967296){
  1455  000BFE  C06D  F001         	movff	printf@tmpval,___ftge@ff1
  1456  000C02  C06E  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1457  000C06  C06F  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1458  000C0A  0E70               	movlw	112
  1459  000C0C  6E04               	movwf	___ftge@ff2^0,c
  1460  000C0E  0E89               	movlw	137
  1461  000C10  6E05               	movwf	(___ftge@ff2+1)^0,c
  1462  000C12  0E40               	movlw	64
  1463  000C14  6E06               	movwf	(___ftge@ff2+2)^0,c
  1464  000C16  EC72  F010         	call	___ftge	;wreg free
  1465  000C1A  B0D8               	btfsc	status,0,c
  1466  000C1C  D003               	goto	l3041
  1467                           
  1468                           ;doprnt.c: 1147: eexp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1469  000C1E  0100               	movlb	0	; () banked
  1470  000C20  0EF7               	movlw	247
  1471  000C22  D002               	goto	L1
  1472  000C24                     l3041:
  1473                           
  1474                           ;doprnt.c: 1149: eexp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1475  000C24  0100               	movlb	0	; () banked
  1476  000C26  0EF8               	movlw	248
  1477  000C28                     L1:
  1478  000C28  2771               	addwf	printf@eexp& (0+255),f,b
  1479  000C2A  0EFF               	movlw	255
  1480  000C2C  2372               	addwfc	(printf@eexp+1)& (0+255),f,b
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;doprnt.c: 1150: };doprnt.c: 1151: tmpval.integ = scale(eexp);
  1484  000C2E  5171               	movf	printf@eexp& (0+255),w,b
  1485  000C30  EC75  F008         	call	_scale
  1486  000C34  C02A  F06D         	movff	?_scale,printf@tmpval
  1487  000C38  C02B  F06E         	movff	?_scale+1,printf@tmpval+1
  1488  000C3C  C02C  F06F         	movff	?_scale+2,printf@tmpval+2
  1489                           
  1490                           ;doprnt.c: 1152: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1491  000C40  C073  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1492  000C44  C074  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1493  000C48  C075  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1494  000C4C  C06D  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1495  000C50  C06E  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1496  000C54  C06F  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1497  000C58  EC06  F00D         	call	__tdiv_to_l_	;wreg free
  1498  000C5C  C001  F065         	movff	?__tdiv_to_l_,printf@val
  1499  000C60  C002  F066         	movff	?__tdiv_to_l_+1,printf@val+1
  1500  000C64  C003  F067         	movff	?__tdiv_to_l_+2,printf@val+2
  1501  000C68  C004  F068         	movff	?__tdiv_to_l_+3,printf@val+3
  1502                           
  1503                           ;doprnt.c: 1155: fval = 0.0;
  1504  000C6C  0E00               	movlw	0
  1505  000C6E  0100               	movlb	0	; () banked
  1506  000C70  6F73               	movwf	printf@fval& (0+255),b
  1507  000C72  0E00               	movlw	0
  1508  000C74  6F74               	movwf	(printf@fval+1)& (0+255),b
  1509  000C76  0E00               	movlw	0
  1510  000C78  6F75               	movwf	(printf@fval+2)& (0+255),b
  1511                           
  1512                           ;doprnt.c: 1156: } else {
  1513  000C7A  D033               	goto	l3055
  1514  000C7C                     l3051:
  1515                           
  1516                           ;doprnt.c: 1157: val = (unsigned long)fval;
  1517  000C7C  C073  F031         	movff	printf@fval,___fttol@f1
  1518  000C80  C074  F032         	movff	printf@fval+1,___fttol@f1+1
  1519  000C84  C075  F033         	movff	printf@fval+2,___fttol@f1+2
  1520  000C88  ECEC  F00E         	call	___fttol	;wreg free
  1521  000C8C  C031  F065         	movff	?___fttol,printf@val
  1522  000C90  C032  F066         	movff	?___fttol+1,printf@val+1
  1523  000C94  C033  F067         	movff	?___fttol+2,printf@val+2
  1524  000C98  C034  F068         	movff	?___fttol+3,printf@val+3
  1525                           
  1526                           ;doprnt.c: 1158: fval -= (double)val;
  1527  000C9C  C073  F040         	movff	printf@fval,___ftsub@f1
  1528  000CA0  C074  F041         	movff	printf@fval+1,___ftsub@f1+1
  1529  000CA4  C075  F042         	movff	printf@fval+2,___ftsub@f1+2
  1530  000CA8  C065  F009         	movff	printf@val,___lltoft@c
  1531  000CAC  C066  F00A         	movff	printf@val+1,___lltoft@c+1
  1532  000CB0  C067  F00B         	movff	printf@val+2,___lltoft@c+2
  1533  000CB4  C068  F00C         	movff	printf@val+3,___lltoft@c+3
  1534  000CB8  EC4E  F011         	call	___lltoft	;wreg free
  1535  000CBC  C009  F043         	movff	?___lltoft,___ftsub@f2
  1536  000CC0  C00A  F044         	movff	?___lltoft+1,___ftsub@f2+1
  1537  000CC4  C00B  F045         	movff	?___lltoft+2,___ftsub@f2+2
  1538  000CC8  EC13  F012         	call	___ftsub	;wreg free
  1539  000CCC  C040  F073         	movff	?___ftsub,printf@fval
  1540  000CD0  C041  F074         	movff	?___ftsub+1,printf@fval+1
  1541  000CD4  C042  F075         	movff	?___ftsub+2,printf@fval+2
  1542                           
  1543                           ;doprnt.c: 1159: eexp = 0;
  1544  000CD8  0E00               	movlw	0
  1545  000CDA  0100               	movlb	0	; () banked
  1546  000CDC  6F72               	movwf	(printf@eexp+1)& (0+255),b
  1547  000CDE  0E00               	movlw	0
  1548  000CE0  6F71               	movwf	printf@eexp& (0+255),b
  1549  000CE2                     l3055:
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;doprnt.c: 1160: };doprnt.c: 1162: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ;
      +                           c++)
  1553  000CE2  0E01               	movlw	1
  1554  000CE4  6F78               	movwf	printf@c& (0+255),b
  1555  000CE6                     l3061:
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;doprnt.c: 1163: if(val < dpowers[c])
  1559  000CE6  5178               	movf	printf@c& (0+255),w,b
  1560  000CE8  0D04               	mullw	4
  1561  000CEA  0E4F               	movlw	low _dpowers
  1562  000CEC  24F3               	addwf	243,w,c
  1563  000CEE  6EF6               	movwf	tblptrl,c
  1564  000CF0  0E08               	movlw	high _dpowers
  1565  000CF2  20F4               	addwfc	244,w,c
  1566  000CF4  6EF7               	movwf	tblptrh,c
  1567  000CF6                     	if	0	;There are less than 3 active tblptr bytes
  1568  000CF6                     	endif
  1569  000CF6  0009               	tblrd		*+
  1570  000CF8  50F5               	movf	tablat,w,c
  1571  000CFA  5D65               	subwf	printf@val& (0+255),w,b
  1572  000CFC  0009               	tblrd		*+
  1573  000CFE  50F5               	movf	tablat,w,c
  1574  000D00  5966               	subwfb	(printf@val+1)& (0+255),w,b
  1575  000D02  0009               	tblrd		*+
  1576  000D04  50F5               	movf	tablat,w,c
  1577  000D06  5967               	subwfb	(printf@val+2)& (0+255),w,b
  1578  000D08  0009               	tblrd		*+
  1579  000D0A  50F5               	movf	tablat,w,c
  1580  000D0C  5968               	subwfb	(printf@val+3)& (0+255),w,b
  1581  000D0E  A0D8               	btfss	status,0,c
  1582  000D10  D005               	goto	u3150
  1583                           
  1584                           ; BSR set to: 0
  1585  000D12  2B78               	incf	printf@c& (0+255),f,b
  1586                           
  1587                           ; BSR set to: 0
  1588  000D14  0E0A               	movlw	10
  1589  000D16  1978               	xorwf	printf@c& (0+255),w,b
  1590  000D18  A4D8               	btfss	status,2,c
  1591  000D1A  D7E5               	goto	l3061
  1592  000D1C                     u3150:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;doprnt.c: 1168: width -= prec + c + eexp;
  1596  000D1C  5178               	movf	printf@c& (0+255),w,b
  1597  000D1E  2576               	addwf	printf@prec& (0+255),w,b
  1598  000D20  6E4B               	movwf	??_printf^0,c
  1599  000D22  0E00               	movlw	0
  1600  000D24  2177               	addwfc	(printf@prec+1)& (0+255),w,b
  1601  000D26  6E4C               	movwf	(??_printf+1)^0,c
  1602  000D28  5171               	movf	printf@eexp& (0+255),w,b
  1603  000D2A  264B               	addwf	??_printf^0,f,c
  1604  000D2C  5172               	movf	(printf@eexp+1)& (0+255),w,b
  1605  000D2E  224C               	addwfc	(??_printf+1)^0,f,c
  1606  000D30  504B               	movf	??_printf^0,w,c
  1607  000D32  5F6B               	subwf	printf@width& (0+255),f,b
  1608  000D34  504C               	movf	(??_printf+1)^0,w,c
  1609  000D36  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  1610                           
  1611                           ;doprnt.c: 1169: if(;doprnt.c: 1173: prec)
  1612  000D38  5176               	movf	printf@prec& (0+255),w,b
  1613  000D3A  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  1614  000D3C  B4D8               	btfsc	status,2,c
  1615  000D3E  D003               	goto	l3073
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;doprnt.c: 1174: width--;
  1619  000D40  076B               	decf	printf@width& (0+255),f,b
  1620  000D42  A0D8               	btfss	status,0,c
  1621  000D44  076C               	decf	(printf@width+1)& (0+255),f,b
  1622  000D46                     l3073:
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;doprnt.c: 1175: if(flag & 0x03)
  1626  000D46  0E03               	movlw	3
  1627  000D48  1569               	andwf	printf@flag& (0+255),w,b
  1628  000D4A  6E4B               	movwf	??_printf^0,c
  1629  000D4C  0E00               	movlw	0
  1630  000D4E  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1631  000D50  6E4C               	movwf	(??_printf+1)^0,c
  1632  000D52  504B               	movf	??_printf^0,w,c
  1633  000D54  104C               	iorwf	(??_printf+1)^0,w,c
  1634  000D56  B4D8               	btfsc	status,2,c
  1635  000D58  D009               	goto	l3081
  1636  000D5A                     u3170:
  1637                           
  1638                           ;doprnt.c: 1176: width--;
  1639  000D5A  0100               	movlb	0	; () banked
  1640  000D5C  076B               	decf	printf@width& (0+255),f,b
  1641  000D5E  A0D8               	btfss	status,0,c
  1642  000D60  076C               	decf	(printf@width+1)& (0+255),f,b
  1643  000D62  D004               	goto	l3081
  1644  000D64                     l3077:
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;doprnt.c: 1207: (putch(' ') );
  1648  000D64  0E20               	movlw	32
  1649  000D66  EC9B  F012         	call	_putch
  1650  000D6A  D7F7               	goto	u3170
  1651  000D6C                     l3081:
  1652                           
  1653                           ; BSR set to: 0
  1654  000D6C  BF6C               	btfsc	(printf@width+1)& (0+255),7,b
  1655  000D6E  D005               	goto	u3180
  1656  000D70  516C               	movf	(printf@width+1)& (0+255),w,b
  1657  000D72  E1F8               	bnz	l3077
  1658  000D74  056B               	decf	printf@width& (0+255),w,b
  1659  000D76  B0D8               	btfsc	status,0,c
  1660  000D78  D7F5               	goto	l3077
  1661  000D7A                     u3180:
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;doprnt.c: 1209: };doprnt.c: 1214: if(flag & 0x03)
  1665  000D7A  0E03               	movlw	3
  1666  000D7C  1569               	andwf	printf@flag& (0+255),w,b
  1667  000D7E  6E4B               	movwf	??_printf^0,c
  1668  000D80  0E00               	movlw	0
  1669  000D82  156A               	andwf	(printf@flag+1)& (0+255),w,b
  1670  000D84  6E4C               	movwf	(??_printf+1)^0,c
  1671  000D86  504B               	movf	??_printf^0,w,c
  1672  000D88  104C               	iorwf	(??_printf+1)^0,w,c
  1673  000D8A  B4D8               	btfsc	status,2,c
  1674  000D8C  D049               	goto	l3093
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;doprnt.c: 1216: (putch('-') );
  1678  000D8E  0E2D               	movlw	45
  1679  000D90  EC9B  F012         	call	_putch
  1680  000D94  D045               	goto	l3093
  1681  000D96                     l3087:
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;doprnt.c: 1226: {;doprnt.c: 1227: tmpval.vd = val/dpowers[c];
  1685  000D96  C065  F001         	movff	printf@val,___lldiv@dividend
  1686  000D9A  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1687  000D9E  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1688  000DA2  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1689  000DA6  5178               	movf	printf@c& (0+255),w,b
  1690  000DA8  0D04               	mullw	4
  1691  000DAA  0E4F               	movlw	low _dpowers
  1692  000DAC  24F3               	addwf	243,w,c
  1693  000DAE  6EF6               	movwf	tblptrl,c
  1694  000DB0  0E08               	movlw	high _dpowers
  1695  000DB2  20F4               	addwfc	244,w,c
  1696  000DB4  6EF7               	movwf	tblptrh,c
  1697  000DB6                     	if	0	;There are less than 3 active tblptr bytes
  1698  000DB6                     	endif
  1699  000DB6  0009               	tblrd		*+
  1700  000DB8  CFF5 F005          	movff	tablat,___lldiv@divisor
  1701  000DBC  0009               	tblrd		*+
  1702  000DBE  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1703  000DC2  0009               	tblrd		*+
  1704  000DC4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1705  000DC8  000A               	tblrd		*-
  1706  000DCA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1707  000DCE  EC31  F010         	call	___lldiv	;wreg free
  1708  000DD2  C001  F06D         	movff	?___lldiv,printf@tmpval
  1709  000DD6  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1710  000DDA  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1711  000DDE  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1712                           
  1713                           ;doprnt.c: 1228: tmpval.vd %= 10;
  1714  000DE2  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1715  000DE6  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1716  000DEA  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1717  000DEE  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1718  000DF2  0E0A               	movlw	10
  1719  000DF4  6E05               	movwf	___llmod@divisor^0,c
  1720  000DF6  0E00               	movlw	0
  1721  000DF8  6E06               	movwf	(___llmod@divisor+1)^0,c
  1722  000DFA  0E00               	movlw	0
  1723  000DFC  6E07               	movwf	(___llmod@divisor+2)^0,c
  1724  000DFE  0E00               	movlw	0
  1725  000E00  6E08               	movwf	(___llmod@divisor+3)^0,c
  1726  000E02  EC1B  F011         	call	___llmod	;wreg free
  1727  000E06  C001  F06D         	movff	?___llmod,printf@tmpval
  1728  000E0A  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1729  000E0E  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1730  000E12  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1731                           
  1732                           ;doprnt.c: 1229: (putch('0' + tmpval.vd) );
  1733  000E16  0100               	movlb	0	; () banked
  1734  000E18  516D               	movf	printf@tmpval& (0+255),w,b
  1735  000E1A  0F30               	addlw	48
  1736  000E1C  EC9B  F012         	call	_putch
  1737  000E20                     l3093:
  1738  000E20  0100               	movlb	0	; () banked
  1739  000E22  0778               	decf	printf@c& (0+255),f,b
  1740  000E24  2978               	incf	printf@c& (0+255),w,b
  1741  000E26  B4D8               	btfsc	status,2,c
  1742  000E28  D008               	goto	l3099
  1743  000E2A  D7B5               	goto	l3087
  1744  000E2C                     l3095:
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;doprnt.c: 1234: (putch('0') );
  1748  000E2C  0E30               	movlw	48
  1749  000E2E  EC9B  F012         	call	_putch
  1750                           
  1751                           ;doprnt.c: 1235: eexp--;
  1752  000E32  0100               	movlb	0	; () banked
  1753  000E34  0771               	decf	printf@eexp& (0+255),f,b
  1754  000E36  A0D8               	btfss	status,0,c
  1755  000E38  0772               	decf	(printf@eexp+1)& (0+255),f,b
  1756  000E3A                     l3099:
  1757                           
  1758                           ; BSR set to: 0
  1759  000E3A  BF72               	btfsc	(printf@eexp+1)& (0+255),7,b
  1760  000E3C  D005               	goto	u3210
  1761  000E3E  5172               	movf	(printf@eexp+1)& (0+255),w,b
  1762  000E40  E1F5               	bnz	l3095
  1763  000E42  0571               	decf	printf@eexp& (0+255),w,b
  1764  000E44  B0D8               	btfsc	status,0,c
  1765  000E46  D7F2               	goto	l3095
  1766  000E48                     u3210:
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;doprnt.c: 1236: };doprnt.c: 1237: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2)
      +                          )
  1770  000E48  BF77               	btfsc	(printf@prec+1)& (0+255),7,b
  1771  000E4A  D009               	goto	l224
  1772  000E4C  5177               	movf	(printf@prec+1)& (0+255),w,b
  1773  000E4E  E104               	bnz	u3220
  1774  000E50  0E09               	movlw	9
  1775  000E52  5D76               	subwf	printf@prec& (0+255),w,b
  1776  000E54  A0D8               	btfss	status,0,c
  1777  000E56  D003               	goto	l224
  1778  000E58                     u3220:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;doprnt.c: 1238: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1782  000E58  0E08               	movlw	8
  1783  000E5A  6F78               	movwf	printf@c& (0+255),b
  1784  000E5C  D002               	goto	l3105
  1785  000E5E                     l224:
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;doprnt.c: 1239: else;doprnt.c: 1240: c = (char)prec;
  1789  000E5E  C076  F078         	movff	printf@prec,printf@c
  1790  000E62                     l3105:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;doprnt.c: 1241: prec -= (int)c;
  1794  000E62  5178               	movf	printf@c& (0+255),w,b
  1795  000E64  5F76               	subwf	printf@prec& (0+255),f,b
  1796  000E66  0E00               	movlw	0
  1797  000E68  5B77               	subwfb	(printf@prec+1)& (0+255),f,b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;doprnt.c: 1245: if(c)
  1801  000E6A  5178               	movf	printf@c& (0+255),w,b
  1802  000E6C  B4D8               	btfsc	status,2,c
  1803  000E6E  D003               	goto	l3111
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 1247: (putch('.') );
  1807  000E70  0E2E               	movlw	46
  1808  000E72  EC9B  F012         	call	_putch
  1809  000E76                     l3111:
  1810                           
  1811                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  1812  000E76  0100               	movlb	0	; () banked
  1813  000E78  5178               	movf	printf@c& (0+255),w,b
  1814  000E7A  EC75  F008         	call	_scale
  1815  000E7E  C02A  F060         	movff	?_scale,_printf$1101
  1816  000E82  C02B  F061         	movff	?_scale+1,_printf$1101+1
  1817  000E86  C02C  F062         	movff	?_scale+2,_printf$1101+2
  1818                           
  1819                           ;doprnt.c: 1253: val = (unsigned long)(fval * scale((signed char)c));
  1820  000E8A  C073  F01E         	movff	printf@fval,___ftmul@f2
  1821  000E8E  C074  F01F         	movff	printf@fval+1,___ftmul@f2+1
  1822  000E92  C075  F020         	movff	printf@fval+2,___ftmul@f2+2
  1823  000E96  C060  F01B         	movff	_printf$1101,___ftmul@f1
  1824  000E9A  C061  F01C         	movff	_printf$1101+1,___ftmul@f1+1
  1825  000E9E  C062  F01D         	movff	_printf$1101+2,___ftmul@f1+2
  1826  000EA2  ECFF  F00D         	call	___ftmul	;wreg free
  1827  000EA6  C01B  F031         	movff	?___ftmul,___fttol@f1
  1828  000EAA  C01C  F032         	movff	?___ftmul+1,___fttol@f1+1
  1829  000EAE  C01D  F033         	movff	?___ftmul+2,___fttol@f1+2
  1830  000EB2  ECEC  F00E         	call	___fttol	;wreg free
  1831  000EB6  C031  F065         	movff	?___fttol,printf@val
  1832  000EBA  C032  F066         	movff	?___fttol+1,printf@val+1
  1833  000EBE  C033  F067         	movff	?___fttol+2,printf@val+2
  1834  000EC2  C034  F068         	movff	?___fttol+3,printf@val+3
  1835                           
  1836                           ;doprnt.c: 1254: while(c--) {
  1837  000EC6  D06C               	goto	l3121
  1838  000EC8                     l3115:
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;doprnt.c: 1255: tmpval.vd = val/dpowers[c];
  1842  000EC8  C065  F001         	movff	printf@val,___lldiv@dividend
  1843  000ECC  C066  F002         	movff	printf@val+1,___lldiv@dividend+1
  1844  000ED0  C067  F003         	movff	printf@val+2,___lldiv@dividend+2
  1845  000ED4  C068  F004         	movff	printf@val+3,___lldiv@dividend+3
  1846  000ED8  5178               	movf	printf@c& (0+255),w,b
  1847  000EDA  0D04               	mullw	4
  1848  000EDC  0E4F               	movlw	low _dpowers
  1849  000EDE  24F3               	addwf	243,w,c
  1850  000EE0  6EF6               	movwf	tblptrl,c
  1851  000EE2  0E08               	movlw	high _dpowers
  1852  000EE4  20F4               	addwfc	244,w,c
  1853  000EE6  6EF7               	movwf	tblptrh,c
  1854  000EE8                     	if	0	;There are less than 3 active tblptr bytes
  1855  000EE8                     	endif
  1856  000EE8  0009               	tblrd		*+
  1857  000EEA  CFF5 F005          	movff	tablat,___lldiv@divisor
  1858  000EEE  0009               	tblrd		*+
  1859  000EF0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1860  000EF4  0009               	tblrd		*+
  1861  000EF6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1862  000EFA  000A               	tblrd		*-
  1863  000EFC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1864  000F00  EC31  F010         	call	___lldiv	;wreg free
  1865  000F04  C001  F06D         	movff	?___lldiv,printf@tmpval
  1866  000F08  C002  F06E         	movff	?___lldiv+1,printf@tmpval+1
  1867  000F0C  C003  F06F         	movff	?___lldiv+2,printf@tmpval+2
  1868  000F10  C004  F070         	movff	?___lldiv+3,printf@tmpval+3
  1869                           
  1870                           ;doprnt.c: 1256: tmpval.vd %= 10;
  1871  000F14  C06D  F001         	movff	printf@tmpval,___llmod@dividend
  1872  000F18  C06E  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1873  000F1C  C06F  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1874  000F20  C070  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1875  000F24  0E0A               	movlw	10
  1876  000F26  6E05               	movwf	___llmod@divisor^0,c
  1877  000F28  0E00               	movlw	0
  1878  000F2A  6E06               	movwf	(___llmod@divisor+1)^0,c
  1879  000F2C  0E00               	movlw	0
  1880  000F2E  6E07               	movwf	(___llmod@divisor+2)^0,c
  1881  000F30  0E00               	movlw	0
  1882  000F32  6E08               	movwf	(___llmod@divisor+3)^0,c
  1883  000F34  EC1B  F011         	call	___llmod	;wreg free
  1884  000F38  C001  F06D         	movff	?___llmod,printf@tmpval
  1885  000F3C  C002  F06E         	movff	?___llmod+1,printf@tmpval+1
  1886  000F40  C003  F06F         	movff	?___llmod+2,printf@tmpval+2
  1887  000F44  C004  F070         	movff	?___llmod+3,printf@tmpval+3
  1888                           
  1889                           ;doprnt.c: 1257: (putch('0' + tmpval.vd) );
  1890  000F48  0100               	movlb	0	; () banked
  1891  000F4A  516D               	movf	printf@tmpval& (0+255),w,b
  1892  000F4C  0F30               	addlw	48
  1893  000F4E  EC9B  F012         	call	_putch
  1894                           
  1895                           ;doprnt.c: 1258: val %= dpowers[c];
  1896  000F52  C065  F001         	movff	printf@val,___llmod@dividend
  1897  000F56  C066  F002         	movff	printf@val+1,___llmod@dividend+1
  1898  000F5A  C067  F003         	movff	printf@val+2,___llmod@dividend+2
  1899  000F5E  C068  F004         	movff	printf@val+3,___llmod@dividend+3
  1900  000F62  0100               	movlb	0	; () banked
  1901  000F64  5178               	movf	printf@c& (0+255),w,b
  1902  000F66  0D04               	mullw	4
  1903  000F68  0E4F               	movlw	low _dpowers
  1904  000F6A  24F3               	addwf	243,w,c
  1905  000F6C  6EF6               	movwf	tblptrl,c
  1906  000F6E  0E08               	movlw	high _dpowers
  1907  000F70  20F4               	addwfc	244,w,c
  1908  000F72  6EF7               	movwf	tblptrh,c
  1909  000F74                     	if	0	;There are less than 3 active tblptr bytes
  1910  000F74                     	endif
  1911  000F74  0009               	tblrd		*+
  1912  000F76  CFF5 F005          	movff	tablat,___llmod@divisor
  1913  000F7A  0009               	tblrd		*+
  1914  000F7C  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1915  000F80  0009               	tblrd		*+
  1916  000F82  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1917  000F86  000A               	tblrd		*-
  1918  000F88  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1919  000F8C  EC1B  F011         	call	___llmod	;wreg free
  1920  000F90  C001  F065         	movff	?___llmod,printf@val
  1921  000F94  C002  F066         	movff	?___llmod+1,printf@val+1
  1922  000F98  C003  F067         	movff	?___llmod+2,printf@val+2
  1923  000F9C  C004  F068         	movff	?___llmod+3,printf@val+3
  1924  000FA0                     l3121:
  1925  000FA0  0100               	movlb	0	; () banked
  1926  000FA2  0778               	decf	printf@c& (0+255),f,b
  1927  000FA4  2978               	incf	printf@c& (0+255),w,b
  1928  000FA6  B4D8               	btfsc	status,2,c
  1929  000FA8  D008               	goto	l3127
  1930  000FAA  D78E               	goto	l3115
  1931  000FAC                     l3123:
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;doprnt.c: 1262: (putch('0') );
  1935  000FAC  0E30               	movlw	48
  1936  000FAE  EC9B  F012         	call	_putch
  1937                           
  1938                           ;doprnt.c: 1263: prec--;
  1939  000FB2  0100               	movlb	0	; () banked
  1940  000FB4  0776               	decf	printf@prec& (0+255),f,b
  1941  000FB6  A0D8               	btfss	status,0,c
  1942  000FB8  0777               	decf	(printf@prec+1)& (0+255),f,b
  1943  000FBA                     l3127:
  1944                           
  1945                           ; BSR set to: 0
  1946  000FBA  5176               	movf	printf@prec& (0+255),w,b
  1947  000FBC  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  1948  000FBE  B4D8               	btfsc	status,2,c
  1949  000FC0  D085               	goto	l3173
  1950  000FC2  D7F4               	goto	l3123
  1951  000FC4                     l3129:
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;doprnt.c: 1272: };doprnt.c: 1316: if(prec == 0 && val == 0)
  1955  000FC4  5176               	movf	printf@prec& (0+255),w,b
  1956  000FC6  1177               	iorwf	(printf@prec+1)& (0+255),w,b
  1957  000FC8  A4D8               	btfss	status,2,c
  1958  000FCA  D008               	goto	l3135
  1959                           
  1960                           ; BSR set to: 0
  1961  000FCC  5165               	movf	printf@val& (0+255),w,b
  1962  000FCE  1166               	iorwf	(printf@val+1)& (0+255),w,b
  1963  000FD0  1167               	iorwf	(printf@val+2)& (0+255),w,b
  1964  000FD2  1168               	iorwf	(printf@val+3)& (0+255),w,b
  1965  000FD4  A4D8               	btfss	status,2,c
  1966  000FD6  D002               	goto	l3135
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;doprnt.c: 1317: prec++;
  1970  000FD8  4B76               	infsnz	printf@prec& (0+255),f,b
  1971  000FDA  2B77               	incf	(printf@prec+1)& (0+255),f,b
  1972  000FDC                     l3135:
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;doprnt.c: 1365: if(c < prec)
  1976  000FDC  5178               	movf	printf@c& (0+255),w,b
  1977  000FDE  6E4B               	movwf	??_printf^0,c
  1978  000FE0  6A4C               	clrf	(??_printf+1)^0,c
  1979  000FE2  5176               	movf	printf@prec& (0+255),w,b
  1980  000FE4  5C4B               	subwf	??_printf^0,w,c
  1981  000FE6  504C               	movf	(??_printf+1)^0,w,c
  1982  000FE8  0A80               	xorlw	128
  1983  000FEA  6E4D               	movwf	(??_printf+2)^0,c
  1984  000FEC  5177               	movf	(printf@prec+1)& (0+255),w,b
  1985  000FEE  0A80               	xorlw	128
  1986  000FF0  584D               	subwfb	(??_printf+2)^0,w,c
  1987  000FF2  B0D8               	btfsc	status,0,c
  1988  000FF4  D003               	goto	l3139
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;doprnt.c: 1366: c = (char)prec;
  1992  000FF6  C076  F078         	movff	printf@prec,printf@c
  1993  000FFA  D010               	goto	l3143
  1994  000FFC                     l3139:
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;doprnt.c: 1367: else if(prec < c)
  1998  000FFC  5178               	movf	printf@c& (0+255),w,b
  1999  000FFE  6E4B               	movwf	??_printf^0,c
  2000  001000  6A4C               	clrf	(??_printf+1)^0,c
  2001  001002  504B               	movf	??_printf^0,w,c
  2002  001004  5D76               	subwf	printf@prec& (0+255),w,b
  2003  001006  5177               	movf	(printf@prec+1)& (0+255),w,b
  2004  001008  0A80               	xorlw	128
  2005  00100A  6E4D               	movwf	(??_printf+2)^0,c
  2006  00100C  504C               	movf	(??_printf+1)^0,w,c
  2007  00100E  0A80               	xorlw	128
  2008  001010  584D               	subwfb	(??_printf+2)^0,w,c
  2009  001012  B0D8               	btfsc	status,0,c
  2010  001014  D003               	goto	l3143
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;doprnt.c: 1368: prec = c;
  2014  001016  C078  F076         	movff	printf@c,printf@prec
  2015  00101A  6B77               	clrf	(printf@prec+1)& (0+255),b
  2016  00101C                     l3143:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;doprnt.c: 1371: if(width && flag & 0x03)
  2020  00101C  516B               	movf	printf@width& (0+255),w,b
  2021  00101E  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2022  001020  B4D8               	btfsc	status,2,c
  2023  001022  D00D               	goto	l3149
  2024                           
  2025                           ; BSR set to: 0
  2026  001024  0E03               	movlw	3
  2027  001026  1569               	andwf	printf@flag& (0+255),w,b
  2028  001028  6E4B               	movwf	??_printf^0,c
  2029  00102A  0E00               	movlw	0
  2030  00102C  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2031  00102E  6E4C               	movwf	(??_printf+1)^0,c
  2032  001030  504B               	movf	??_printf^0,w,c
  2033  001032  104C               	iorwf	(??_printf+1)^0,w,c
  2034  001034  B4D8               	btfsc	status,2,c
  2035  001036  D003               	goto	l3149
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 1372: width--;
  2039  001038  076B               	decf	printf@width& (0+255),f,b
  2040  00103A  A0D8               	btfss	status,0,c
  2041  00103C  076C               	decf	(printf@width+1)& (0+255),f,b
  2042  00103E                     l3149:
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;doprnt.c: 1374: if(flag & 0x4000) {
  2046  00103E  AD6A               	btfss	(printf@flag+1)& (0+255),6,b
  2047  001040  D013               	goto	l3157
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;doprnt.c: 1375: if(width > prec)
  2051  001042  516B               	movf	printf@width& (0+255),w,b
  2052  001044  5D76               	subwf	printf@prec& (0+255),w,b
  2053  001046  5177               	movf	(printf@prec+1)& (0+255),w,b
  2054  001048  0A80               	xorlw	128
  2055  00104A  6E4B               	movwf	??_printf^0,c
  2056  00104C  516C               	movf	(printf@width+1)& (0+255),w,b
  2057  00104E  0A80               	xorlw	128
  2058  001050  584B               	subwfb	??_printf^0,w,c
  2059  001052  B0D8               	btfsc	status,0,c
  2060  001054  D005               	goto	l3155
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;doprnt.c: 1376: width -= prec;
  2064  001056  5176               	movf	printf@prec& (0+255),w,b
  2065  001058  5F6B               	subwf	printf@width& (0+255),f,b
  2066  00105A  5177               	movf	(printf@prec+1)& (0+255),w,b
  2067  00105C  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2068  00105E  D004               	goto	l3157
  2069  001060                     l3155:
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;doprnt.c: 1377: else;doprnt.c: 1378: width = 0;
  2073  001060  0E00               	movlw	0
  2074  001062  6F6C               	movwf	(printf@width+1)& (0+255),b
  2075  001064  0E00               	movlw	0
  2076  001066  6F6B               	movwf	printf@width& (0+255),b
  2077  001068                     l3157:
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;doprnt.c: 1379: };doprnt.c: 1407: if(width > c)
  2081  001068  5178               	movf	printf@c& (0+255),w,b
  2082  00106A  6E4B               	movwf	??_printf^0,c
  2083  00106C  6A4C               	clrf	(??_printf+1)^0,c
  2084  00106E  516B               	movf	printf@width& (0+255),w,b
  2085  001070  5C4B               	subwf	??_printf^0,w,c
  2086  001072  504C               	movf	(??_printf+1)^0,w,c
  2087  001074  0A80               	xorlw	128
  2088  001076  6E4D               	movwf	(??_printf+2)^0,c
  2089  001078  516C               	movf	(printf@width+1)& (0+255),w,b
  2090  00107A  0A80               	xorlw	128
  2091  00107C  584D               	subwfb	(??_printf+2)^0,w,c
  2092  00107E  B0D8               	btfsc	status,0,c
  2093  001080  D005               	goto	l3161
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;doprnt.c: 1408: width -= c;
  2097  001082  5178               	movf	printf@c& (0+255),w,b
  2098  001084  5F6B               	subwf	printf@width& (0+255),f,b
  2099  001086  0E00               	movlw	0
  2100  001088  5B6C               	subwfb	(printf@width+1)& (0+255),f,b
  2101  00108A  D004               	goto	l3163
  2102  00108C                     l3161:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  2106  00108C  0E00               	movlw	0
  2107  00108E  6F6C               	movwf	(printf@width+1)& (0+255),b
  2108  001090  0E00               	movlw	0
  2109  001092  6F6B               	movwf	printf@width& (0+255),b
  2110  001094                     l3163:
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  2114  001094  516B               	movf	printf@width& (0+255),w,b
  2115  001096  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2116  001098  B4D8               	btfsc	status,2,c
  2117  00109A  D00B               	goto	u3360
  2118  00109C                     u3350:
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;doprnt.c: 1456: (putch(' ') );
  2122  00109C  0E20               	movlw	32
  2123  00109E  EC9B  F012         	call	_putch
  2124                           
  2125                           ;doprnt.c: 1457: while(--width);
  2126  0010A2  0100               	movlb	0	; () banked
  2127  0010A4  076B               	decf	printf@width& (0+255),f,b
  2128  0010A6  A0D8               	btfss	status,0,c
  2129  0010A8  076C               	decf	(printf@width+1)& (0+255),f,b
  2130  0010AA  516B               	movf	printf@width& (0+255),w,b
  2131  0010AC  116C               	iorwf	(printf@width+1)& (0+255),w,b
  2132  0010AE  A4D8               	btfss	status,2,c
  2133  0010B0  D7F5               	goto	u3350
  2134  0010B2                     u3360:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;doprnt.c: 1464: if(flag & 0x03)
  2138  0010B2  0E03               	movlw	3
  2139  0010B4  1569               	andwf	printf@flag& (0+255),w,b
  2140  0010B6  6E4B               	movwf	??_printf^0,c
  2141  0010B8  0E00               	movlw	0
  2142  0010BA  156A               	andwf	(printf@flag+1)& (0+255),w,b
  2143  0010BC  6E4C               	movwf	(??_printf+1)^0,c
  2144  0010BE  504B               	movf	??_printf^0,w,c
  2145  0010C0  104C               	iorwf	(??_printf+1)^0,w,c
  2146  0010C2  B4D8               	btfsc	status,2,c
  2147  0010C4  D003               	goto	l3173
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;doprnt.c: 1465: (putch('-') );
  2151  0010C6  0E2D               	movlw	45
  2152  0010C8  EC9B  F012         	call	_putch
  2153  0010CC                     l3173:
  2154  0010CC  C046  FFF6         	movff	printf@f,tblptrl
  2155  0010D0  C047  FFF7         	movff	printf@f+1,tblptrh
  2156  0010D4  4A46               	infsnz	printf@f^0,f,c
  2157  0010D6  2A47               	incf	(printf@f+1)^0,f,c
  2158  0010D8                     	if	0	;tblptru may be non-zero
  2159  0010D8                     	endif
  2160  0010D8                     	if	0	;tblptru may be non-zero
  2161  0010D8                     	endif
  2162  0010D8  0008               	tblrd		*
  2163  0010DA  CFF5 F078          	movff	tablat,printf@c
  2164  0010DE  0100               	movlb	0	; () banked
  2165  0010E0  5178               	movf	printf@c& (0+255),w,b
  2166  0010E2  B4D8               	btfsc	status,2,c
  2167  0010E4  0012               	return	
  2168  0010E6  EF54  F004         	goto	l2939
  2169  0010EA                     __end_of_printf:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _scale *****************
  2173 ;; Defined at:
  2174 ;;		line 433 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;  scl             1    wreg     char 
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  scl             1   47[COMRAM] char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  3   41[COMRAM] char 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2188 ;;      Params:         3       0       0       0       0       0       0       0       0
  2189 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2191 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2192 ;;Total ram usage:        7 bytes
  2193 ;; Hardware stack levels used: 1
  2194 ;; Hardware stack levels required when called: 2
  2195 ;; This function calls:
  2196 ;;		___awdiv
  2197 ;;		___awmod
  2198 ;;		___ftmul
  2199 ;; This function is called by:
  2200 ;;		_printf
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           	psect	text2
  2205  0010EA                     __ptext2:
  2206                           	callstack 0
  2207  0010EA                     _scale:
  2208                           	callstack 27
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;incstack = 0
  2212                           ;scale@scl stored from wreg
  2213  0010EA  6E30               	movwf	scale@scl^0,c
  2214                           
  2215                           ;doprnt.c: 436: if(scl < 0) {
  2216  0010EC  AE30               	btfss	scale@scl^0,7,c
  2217  0010EE  D0D9               	goto	l2523
  2218                           
  2219                           ;doprnt.c: 437: scl = -scl;
  2220  0010F0  6C30               	negf	scale@scl^0,c
  2221                           
  2222                           ;doprnt.c: 438: if(scl>=110)
  2223  0010F2  5030               	movf	scale@scl^0,w,c
  2224  0010F4  0A80               	xorlw	128
  2225  0010F6  0F12               	addlw	-238
  2226  0010F8  A0D8               	btfss	status,0,c
  2227  0010FA  D079               	goto	l2513
  2228                           
  2229                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  2230  0010FC  0E00               	movlw	0
  2231  0010FE  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2232  001100  0E0A               	movlw	10
  2233  001102  6E09               	movwf	___awdiv@divisor^0,c
  2234  001104  0E00               	movlw	0
  2235  001106  6E04               	movwf	(___awmod@divisor+1)^0,c
  2236  001108  0E64               	movlw	100
  2237  00110A  6E03               	movwf	___awmod@divisor^0,c
  2238  00110C  5030               	movf	scale@scl^0,w,c
  2239  00110E  6E01               	movwf	___awmod@dividend^0,c
  2240  001110  6A02               	clrf	(___awmod@dividend+1)^0,c
  2241  001112  BE01               	btfsc	___awmod@dividend^0,7,c
  2242  001114  0602               	decf	(___awmod@dividend+1)^0,f,c
  2243  001116  ECAC  F010         	call	___awmod	;wreg free
  2244  00111A  C001  F007         	movff	?___awmod,___awdiv@dividend
  2245  00111E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2246  001122  ECEF  F00F         	call	___awdiv	;wreg free
  2247  001126  0E09               	movlw	9
  2248  001128  2607               	addwf	?___awdiv^0,f,c
  2249  00112A  5007               	movf	?___awdiv^0,w,c
  2250  00112C  0D03               	mullw	3
  2251  00112E  0E28               	movlw	low __npowers_
  2252  001130  24F3               	addwf	243,w,c
  2253  001132  6EF6               	movwf	tblptrl,c
  2254  001134  0E08               	movlw	high __npowers_
  2255  001136  20F4               	addwfc	244,w,c
  2256  001138  6EF7               	movwf	tblptrh,c
  2257  00113A                     	if	0	;There are less than 3 active tblptr bytes
  2258  00113A                     	endif
  2259  00113A  0009               	tblrd		*+
  2260  00113C  CFF5 F01E          	movff	tablat,___ftmul@f2
  2261  001140  0009               	tblrd		*+
  2262  001142  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2263  001146  000A               	tblrd		*-
  2264  001148  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2265  00114C  0E00               	movlw	0
  2266  00114E  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2267  001150  0E64               	movlw	100
  2268  001152  6E09               	movwf	___awdiv@divisor^0,c
  2269  001154  5030               	movf	scale@scl^0,w,c
  2270  001156  6E07               	movwf	___awdiv@dividend^0,c
  2271  001158  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2272  00115A  BE07               	btfsc	___awdiv@dividend^0,7,c
  2273  00115C  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2274  00115E  ECEF  F00F         	call	___awdiv	;wreg free
  2275  001162  0E12               	movlw	18
  2276  001164  2607               	addwf	?___awdiv^0,f,c
  2277  001166  5007               	movf	?___awdiv^0,w,c
  2278  001168  0D03               	mullw	3
  2279  00116A  0E28               	movlw	low __npowers_
  2280  00116C  24F3               	addwf	243,w,c
  2281  00116E  6EF6               	movwf	tblptrl,c
  2282  001170  0E08               	movlw	high __npowers_
  2283  001172  20F4               	addwfc	244,w,c
  2284  001174  6EF7               	movwf	tblptrh,c
  2285  001176                     	if	0	;There are less than 3 active tblptr bytes
  2286  001176                     	endif
  2287  001176  0009               	tblrd		*+
  2288  001178  CFF5 F01B          	movff	tablat,___ftmul@f1
  2289  00117C  0009               	tblrd		*+
  2290  00117E  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2291  001182  000A               	tblrd		*-
  2292  001184  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2293  001188  ECFF  F00D         	call	___ftmul	;wreg free
  2294  00118C  C01B  F02D         	movff	?___ftmul,_scale$1100
  2295  001190  C01C  F02E         	movff	?___ftmul+1,_scale$1100+1
  2296  001194  C01D  F02F         	movff	?___ftmul+2,_scale$1100+2
  2297                           
  2298                           ;doprnt.c: 439: return _npowers_[(unsigned char)(scl/100+18)] * _npowers_[(unsigned char
      +                          )((scl%100)/10+9)] * _npowers_[(unsigned char)(scl%10)];
  2299  001198  C02D  F01B         	movff	_scale$1100,___ftmul@f1
  2300  00119C  C02E  F01C         	movff	_scale$1100+1,___ftmul@f1+1
  2301  0011A0  C02F  F01D         	movff	_scale$1100+2,___ftmul@f1+2
  2302  0011A4  0E00               	movlw	0
  2303  0011A6  6E04               	movwf	(___awmod@divisor+1)^0,c
  2304  0011A8  0E0A               	movlw	10
  2305  0011AA  6E03               	movwf	___awmod@divisor^0,c
  2306  0011AC  5030               	movf	scale@scl^0,w,c
  2307  0011AE  6E01               	movwf	___awmod@dividend^0,c
  2308  0011B0  6A02               	clrf	(___awmod@dividend+1)^0,c
  2309  0011B2  BE01               	btfsc	___awmod@dividend^0,7,c
  2310  0011B4  0602               	decf	(___awmod@dividend+1)^0,f,c
  2311  0011B6  ECAC  F010         	call	___awmod	;wreg free
  2312  0011BA  5001               	movf	?___awmod^0,w,c
  2313  0011BC  0D03               	mullw	3
  2314  0011BE  0E28               	movlw	low __npowers_
  2315  0011C0  24F3               	addwf	243,w,c
  2316  0011C2  6EF6               	movwf	tblptrl,c
  2317  0011C4  0E08               	movlw	high __npowers_
  2318  0011C6  20F4               	addwfc	244,w,c
  2319  0011C8  6EF7               	movwf	tblptrh,c
  2320  0011CA                     	if	0	;There are less than 3 active tblptr bytes
  2321  0011CA                     	endif
  2322  0011CA  0009               	tblrd		*+
  2323  0011CC  CFF5 F01E          	movff	tablat,___ftmul@f2
  2324  0011D0  0009               	tblrd		*+
  2325  0011D2  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2326  0011D6  000A               	tblrd		*-
  2327  0011D8  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2328  0011DC  ECFF  F00D         	call	___ftmul	;wreg free
  2329  0011E0  C01B  F02A         	movff	?___ftmul,?_scale
  2330  0011E4  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2331  0011E8  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2332  0011EC  0012               	return	
  2333  0011EE                     l2513:
  2334                           
  2335                           ;doprnt.c: 440: else if(scl > 10)
  2336  0011EE  5030               	movf	scale@scl^0,w,c
  2337  0011F0  0A80               	xorlw	128
  2338  0011F2  0F75               	addlw	-139
  2339  0011F4  A0D8               	btfss	status,0,c
  2340  0011F6  D043               	goto	l2519
  2341                           
  2342                           ;doprnt.c: 441: return _npowers_[(unsigned char)(scl/10+9)] * _npowers_[(unsigned char)(
      +                          scl%10)];
  2343  0011F8  0E00               	movlw	0
  2344  0011FA  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2345  0011FC  0E0A               	movlw	10
  2346  0011FE  6E09               	movwf	___awdiv@divisor^0,c
  2347  001200  5030               	movf	scale@scl^0,w,c
  2348  001202  6E07               	movwf	___awdiv@dividend^0,c
  2349  001204  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2350  001206  BE07               	btfsc	___awdiv@dividend^0,7,c
  2351  001208  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2352  00120A  ECEF  F00F         	call	___awdiv	;wreg free
  2353  00120E  0E09               	movlw	9
  2354  001210  2607               	addwf	?___awdiv^0,f,c
  2355  001212  5007               	movf	?___awdiv^0,w,c
  2356  001214  0D03               	mullw	3
  2357  001216  0E28               	movlw	low __npowers_
  2358  001218  24F3               	addwf	243,w,c
  2359  00121A  6EF6               	movwf	tblptrl,c
  2360  00121C  0E08               	movlw	high __npowers_
  2361  00121E  20F4               	addwfc	244,w,c
  2362  001220  6EF7               	movwf	tblptrh,c
  2363  001222                     	if	0	;There are less than 3 active tblptr bytes
  2364  001222                     	endif
  2365  001222  0009               	tblrd		*+
  2366  001224  CFF5 F01B          	movff	tablat,___ftmul@f1
  2367  001228  0009               	tblrd		*+
  2368  00122A  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2369  00122E  000A               	tblrd		*-
  2370  001230  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2371  001234  0E00               	movlw	0
  2372  001236  6E04               	movwf	(___awmod@divisor+1)^0,c
  2373  001238  0E0A               	movlw	10
  2374  00123A  6E03               	movwf	___awmod@divisor^0,c
  2375  00123C  5030               	movf	scale@scl^0,w,c
  2376  00123E  6E01               	movwf	___awmod@dividend^0,c
  2377  001240  6A02               	clrf	(___awmod@dividend+1)^0,c
  2378  001242  BE01               	btfsc	___awmod@dividend^0,7,c
  2379  001244  0602               	decf	(___awmod@dividend+1)^0,f,c
  2380  001246  ECAC  F010         	call	___awmod	;wreg free
  2381  00124A  5001               	movf	?___awmod^0,w,c
  2382  00124C  0D03               	mullw	3
  2383  00124E  0E28               	movlw	low __npowers_
  2384  001250  24F3               	addwf	243,w,c
  2385  001252  6EF6               	movwf	tblptrl,c
  2386  001254  0E08               	movlw	high __npowers_
  2387  001256  20F4               	addwfc	244,w,c
  2388  001258  6EF7               	movwf	tblptrh,c
  2389  00125A                     	if	0	;There are less than 3 active tblptr bytes
  2390  00125A                     	endif
  2391  00125A  0009               	tblrd		*+
  2392  00125C  CFF5 F01E          	movff	tablat,___ftmul@f2
  2393  001260  0009               	tblrd		*+
  2394  001262  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2395  001266  000A               	tblrd		*-
  2396  001268  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2397  00126C  ECFF  F00D         	call	___ftmul	;wreg free
  2398  001270  C01B  F02A         	movff	?___ftmul,?_scale
  2399  001274  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2400  001278  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2401  00127C  0012               	return	
  2402  00127E                     l2519:
  2403                           
  2404                           ;doprnt.c: 442: return _npowers_[(unsigned char)scl];
  2405  00127E  5030               	movf	scale@scl^0,w,c
  2406  001280  0D03               	mullw	3
  2407  001282  0E28               	movlw	low __npowers_
  2408  001284  24F3               	addwf	243,w,c
  2409  001286  6EF6               	movwf	tblptrl,c
  2410  001288  0E08               	movlw	high __npowers_
  2411  00128A  20F4               	addwfc	244,w,c
  2412  00128C  6EF7               	movwf	tblptrh,c
  2413  00128E                     	if	0	;There are less than 3 active tblptr bytes
  2414  00128E                     	endif
  2415  00128E  0009               	tblrd		*+
  2416  001290  CFF5 F02A          	movff	tablat,?_scale
  2417  001294  0009               	tblrd		*+
  2418  001296  CFF5 F02B          	movff	tablat,?_scale+1
  2419  00129A  000A               	tblrd		*-
  2420  00129C  CFF5 F02C          	movff	tablat,?_scale+2
  2421  0012A0  0012               	return	
  2422  0012A2                     l2523:
  2423                           
  2424                           ;doprnt.c: 443: };doprnt.c: 444: if(scl>=110)
  2425  0012A2  5030               	movf	scale@scl^0,w,c
  2426  0012A4  0A80               	xorlw	128
  2427  0012A6  0F12               	addlw	-238
  2428  0012A8  A0D8               	btfss	status,0,c
  2429  0012AA  D079               	goto	l2531
  2430                           
  2431                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  2432  0012AC  0E00               	movlw	0
  2433  0012AE  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2434  0012B0  0E0A               	movlw	10
  2435  0012B2  6E09               	movwf	___awdiv@divisor^0,c
  2436  0012B4  0E00               	movlw	0
  2437  0012B6  6E04               	movwf	(___awmod@divisor+1)^0,c
  2438  0012B8  0E64               	movlw	100
  2439  0012BA  6E03               	movwf	___awmod@divisor^0,c
  2440  0012BC  5030               	movf	scale@scl^0,w,c
  2441  0012BE  6E01               	movwf	___awmod@dividend^0,c
  2442  0012C0  6A02               	clrf	(___awmod@dividend+1)^0,c
  2443  0012C2  BE01               	btfsc	___awmod@dividend^0,7,c
  2444  0012C4  0602               	decf	(___awmod@dividend+1)^0,f,c
  2445  0012C6  ECAC  F010         	call	___awmod	;wreg free
  2446  0012CA  C001  F007         	movff	?___awmod,___awdiv@dividend
  2447  0012CE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2448  0012D2  ECEF  F00F         	call	___awdiv	;wreg free
  2449  0012D6  0E09               	movlw	9
  2450  0012D8  2607               	addwf	?___awdiv^0,f,c
  2451  0012DA  5007               	movf	?___awdiv^0,w,c
  2452  0012DC  0D03               	mullw	3
  2453  0012DE  0E01               	movlw	low __powers_
  2454  0012E0  24F3               	addwf	243,w,c
  2455  0012E2  6EF6               	movwf	tblptrl,c
  2456  0012E4  0E08               	movlw	high __powers_
  2457  0012E6  20F4               	addwfc	244,w,c
  2458  0012E8  6EF7               	movwf	tblptrh,c
  2459  0012EA                     	if	0	;There are less than 3 active tblptr bytes
  2460  0012EA                     	endif
  2461  0012EA  0009               	tblrd		*+
  2462  0012EC  CFF5 F01E          	movff	tablat,___ftmul@f2
  2463  0012F0  0009               	tblrd		*+
  2464  0012F2  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2465  0012F6  000A               	tblrd		*-
  2466  0012F8  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2467  0012FC  0E00               	movlw	0
  2468  0012FE  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2469  001300  0E64               	movlw	100
  2470  001302  6E09               	movwf	___awdiv@divisor^0,c
  2471  001304  5030               	movf	scale@scl^0,w,c
  2472  001306  6E07               	movwf	___awdiv@dividend^0,c
  2473  001308  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2474  00130A  BE07               	btfsc	___awdiv@dividend^0,7,c
  2475  00130C  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2476  00130E  ECEF  F00F         	call	___awdiv	;wreg free
  2477  001312  0E12               	movlw	18
  2478  001314  2607               	addwf	?___awdiv^0,f,c
  2479  001316  5007               	movf	?___awdiv^0,w,c
  2480  001318  0D03               	mullw	3
  2481  00131A  0E01               	movlw	low __powers_
  2482  00131C  24F3               	addwf	243,w,c
  2483  00131E  6EF6               	movwf	tblptrl,c
  2484  001320  0E08               	movlw	high __powers_
  2485  001322  20F4               	addwfc	244,w,c
  2486  001324  6EF7               	movwf	tblptrh,c
  2487  001326                     	if	0	;There are less than 3 active tblptr bytes
  2488  001326                     	endif
  2489  001326  0009               	tblrd		*+
  2490  001328  CFF5 F01B          	movff	tablat,___ftmul@f1
  2491  00132C  0009               	tblrd		*+
  2492  00132E  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2493  001332  000A               	tblrd		*-
  2494  001334  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2495  001338  ECFF  F00D         	call	___ftmul	;wreg free
  2496  00133C  C01B  F02D         	movff	?___ftmul,_scale$1100
  2497  001340  C01C  F02E         	movff	?___ftmul+1,_scale$1100+1
  2498  001344  C01D  F02F         	movff	?___ftmul+2,_scale$1100+2
  2499                           
  2500                           ;doprnt.c: 445: return _powers_[(unsigned char)(scl/100+18)] * _powers_[(unsigned char)(
      +                          (scl%100)/10+9)] * _powers_[(unsigned char)(scl%10)];
  2501  001348  C02D  F01B         	movff	_scale$1100,___ftmul@f1
  2502  00134C  C02E  F01C         	movff	_scale$1100+1,___ftmul@f1+1
  2503  001350  C02F  F01D         	movff	_scale$1100+2,___ftmul@f1+2
  2504  001354  0E00               	movlw	0
  2505  001356  6E04               	movwf	(___awmod@divisor+1)^0,c
  2506  001358  0E0A               	movlw	10
  2507  00135A  6E03               	movwf	___awmod@divisor^0,c
  2508  00135C  5030               	movf	scale@scl^0,w,c
  2509  00135E  6E01               	movwf	___awmod@dividend^0,c
  2510  001360  6A02               	clrf	(___awmod@dividend+1)^0,c
  2511  001362  BE01               	btfsc	___awmod@dividend^0,7,c
  2512  001364  0602               	decf	(___awmod@dividend+1)^0,f,c
  2513  001366  ECAC  F010         	call	___awmod	;wreg free
  2514  00136A  5001               	movf	?___awmod^0,w,c
  2515  00136C  0D03               	mullw	3
  2516  00136E  0E01               	movlw	low __powers_
  2517  001370  24F3               	addwf	243,w,c
  2518  001372  6EF6               	movwf	tblptrl,c
  2519  001374  0E08               	movlw	high __powers_
  2520  001376  20F4               	addwfc	244,w,c
  2521  001378  6EF7               	movwf	tblptrh,c
  2522  00137A                     	if	0	;There are less than 3 active tblptr bytes
  2523  00137A                     	endif
  2524  00137A  0009               	tblrd		*+
  2525  00137C  CFF5 F01E          	movff	tablat,___ftmul@f2
  2526  001380  0009               	tblrd		*+
  2527  001382  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2528  001386  000A               	tblrd		*-
  2529  001388  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2530  00138C  ECFF  F00D         	call	___ftmul	;wreg free
  2531  001390  C01B  F02A         	movff	?___ftmul,?_scale
  2532  001394  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2533  001398  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2534  00139C  0012               	return	
  2535  00139E                     l2531:
  2536                           
  2537                           ;doprnt.c: 446: else if(scl > 10)
  2538  00139E  5030               	movf	scale@scl^0,w,c
  2539  0013A0  0A80               	xorlw	128
  2540  0013A2  0F75               	addlw	-139
  2541  0013A4  A0D8               	btfss	status,0,c
  2542  0013A6  D043               	goto	l2537
  2543                           
  2544                           ;doprnt.c: 447: return _powers_[(unsigned char)(scl/10+9)] * _powers_[(unsigned char)(sc
      +                          l%10)];
  2545  0013A8  0E00               	movlw	0
  2546  0013AA  6E0A               	movwf	(___awdiv@divisor+1)^0,c
  2547  0013AC  0E0A               	movlw	10
  2548  0013AE  6E09               	movwf	___awdiv@divisor^0,c
  2549  0013B0  5030               	movf	scale@scl^0,w,c
  2550  0013B2  6E07               	movwf	___awdiv@dividend^0,c
  2551  0013B4  6A08               	clrf	(___awdiv@dividend+1)^0,c
  2552  0013B6  BE07               	btfsc	___awdiv@dividend^0,7,c
  2553  0013B8  0608               	decf	(___awdiv@dividend+1)^0,f,c
  2554  0013BA  ECEF  F00F         	call	___awdiv	;wreg free
  2555  0013BE  0E09               	movlw	9
  2556  0013C0  2607               	addwf	?___awdiv^0,f,c
  2557  0013C2  5007               	movf	?___awdiv^0,w,c
  2558  0013C4  0D03               	mullw	3
  2559  0013C6  0E01               	movlw	low __powers_
  2560  0013C8  24F3               	addwf	243,w,c
  2561  0013CA  6EF6               	movwf	tblptrl,c
  2562  0013CC  0E08               	movlw	high __powers_
  2563  0013CE  20F4               	addwfc	244,w,c
  2564  0013D0  6EF7               	movwf	tblptrh,c
  2565  0013D2                     	if	0	;There are less than 3 active tblptr bytes
  2566  0013D2                     	endif
  2567  0013D2  0009               	tblrd		*+
  2568  0013D4  CFF5 F01B          	movff	tablat,___ftmul@f1
  2569  0013D8  0009               	tblrd		*+
  2570  0013DA  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  2571  0013DE  000A               	tblrd		*-
  2572  0013E0  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  2573  0013E4  0E00               	movlw	0
  2574  0013E6  6E04               	movwf	(___awmod@divisor+1)^0,c
  2575  0013E8  0E0A               	movlw	10
  2576  0013EA  6E03               	movwf	___awmod@divisor^0,c
  2577  0013EC  5030               	movf	scale@scl^0,w,c
  2578  0013EE  6E01               	movwf	___awmod@dividend^0,c
  2579  0013F0  6A02               	clrf	(___awmod@dividend+1)^0,c
  2580  0013F2  BE01               	btfsc	___awmod@dividend^0,7,c
  2581  0013F4  0602               	decf	(___awmod@dividend+1)^0,f,c
  2582  0013F6  ECAC  F010         	call	___awmod	;wreg free
  2583  0013FA  5001               	movf	?___awmod^0,w,c
  2584  0013FC  0D03               	mullw	3
  2585  0013FE  0E01               	movlw	low __powers_
  2586  001400  24F3               	addwf	243,w,c
  2587  001402  6EF6               	movwf	tblptrl,c
  2588  001404  0E08               	movlw	high __powers_
  2589  001406  20F4               	addwfc	244,w,c
  2590  001408  6EF7               	movwf	tblptrh,c
  2591  00140A                     	if	0	;There are less than 3 active tblptr bytes
  2592  00140A                     	endif
  2593  00140A  0009               	tblrd		*+
  2594  00140C  CFF5 F01E          	movff	tablat,___ftmul@f2
  2595  001410  0009               	tblrd		*+
  2596  001412  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  2597  001416  000A               	tblrd		*-
  2598  001418  CFF5 F020          	movff	tablat,___ftmul@f2+2
  2599  00141C  ECFF  F00D         	call	___ftmul	;wreg free
  2600  001420  C01B  F02A         	movff	?___ftmul,?_scale
  2601  001424  C01C  F02B         	movff	?___ftmul+1,?_scale+1
  2602  001428  C01D  F02C         	movff	?___ftmul+2,?_scale+2
  2603  00142C  0012               	return	
  2604  00142E                     l2537:
  2605                           
  2606                           ;doprnt.c: 448: return _powers_[(unsigned char)scl];
  2607  00142E  5030               	movf	scale@scl^0,w,c
  2608  001430  0D03               	mullw	3
  2609  001432  0E01               	movlw	low __powers_
  2610  001434  24F3               	addwf	243,w,c
  2611  001436  6EF6               	movwf	tblptrl,c
  2612  001438  0E08               	movlw	high __powers_
  2613  00143A  20F4               	addwfc	244,w,c
  2614  00143C  6EF7               	movwf	tblptrh,c
  2615  00143E                     	if	0	;There are less than 3 active tblptr bytes
  2616  00143E                     	endif
  2617  00143E  0009               	tblrd		*+
  2618  001440  CFF5 F02A          	movff	tablat,?_scale
  2619  001444  0009               	tblrd		*+
  2620  001446  CFF5 F02B          	movff	tablat,?_scale+1
  2621  00144A  000A               	tblrd		*-
  2622  00144C  CFF5 F02C          	movff	tablat,?_scale+2
  2623  001450  0012               	return		;funcret
  2624  001452                     __end_of_scale:
  2625                           	callstack 0
  2626                           
  2627 ;; *************** function ___awmod *****************
  2628 ;; Defined at:
  2629 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  dividend        2    0[COMRAM] int 
  2632 ;;  divisor         2    2[COMRAM] int 
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;  sign            1    5[COMRAM] unsigned char 
  2635 ;;  counter         1    4[COMRAM] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  2    0[COMRAM] int 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2645 ;;      Params:         4       0       0       0       0       0       0       0       0
  2646 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2648 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2649 ;;Total ram usage:        6 bytes
  2650 ;; Hardware stack levels used: 1
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		_scale
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           	psect	text3
  2659  002158                     __ptext3:
  2660                           	callstack 0
  2661  002158                     ___awmod:
  2662                           	callstack 28
  2663                           
  2664                           ;incstack = 0
  2665  002158  0E00               	movlw	0
  2666  00215A  6E06               	movwf	___awmod@sign^0,c
  2667  00215C  AE02               	btfss	(___awmod@dividend+1)^0,7,c
  2668  00215E  D006               	goto	l2409
  2669  002160  6C01               	negf	___awmod@dividend^0,c
  2670  002162  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2671  002164  B0D8               	btfsc	status,0,c
  2672  002166  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2673  002168  0E01               	movlw	1
  2674  00216A  6E06               	movwf	___awmod@sign^0,c
  2675  00216C                     l2409:
  2676  00216C  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2677  00216E  D004               	goto	l2413
  2678  002170  6C03               	negf	___awmod@divisor^0,c
  2679  002172  1E04               	comf	(___awmod@divisor+1)^0,f,c
  2680  002174  B0D8               	btfsc	status,0,c
  2681  002176  2A04               	incf	(___awmod@divisor+1)^0,f,c
  2682  002178                     l2413:
  2683  002178  5003               	movf	___awmod@divisor^0,w,c
  2684  00217A  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  2685  00217C  B4D8               	btfsc	status,2,c
  2686  00217E  D018               	goto	l2429
  2687  002180  0E01               	movlw	1
  2688  002182  6E05               	movwf	___awmod@counter^0,c
  2689  002184  D004               	goto	l2419
  2690  002186                     l2417:
  2691  002186  90D8               	bcf	status,0,c
  2692  002188  3603               	rlcf	___awmod@divisor^0,f,c
  2693  00218A  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  2694  00218C  2A05               	incf	___awmod@counter^0,f,c
  2695  00218E                     l2419:
  2696  00218E  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  2697  002190  D7FA               	goto	l2417
  2698  002192                     u2260:
  2699  002192  5003               	movf	___awmod@divisor^0,w,c
  2700  002194  5C01               	subwf	___awmod@dividend^0,w,c
  2701  002196  5004               	movf	(___awmod@divisor+1)^0,w,c
  2702  002198  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  2703  00219A  A0D8               	btfss	status,0,c
  2704  00219C  D004               	goto	l2425
  2705  00219E  5003               	movf	___awmod@divisor^0,w,c
  2706  0021A0  5E01               	subwf	___awmod@dividend^0,f,c
  2707  0021A2  5004               	movf	(___awmod@divisor+1)^0,w,c
  2708  0021A4  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  2709  0021A6                     l2425:
  2710  0021A6  90D8               	bcf	status,0,c
  2711  0021A8  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  2712  0021AA  3203               	rrcf	___awmod@divisor^0,f,c
  2713  0021AC  2E05               	decfsz	___awmod@counter^0,f,c
  2714  0021AE  D7F1               	goto	u2260
  2715  0021B0                     l2429:
  2716  0021B0  5006               	movf	___awmod@sign^0,w,c
  2717  0021B2  B4D8               	btfsc	status,2,c
  2718  0021B4  D004               	goto	l2433
  2719  0021B6  6C01               	negf	___awmod@dividend^0,c
  2720  0021B8  1E02               	comf	(___awmod@dividend+1)^0,f,c
  2721  0021BA  B0D8               	btfsc	status,0,c
  2722  0021BC  2A02               	incf	(___awmod@dividend+1)^0,f,c
  2723  0021BE                     l2433:
  2724  0021BE  C001  F001         	movff	___awmod@dividend,?___awmod
  2725  0021C2  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2726  0021C6  0012               	return		;funcret
  2727  0021C8                     __end_of___awmod:
  2728                           	callstack 0
  2729                           
  2730 ;; *************** function ___awdiv *****************
  2731 ;; Defined at:
  2732 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;  dividend        2    6[COMRAM] int 
  2735 ;;  divisor         2    8[COMRAM] int 
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;  quotient        2   12[COMRAM] int 
  2738 ;;  sign            1   11[COMRAM] unsigned char 
  2739 ;;  counter         1   10[COMRAM] unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  2    6[COMRAM] int 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2749 ;;      Params:         4       0       0       0       0       0       0       0       0
  2750 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2752 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2753 ;;Total ram usage:        8 bytes
  2754 ;; Hardware stack levels used: 1
  2755 ;; This function calls:
  2756 ;;		Nothing
  2757 ;; This function is called by:
  2758 ;;		_scale
  2759 ;;		_printf
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text4
  2764  001FDE                     __ptext4:
  2765                           	callstack 0
  2766  001FDE                     ___awdiv:
  2767                           	callstack 28
  2768                           
  2769                           ;incstack = 0
  2770  001FDE  0E00               	movlw	0
  2771  001FE0  6E0C               	movwf	___awdiv@sign^0,c
  2772  001FE2  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  2773  001FE4  D006               	goto	l2365
  2774  001FE6  6C09               	negf	___awdiv@divisor^0,c
  2775  001FE8  1E0A               	comf	(___awdiv@divisor+1)^0,f,c
  2776  001FEA  B0D8               	btfsc	status,0,c
  2777  001FEC  2A0A               	incf	(___awdiv@divisor+1)^0,f,c
  2778  001FEE  0E01               	movlw	1
  2779  001FF0  6E0C               	movwf	___awdiv@sign^0,c
  2780  001FF2                     l2365:
  2781  001FF2  AE08               	btfss	(___awdiv@dividend+1)^0,7,c
  2782  001FF4  D006               	goto	l2371
  2783  001FF6  6C07               	negf	___awdiv@dividend^0,c
  2784  001FF8  1E08               	comf	(___awdiv@dividend+1)^0,f,c
  2785  001FFA  B0D8               	btfsc	status,0,c
  2786  001FFC  2A08               	incf	(___awdiv@dividend+1)^0,f,c
  2787  001FFE  0E01               	movlw	1
  2788  002000  1A0C               	xorwf	___awdiv@sign^0,f,c
  2789  002002                     l2371:
  2790  002002  0E00               	movlw	0
  2791  002004  6E0E               	movwf	(___awdiv@quotient+1)^0,c
  2792  002006  0E00               	movlw	0
  2793  002008  6E0D               	movwf	___awdiv@quotient^0,c
  2794  00200A  5009               	movf	___awdiv@divisor^0,w,c
  2795  00200C  100A               	iorwf	(___awdiv@divisor+1)^0,w,c
  2796  00200E  B4D8               	btfsc	status,2,c
  2797  002010  D01C               	goto	l2393
  2798  002012  0E01               	movlw	1
  2799  002014  6E0B               	movwf	___awdiv@counter^0,c
  2800  002016  D004               	goto	l2379
  2801  002018                     l2377:
  2802  002018  90D8               	bcf	status,0,c
  2803  00201A  3609               	rlcf	___awdiv@divisor^0,f,c
  2804  00201C  360A               	rlcf	(___awdiv@divisor+1)^0,f,c
  2805  00201E  2A0B               	incf	___awdiv@counter^0,f,c
  2806  002020                     l2379:
  2807  002020  AE0A               	btfss	(___awdiv@divisor+1)^0,7,c
  2808  002022  D7FA               	goto	l2377
  2809  002024                     u2200:
  2810  002024  90D8               	bcf	status,0,c
  2811  002026  360D               	rlcf	___awdiv@quotient^0,f,c
  2812  002028  360E               	rlcf	(___awdiv@quotient+1)^0,f,c
  2813  00202A  5009               	movf	___awdiv@divisor^0,w,c
  2814  00202C  5C07               	subwf	___awdiv@dividend^0,w,c
  2815  00202E  500A               	movf	(___awdiv@divisor+1)^0,w,c
  2816  002030  5808               	subwfb	(___awdiv@dividend+1)^0,w,c
  2817  002032  A0D8               	btfss	status,0,c
  2818  002034  D005               	goto	l2389
  2819  002036  5009               	movf	___awdiv@divisor^0,w,c
  2820  002038  5E07               	subwf	___awdiv@dividend^0,f,c
  2821  00203A  500A               	movf	(___awdiv@divisor+1)^0,w,c
  2822  00203C  5A08               	subwfb	(___awdiv@dividend+1)^0,f,c
  2823  00203E  800D               	bsf	___awdiv@quotient^0,0,c
  2824  002040                     l2389:
  2825  002040  90D8               	bcf	status,0,c
  2826  002042  320A               	rrcf	(___awdiv@divisor+1)^0,f,c
  2827  002044  3209               	rrcf	___awdiv@divisor^0,f,c
  2828  002046  2E0B               	decfsz	___awdiv@counter^0,f,c
  2829  002048  D7ED               	goto	u2200
  2830  00204A                     l2393:
  2831  00204A  500C               	movf	___awdiv@sign^0,w,c
  2832  00204C  B4D8               	btfsc	status,2,c
  2833  00204E  D004               	goto	l2397
  2834  002050  6C0D               	negf	___awdiv@quotient^0,c
  2835  002052  1E0E               	comf	(___awdiv@quotient+1)^0,f,c
  2836  002054  B0D8               	btfsc	status,0,c
  2837  002056  2A0E               	incf	(___awdiv@quotient+1)^0,f,c
  2838  002058                     l2397:
  2839  002058  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  2840  00205C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  2841  002060  0012               	return		;funcret
  2842  002062                     __end_of___awdiv:
  2843                           	callstack 0
  2844                           
  2845 ;; *************** function _putch *****************
  2846 ;; Defined at:
  2847 ;;		line 82 in file "LCD.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  dato            1    wreg     unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  dato            1    2[COMRAM] unsigned char 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, status,2, status,0, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0
  2862 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2864 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2865 ;;Total ram usage:        1 bytes
  2866 ;; Hardware stack levels used: 1
  2867 ;; Hardware stack levels required when called: 2
  2868 ;; This function calls:
  2869 ;;		_LCD_dato
  2870 ;; This function is called by:
  2871 ;;		_printf
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text5
  2876  002536                     __ptext5:
  2877                           	callstack 0
  2878  002536                     _putch:
  2879                           	callstack 27
  2880                           
  2881                           ;incstack = 0
  2882                           ;putch@dato stored from wreg
  2883  002536  6E03               	movwf	putch@dato^0,c
  2884                           
  2885                           ;LCD.c: 83: LCD_dato(dato);
  2886  002538  5003               	movf	putch@dato^0,w,c
  2887  00253A  EC8F  F012         	call	_LCD_dato
  2888  00253E  0012               	return		;funcret
  2889  002540                     __end_of_putch:
  2890                           	callstack 0
  2891                           
  2892 ;; *************** function _isdigit *****************
  2893 ;; Defined at:
  2894 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\isdigit.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  c               1    wreg     unsigned char 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  c               1    2[COMRAM] unsigned char 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;		None               void
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2908 ;;      Params:         0       0       0       0       0       0       0       0       0
  2909 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2910 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2911 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2912 ;;Total ram usage:        3 bytes
  2913 ;; Hardware stack levels used: 1
  2914 ;; This function calls:
  2915 ;;		Nothing
  2916 ;; This function is called by:
  2917 ;;		_printf
  2918 ;; This function uses a non-reentrant model
  2919 ;;
  2920                           
  2921                           	psect	text6
  2922  0024D4                     __ptext6:
  2923                           	callstack 0
  2924  0024D4                     _isdigit:
  2925                           	callstack 29
  2926                           
  2927                           ;incstack = 0
  2928                           ;isdigit@c stored from wreg
  2929  0024D4  6E03               	movwf	isdigit@c^0,c
  2930  0024D6  0E00               	movlw	0
  2931  0024D8  6E02               	movwf	_isdigit$881^0,c
  2932  0024DA  0E3A               	movlw	58
  2933  0024DC  6003               	cpfslt	isdigit@c^0,c
  2934  0024DE  D005               	goto	l2549
  2935  0024E0  0E2F               	movlw	47
  2936  0024E2  6403               	cpfsgt	isdigit@c^0,c
  2937  0024E4  D002               	goto	l2549
  2938  0024E6  0E01               	movlw	1
  2939  0024E8  6E02               	movwf	_isdigit$881^0,c
  2940  0024EA                     l2549:
  2941  0024EA  C002  F001         	movff	_isdigit$881,??_isdigit
  2942  0024EE  3001               	rrcf	??_isdigit^0,w,c
  2943  0024F0  0012               	return		;funcret
  2944  0024F2                     __end_of_isdigit:
  2945                           	callstack 0
  2946                           
  2947 ;; *************** function _fround *****************
  2948 ;; Defined at:
  2949 ;;		line 417 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  prec            1    wreg     unsigned char 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  prec            1   50[COMRAM] unsigned char 
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  3   41[COMRAM] unsigned char 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2963 ;;      Params:         3       0       0       0       0       0       0       0       0
  2964 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2966 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2967 ;;Total ram usage:       10 bytes
  2968 ;; Hardware stack levels used: 1
  2969 ;; Hardware stack levels required when called: 2
  2970 ;; This function calls:
  2971 ;;		___ftmul
  2972 ;;		___lwdiv
  2973 ;;		___lwmod
  2974 ;;		___wmul
  2975 ;; This function is called by:
  2976 ;;		_printf
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text7
  2981  001452                     __ptext7:
  2982                           	callstack 0
  2983  001452                     _fround:
  2984                           	callstack 27
  2985                           
  2986                           ;incstack = 0
  2987                           ;fround@prec stored from wreg
  2988  001452  6E33               	movwf	fround@prec^0,c
  2989                           
  2990                           ;doprnt.c: 421: if(prec>=110)
  2991  001454  0E6D               	movlw	109
  2992  001456  6433               	cpfsgt	fround@prec^0,c
  2993  001458  D0A3               	goto	l2491
  2994                           
  2995                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  2996  00145A  0E00               	movlw	0
  2997  00145C  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  2998  00145E  0E03               	movlw	3
  2999  001460  6E0F               	movwf	___wmul@multiplicand^0,c
  3000  001462  0E00               	movlw	0
  3001  001464  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  3002  001466  0E0A               	movlw	10
  3003  001468  6E08               	movwf	___lwdiv@divisor^0,c
  3004  00146A  0E00               	movlw	0
  3005  00146C  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3006  00146E  0E64               	movlw	100
  3007  001470  6E03               	movwf	___lwmod@divisor^0,c
  3008  001472  C033  F001         	movff	fround@prec,___lwmod@dividend
  3009  001476  6A02               	clrf	(___lwmod@dividend+1)^0,c
  3010  001478  ECF2  F011         	call	___lwmod	;wreg free
  3011  00147C  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  3012  001480  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  3013  001484  EC7C  F011         	call	___lwdiv	;wreg free
  3014  001488  C006  F00D         	movff	?___lwdiv,___wmul@multiplier
  3015  00148C  C007  F00E         	movff	?___lwdiv+1,___wmul@multiplier+1
  3016  001490  EC33  F012         	call	___wmul	;wreg free
  3017  001494  0E1B               	movlw	27
  3018  001496  260D               	addwf	?___wmul^0,f,c
  3019  001498  0E00               	movlw	0
  3020  00149A  220E               	addwfc	(?___wmul+1)^0,f,c
  3021  00149C  0E28               	movlw	low __npowers_
  3022  00149E  240D               	addwf	?___wmul^0,w,c
  3023  0014A0  6EF6               	movwf	tblptrl,c
  3024  0014A2  0E08               	movlw	high __npowers_
  3025  0014A4  200E               	addwfc	(?___wmul+1)^0,w,c
  3026  0014A6  6EF7               	movwf	tblptrh,c
  3027  0014A8                     	if	0	;There are less than 3 active tblptr bytes
  3028  0014A8                     	endif
  3029  0014A8  0009               	tblrd		*+
  3030  0014AA  CFF5 F01E          	movff	tablat,___ftmul@f2
  3031  0014AE  0009               	tblrd		*+
  3032  0014B0  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  3033  0014B4  000A               	tblrd		*-
  3034  0014B6  CFF5 F020          	movff	tablat,___ftmul@f2+2
  3035  0014BA  0E00               	movlw	0
  3036  0014BC  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  3037  0014BE  0E64               	movlw	100
  3038  0014C0  6E08               	movwf	___lwdiv@divisor^0,c
  3039  0014C2  C033  F006         	movff	fround@prec,___lwdiv@dividend
  3040  0014C6  6A07               	clrf	(___lwdiv@dividend+1)^0,c
  3041  0014C8  EC7C  F011         	call	___lwdiv	;wreg free
  3042  0014CC  C006  F00D         	movff	?___lwdiv,___wmul@multiplier
  3043  0014D0  C007  F00E         	movff	?___lwdiv+1,___wmul@multiplier+1
  3044  0014D4  0E00               	movlw	0
  3045  0014D6  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3046  0014D8  0E03               	movlw	3
  3047  0014DA  6E0F               	movwf	___wmul@multiplicand^0,c
  3048  0014DC  EC33  F012         	call	___wmul	;wreg free
  3049  0014E0  0E36               	movlw	54
  3050  0014E2  260D               	addwf	?___wmul^0,f,c
  3051  0014E4  0E00               	movlw	0
  3052  0014E6  220E               	addwfc	(?___wmul+1)^0,f,c
  3053  0014E8  0E28               	movlw	low __npowers_
  3054  0014EA  240D               	addwf	?___wmul^0,w,c
  3055  0014EC  6EF6               	movwf	tblptrl,c
  3056  0014EE  0E08               	movlw	high __npowers_
  3057  0014F0  200E               	addwfc	(?___wmul+1)^0,w,c
  3058  0014F2  6EF7               	movwf	tblptrh,c
  3059  0014F4                     	if	0	;There are less than 3 active tblptr bytes
  3060  0014F4                     	endif
  3061  0014F4  0009               	tblrd		*+
  3062  0014F6  CFF5 F01B          	movff	tablat,___ftmul@f1
  3063  0014FA  0009               	tblrd		*+
  3064  0014FC  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  3065  001500  000A               	tblrd		*-
  3066  001502  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  3067  001506  ECFF  F00D         	call	___ftmul	;wreg free
  3068  00150A  C01B  F030         	movff	?___ftmul,_fround$1098
  3069  00150E  C01C  F031         	movff	?___ftmul+1,_fround$1098+1
  3070  001512  C01D  F032         	movff	?___ftmul+2,_fround$1098+2
  3071                           
  3072                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3073  001516  0E00               	movlw	0
  3074  001518  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3075  00151A  0E03               	movlw	3
  3076  00151C  6E0F               	movwf	___wmul@multiplicand^0,c
  3077  00151E  0E00               	movlw	0
  3078  001520  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3079  001522  0E0A               	movlw	10
  3080  001524  6E03               	movwf	___lwmod@divisor^0,c
  3081  001526  C033  F001         	movff	fround@prec,___lwmod@dividend
  3082  00152A  6A02               	clrf	(___lwmod@dividend+1)^0,c
  3083  00152C  ECF2  F011         	call	___lwmod	;wreg free
  3084  001530  C001  F00D         	movff	?___lwmod,___wmul@multiplier
  3085  001534  C002  F00E         	movff	?___lwmod+1,___wmul@multiplier+1
  3086  001538  EC33  F012         	call	___wmul	;wreg free
  3087  00153C  0E28               	movlw	low __npowers_
  3088  00153E  240D               	addwf	?___wmul^0,w,c
  3089  001540  6EF6               	movwf	tblptrl,c
  3090  001542  0E08               	movlw	high __npowers_
  3091  001544  200E               	addwfc	(?___wmul+1)^0,w,c
  3092  001546  6EF7               	movwf	tblptrh,c
  3093  001548                     	if	0	;There are less than 3 active tblptr bytes
  3094  001548                     	endif
  3095  001548  0009               	tblrd		*+
  3096  00154A  CFF5 F01E          	movff	tablat,___ftmul@f2
  3097  00154E  0009               	tblrd		*+
  3098  001550  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  3099  001554  000A               	tblrd		*-
  3100  001556  CFF5 F020          	movff	tablat,___ftmul@f2+2
  3101  00155A  C030  F01B         	movff	_fround$1098,___ftmul@f1
  3102  00155E  C031  F01C         	movff	_fround$1098+1,___ftmul@f1+1
  3103  001562  C032  F01D         	movff	_fround$1098+2,___ftmul@f1+2
  3104  001566  ECFF  F00D         	call	___ftmul	;wreg free
  3105  00156A  C01B  F02D         	movff	?___ftmul,_fround$1099
  3106  00156E  C01C  F02E         	movff	?___ftmul+1,_fround$1099+1
  3107  001572  C01D  F02F         	movff	?___ftmul+2,_fround$1099+2
  3108                           
  3109                           ;doprnt.c: 422: return 0.5 * _npowers_[prec/100U+18U] * _npowers_[(prec%100U)/10U+9U] * 
      +                          _npowers_[prec%10U];
  3110  001576  C02D  F01B         	movff	_fround$1099,___ftmul@f1
  3111  00157A  C02E  F01C         	movff	_fround$1099+1,___ftmul@f1+1
  3112  00157E  C02F  F01D         	movff	_fround$1099+2,___ftmul@f1+2
  3113  001582  0E00               	movlw	0
  3114  001584  6E1E               	movwf	___ftmul@f2^0,c
  3115  001586  0E00               	movlw	0
  3116  001588  6E1F               	movwf	(___ftmul@f2+1)^0,c
  3117  00158A  0E3F               	movlw	63
  3118  00158C  6E20               	movwf	(___ftmul@f2+2)^0,c
  3119  00158E  ECFF  F00D         	call	___ftmul	;wreg free
  3120  001592  C01B  F02A         	movff	?___ftmul,?_fround
  3121  001596  C01C  F02B         	movff	?___ftmul+1,?_fround+1
  3122  00159A  C01D  F02C         	movff	?___ftmul+2,?_fround+2
  3123  00159E  0012               	return	
  3124  0015A0                     l2491:
  3125                           
  3126                           ;doprnt.c: 423: else if(prec > 10)
  3127  0015A0  0E0A               	movlw	10
  3128  0015A2  6433               	cpfsgt	fround@prec^0,c
  3129  0015A4  D065               	goto	l2499
  3130                           
  3131                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  3132  0015A6  0E00               	movlw	0
  3133  0015A8  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3134  0015AA  0E03               	movlw	3
  3135  0015AC  6E0F               	movwf	___wmul@multiplicand^0,c
  3136  0015AE  0E00               	movlw	0
  3137  0015B0  6E04               	movwf	(___lwmod@divisor+1)^0,c
  3138  0015B2  0E0A               	movlw	10
  3139  0015B4  6E03               	movwf	___lwmod@divisor^0,c
  3140  0015B6  C033  F001         	movff	fround@prec,___lwmod@dividend
  3141  0015BA  6A02               	clrf	(___lwmod@dividend+1)^0,c
  3142  0015BC  ECF2  F011         	call	___lwmod	;wreg free
  3143  0015C0  C001  F00D         	movff	?___lwmod,___wmul@multiplier
  3144  0015C4  C002  F00E         	movff	?___lwmod+1,___wmul@multiplier+1
  3145  0015C8  EC33  F012         	call	___wmul	;wreg free
  3146  0015CC  0E28               	movlw	low __npowers_
  3147  0015CE  240D               	addwf	?___wmul^0,w,c
  3148  0015D0  6EF6               	movwf	tblptrl,c
  3149  0015D2  0E08               	movlw	high __npowers_
  3150  0015D4  200E               	addwfc	(?___wmul+1)^0,w,c
  3151  0015D6  6EF7               	movwf	tblptrh,c
  3152  0015D8                     	if	0	;There are less than 3 active tblptr bytes
  3153  0015D8                     	endif
  3154  0015D8  0009               	tblrd		*+
  3155  0015DA  CFF5 F01E          	movff	tablat,___ftmul@f2
  3156  0015DE  0009               	tblrd		*+
  3157  0015E0  CFF5 F01F          	movff	tablat,___ftmul@f2+1
  3158  0015E4  000A               	tblrd		*-
  3159  0015E6  CFF5 F020          	movff	tablat,___ftmul@f2+2
  3160  0015EA  0E00               	movlw	0
  3161  0015EC  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  3162  0015EE  0E0A               	movlw	10
  3163  0015F0  6E08               	movwf	___lwdiv@divisor^0,c
  3164  0015F2  C033  F006         	movff	fround@prec,___lwdiv@dividend
  3165  0015F6  6A07               	clrf	(___lwdiv@dividend+1)^0,c
  3166  0015F8  EC7C  F011         	call	___lwdiv	;wreg free
  3167  0015FC  C006  F00D         	movff	?___lwdiv,___wmul@multiplier
  3168  001600  C007  F00E         	movff	?___lwdiv+1,___wmul@multiplier+1
  3169  001604  0E00               	movlw	0
  3170  001606  6E10               	movwf	(___wmul@multiplicand+1)^0,c
  3171  001608  0E03               	movlw	3
  3172  00160A  6E0F               	movwf	___wmul@multiplicand^0,c
  3173  00160C  EC33  F012         	call	___wmul	;wreg free
  3174  001610  0E1B               	movlw	27
  3175  001612  260D               	addwf	?___wmul^0,f,c
  3176  001614  0E00               	movlw	0
  3177  001616  220E               	addwfc	(?___wmul+1)^0,f,c
  3178  001618  0E28               	movlw	low __npowers_
  3179  00161A  240D               	addwf	?___wmul^0,w,c
  3180  00161C  6EF6               	movwf	tblptrl,c
  3181  00161E  0E08               	movlw	high __npowers_
  3182  001620  200E               	addwfc	(?___wmul+1)^0,w,c
  3183  001622  6EF7               	movwf	tblptrh,c
  3184  001624                     	if	0	;There are less than 3 active tblptr bytes
  3185  001624                     	endif
  3186  001624  0009               	tblrd		*+
  3187  001626  CFF5 F01B          	movff	tablat,___ftmul@f1
  3188  00162A  0009               	tblrd		*+
  3189  00162C  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  3190  001630  000A               	tblrd		*-
  3191  001632  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  3192  001636  ECFF  F00D         	call	___ftmul	;wreg free
  3193  00163A  C01B  F030         	movff	?___ftmul,_fround$1098
  3194  00163E  C01C  F031         	movff	?___ftmul+1,_fround$1098+1
  3195  001642  C01D  F032         	movff	?___ftmul+2,_fround$1098+2
  3196                           
  3197                           ;doprnt.c: 424: return 0.5 * _npowers_[prec/10U+9U] * _npowers_[prec%10U];
  3198  001646  C030  F01B         	movff	_fround$1098,___ftmul@f1
  3199  00164A  C031  F01C         	movff	_fround$1098+1,___ftmul@f1+1
  3200  00164E  C032  F01D         	movff	_fround$1098+2,___ftmul@f1+2
  3201  001652  0E00               	movlw	0
  3202  001654  6E1E               	movwf	___ftmul@f2^0,c
  3203  001656  0E00               	movlw	0
  3204  001658  6E1F               	movwf	(___ftmul@f2+1)^0,c
  3205  00165A  0E3F               	movlw	63
  3206  00165C  6E20               	movwf	(___ftmul@f2+2)^0,c
  3207  00165E  ECFF  F00D         	call	___ftmul	;wreg free
  3208  001662  C01B  F02A         	movff	?___ftmul,?_fround
  3209  001666  C01C  F02B         	movff	?___ftmul+1,?_fround+1
  3210  00166A  C01D  F02C         	movff	?___ftmul+2,?_fround+2
  3211  00166E  0012               	return	
  3212  001670                     l2499:
  3213                           
  3214                           ;doprnt.c: 425: return 0.5 * _npowers_[prec];
  3215  001670  5033               	movf	fround@prec^0,w,c
  3216  001672  0D03               	mullw	3
  3217  001674  0E28               	movlw	low __npowers_
  3218  001676  24F3               	addwf	243,w,c
  3219  001678  6EF6               	movwf	tblptrl,c
  3220  00167A  0E08               	movlw	high __npowers_
  3221  00167C  20F4               	addwfc	244,w,c
  3222  00167E  6EF7               	movwf	tblptrh,c
  3223  001680                     	if	0	;There are less than 3 active tblptr bytes
  3224  001680                     	endif
  3225  001680  0009               	tblrd		*+
  3226  001682  CFF5 F01B          	movff	tablat,___ftmul@f1
  3227  001686  0009               	tblrd		*+
  3228  001688  CFF5 F01C          	movff	tablat,___ftmul@f1+1
  3229  00168C  000A               	tblrd		*-
  3230  00168E  CFF5 F01D          	movff	tablat,___ftmul@f1+2
  3231  001692  0E00               	movlw	0
  3232  001694  6E1E               	movwf	___ftmul@f2^0,c
  3233  001696  0E00               	movlw	0
  3234  001698  6E1F               	movwf	(___ftmul@f2+1)^0,c
  3235  00169A  0E3F               	movlw	63
  3236  00169C  6E20               	movwf	(___ftmul@f2+2)^0,c
  3237  00169E  ECFF  F00D         	call	___ftmul	;wreg free
  3238  0016A2  C01B  F02A         	movff	?___ftmul,?_fround
  3239  0016A6  C01C  F02B         	movff	?___ftmul+1,?_fround+1
  3240  0016AA  C01D  F02C         	movff	?___ftmul+2,?_fround+2
  3241  0016AE  0012               	return		;funcret
  3242  0016B0                     __end_of_fround:
  3243                           	callstack 0
  3244                           
  3245 ;; *************** function ___wmul *****************
  3246 ;; Defined at:
  3247 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  multiplier      2   12[COMRAM] unsigned int 
  3250 ;;  multiplicand    2   14[COMRAM] unsigned int 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  product         2   16[COMRAM] unsigned int 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;                  2   12[COMRAM] unsigned int 
  3255 ;; Registers used:
  3256 ;;		wreg, status,2, status,0, prodl, prodh
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3262 ;;      Params:         4       0       0       0       0       0       0       0       0
  3263 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3265 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3266 ;;Total ram usage:        6 bytes
  3267 ;; Hardware stack levels used: 1
  3268 ;; This function calls:
  3269 ;;		Nothing
  3270 ;; This function is called by:
  3271 ;;		_fround
  3272 ;;		_printf
  3273 ;; This function uses a non-reentrant model
  3274 ;;
  3275                           
  3276                           	psect	text8
  3277  002466                     __ptext8:
  3278                           	callstack 0
  3279  002466                     ___wmul:
  3280                           	callstack 28
  3281                           
  3282                           ;incstack = 0
  3283  002466  500D               	movf	___wmul@multiplier^0,w,c
  3284  002468  020F               	mulwf	___wmul@multiplicand^0,c
  3285  00246A  CFF3 F011          	movff	prodl,___wmul@product
  3286  00246E  CFF4 F012          	movff	prodh,___wmul@product+1
  3287  002472  500D               	movf	___wmul@multiplier^0,w,c
  3288  002474  0210               	mulwf	(___wmul@multiplicand+1)^0,c
  3289  002476  50F3               	movf	243,w,c
  3290  002478  2612               	addwf	(___wmul@product+1)^0,f,c
  3291  00247A  500E               	movf	(___wmul@multiplier+1)^0,w,c
  3292  00247C  020F               	mulwf	___wmul@multiplicand^0,c
  3293  00247E  50F3               	movf	243,w,c
  3294  002480  2612               	addwf	(___wmul@product+1)^0,f,c
  3295  002482  C011  F00D         	movff	___wmul@product,?___wmul
  3296  002486  C012  F00E         	movff	___wmul@product+1,?___wmul+1
  3297  00248A  0012               	return		;funcret
  3298  00248C                     __end_of___wmul:
  3299                           	callstack 0
  3300                           
  3301 ;; *************** function ___lwmod *****************
  3302 ;; Defined at:
  3303 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  dividend        2    0[COMRAM] unsigned int 
  3306 ;;  divisor         2    2[COMRAM] unsigned int 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;  counter         1    4[COMRAM] unsigned char 
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  2    0[COMRAM] unsigned int 
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3318 ;;      Params:         4       0       0       0       0       0       0       0       0
  3319 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3321 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3322 ;;Total ram usage:        5 bytes
  3323 ;; Hardware stack levels used: 1
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_fround
  3328 ;;		_utoa
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           	psect	text9
  3333  0023E4                     __ptext9:
  3334                           	callstack 0
  3335  0023E4                     ___lwmod:
  3336                           	callstack 28
  3337                           
  3338                           ;incstack = 0
  3339  0023E4  5003               	movf	___lwmod@divisor^0,w,c
  3340  0023E6  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  3341  0023E8  B4D8               	btfsc	status,2,c
  3342  0023EA  D018               	goto	l774
  3343  0023EC  0E01               	movlw	1
  3344  0023EE  6E05               	movwf	___lwmod@counter^0,c
  3345  0023F0  D004               	goto	l2465
  3346  0023F2                     l2463:
  3347  0023F2  90D8               	bcf	status,0,c
  3348  0023F4  3603               	rlcf	___lwmod@divisor^0,f,c
  3349  0023F6  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  3350  0023F8  2A05               	incf	___lwmod@counter^0,f,c
  3351  0023FA                     l2465:
  3352  0023FA  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  3353  0023FC  D7FA               	goto	l2463
  3354  0023FE                     u2330:
  3355  0023FE  5003               	movf	___lwmod@divisor^0,w,c
  3356  002400  5C01               	subwf	___lwmod@dividend^0,w,c
  3357  002402  5004               	movf	(___lwmod@divisor+1)^0,w,c
  3358  002404  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  3359  002406  A0D8               	btfss	status,0,c
  3360  002408  D004               	goto	l2471
  3361  00240A  5003               	movf	___lwmod@divisor^0,w,c
  3362  00240C  5E01               	subwf	___lwmod@dividend^0,f,c
  3363  00240E  5004               	movf	(___lwmod@divisor+1)^0,w,c
  3364  002410  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  3365  002412                     l2471:
  3366  002412  90D8               	bcf	status,0,c
  3367  002414  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  3368  002416  3203               	rrcf	___lwmod@divisor^0,f,c
  3369  002418  2E05               	decfsz	___lwmod@counter^0,f,c
  3370  00241A  D7F1               	goto	u2330
  3371  00241C                     l774:
  3372  00241C  C001  F001         	movff	___lwmod@dividend,?___lwmod
  3373  002420  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  3374  002424  0012               	return		;funcret
  3375  002426                     __end_of___lwmod:
  3376                           	callstack 0
  3377                           
  3378 ;; *************** function ___lwdiv *****************
  3379 ;; Defined at:
  3380 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;  dividend        2    5[COMRAM] unsigned int 
  3383 ;;  divisor         2    7[COMRAM] unsigned int 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  quotient        2    9[COMRAM] unsigned int 
  3386 ;;  counter         1   11[COMRAM] unsigned char 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  2    5[COMRAM] unsigned int 
  3389 ;; Registers used:
  3390 ;;		wreg, status,2, status,0
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3396 ;;      Params:         4       0       0       0       0       0       0       0       0
  3397 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3398 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3399 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3400 ;;Total ram usage:        7 bytes
  3401 ;; Hardware stack levels used: 1
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_fround
  3406 ;;		_utoa
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text10
  3411  0022F8                     __ptext10:
  3412                           	callstack 0
  3413  0022F8                     ___lwdiv:
  3414                           	callstack 28
  3415                           
  3416                           ;incstack = 0
  3417  0022F8  0E00               	movlw	0
  3418  0022FA  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
  3419  0022FC  0E00               	movlw	0
  3420  0022FE  6E0A               	movwf	___lwdiv@quotient^0,c
  3421  002300  5008               	movf	___lwdiv@divisor^0,w,c
  3422  002302  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3423  002304  B4D8               	btfsc	status,2,c
  3424  002306  D01C               	goto	l764
  3425  002308  0E01               	movlw	1
  3426  00230A  6E0C               	movwf	___lwdiv@counter^0,c
  3427  00230C  D004               	goto	l2445
  3428  00230E                     l2443:
  3429  00230E  90D8               	bcf	status,0,c
  3430  002310  3608               	rlcf	___lwdiv@divisor^0,f,c
  3431  002312  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3432  002314  2A0C               	incf	___lwdiv@counter^0,f,c
  3433  002316                     l2445:
  3434  002316  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  3435  002318  D7FA               	goto	l2443
  3436  00231A                     u2300:
  3437  00231A  90D8               	bcf	status,0,c
  3438  00231C  360A               	rlcf	___lwdiv@quotient^0,f,c
  3439  00231E  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3440  002320  5008               	movf	___lwdiv@divisor^0,w,c
  3441  002322  5C06               	subwf	___lwdiv@dividend^0,w,c
  3442  002324  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  3443  002326  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3444  002328  A0D8               	btfss	status,0,c
  3445  00232A  D005               	goto	l2455
  3446  00232C  5008               	movf	___lwdiv@divisor^0,w,c
  3447  00232E  5E06               	subwf	___lwdiv@dividend^0,f,c
  3448  002330  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  3449  002332  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3450  002334  800A               	bsf	___lwdiv@quotient^0,0,c
  3451  002336                     l2455:
  3452  002336  90D8               	bcf	status,0,c
  3453  002338  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3454  00233A  3208               	rrcf	___lwdiv@divisor^0,f,c
  3455  00233C  2E0C               	decfsz	___lwdiv@counter^0,f,c
  3456  00233E  D7ED               	goto	u2300
  3457  002340                     l764:
  3458  002340  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  3459  002344  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3460  002348  0012               	return		;funcret
  3461  00234A                     __end_of___lwdiv:
  3462                           	callstack 0
  3463                           
  3464 ;; *************** function __tdiv_to_l_ *****************
  3465 ;; Defined at:
  3466 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftdivl.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  f1              3    0[COMRAM] float 
  3469 ;;  f2              3    3[COMRAM] float 
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;  quot            4    9[COMRAM] unsigned long 
  3472 ;;  exp1            1   14[COMRAM] unsigned char 
  3473 ;;  cntr            1   13[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  4    0[COMRAM] unsigned long 
  3476 ;; Registers used:
  3477 ;;		wreg, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3483 ;;      Params:         6       0       0       0       0       0       0       0       0
  3484 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3485 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3486 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3487 ;;Total ram usage:       15 bytes
  3488 ;; Hardware stack levels used: 1
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		_printf
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text11
  3497  001A0C                     __ptext11:
  3498                           	callstack 0
  3499  001A0C                     __tdiv_to_l_:
  3500                           	callstack 29
  3501                           
  3502                           ;incstack = 0
  3503  001A0C  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3504  001A10  6A08               	clrf	(??__tdiv_to_l_+1)^0,c
  3505  001A12  6A09               	clrf	(??__tdiv_to_l_+2)^0,c
  3506  001A14  3402               	rlcf	(__tdiv_to_l_@f1+1)^0,w,c
  3507  001A16  3607               	rlcf	??__tdiv_to_l_^0,f,c
  3508  001A18  E301               	bnc	u2441
  3509  001A1A  8008               	bsf	(??__tdiv_to_l_+1)^0,0,c
  3510  001A1C                     u2441:
  3511  001A1C  5007               	movf	??__tdiv_to_l_^0,w,c
  3512  001A1E  6E0F               	movwf	__tdiv_to_l_@exp1^0,c
  3513  001A20  500F               	movf	__tdiv_to_l_@exp1^0,w,c
  3514  001A22  A4D8               	btfss	status,2,c
  3515  001A24  D009               	goto	l2559
  3516  001A26                     u2450:
  3517  001A26  0E00               	movlw	0
  3518  001A28  6E01               	movwf	?__tdiv_to_l_^0,c
  3519  001A2A  0E00               	movlw	0
  3520  001A2C  6E02               	movwf	(?__tdiv_to_l_+1)^0,c
  3521  001A2E  0E00               	movlw	0
  3522  001A30  6E03               	movwf	(?__tdiv_to_l_+2)^0,c
  3523  001A32  0E00               	movlw	0
  3524  001A34  6E04               	movwf	(?__tdiv_to_l_+3)^0,c
  3525  001A36  0012               	return	
  3526  001A38                     l2559:
  3527  001A38  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3528  001A3C  6A08               	clrf	(??__tdiv_to_l_+1)^0,c
  3529  001A3E  6A09               	clrf	(??__tdiv_to_l_+2)^0,c
  3530  001A40  3405               	rlcf	(__tdiv_to_l_@f2+1)^0,w,c
  3531  001A42  3607               	rlcf	??__tdiv_to_l_^0,f,c
  3532  001A44  E301               	bnc	u2461
  3533  001A46  8008               	bsf	(??__tdiv_to_l_+1)^0,0,c
  3534  001A48                     u2461:
  3535  001A48  5007               	movf	??__tdiv_to_l_^0,w,c
  3536  001A4A  6E0E               	movwf	__tdiv_to_l_@cntr^0,c
  3537  001A4C  500E               	movf	__tdiv_to_l_@cntr^0,w,c
  3538  001A4E  B4D8               	btfsc	status,2,c
  3539  001A50  D7EA               	goto	u2450
  3540  001A52  8E02               	bsf	(__tdiv_to_l_@f1+1)^0,7,c
  3541  001A54  0EFF               	movlw	255
  3542  001A56  1601               	andwf	__tdiv_to_l_@f1^0,f,c
  3543  001A58  0EFF               	movlw	255
  3544  001A5A  1602               	andwf	(__tdiv_to_l_@f1+1)^0,f,c
  3545  001A5C  0E00               	movlw	0
  3546  001A5E  1603               	andwf	(__tdiv_to_l_@f1+2)^0,f,c
  3547  001A60  8E05               	bsf	(__tdiv_to_l_@f2+1)^0,7,c
  3548  001A62  0EFF               	movlw	255
  3549  001A64  1604               	andwf	__tdiv_to_l_@f2^0,f,c
  3550  001A66  0EFF               	movlw	255
  3551  001A68  1605               	andwf	(__tdiv_to_l_@f2+1)^0,f,c
  3552  001A6A  0E00               	movlw	0
  3553  001A6C  1606               	andwf	(__tdiv_to_l_@f2+2)^0,f,c
  3554  001A6E  0E00               	movlw	0
  3555  001A70  6E0A               	movwf	__tdiv_to_l_@quot^0,c
  3556  001A72  0E00               	movlw	0
  3557  001A74  6E0B               	movwf	(__tdiv_to_l_@quot+1)^0,c
  3558  001A76  0E00               	movlw	0
  3559  001A78  6E0C               	movwf	(__tdiv_to_l_@quot+2)^0,c
  3560  001A7A  0E00               	movlw	0
  3561  001A7C  6E0D               	movwf	(__tdiv_to_l_@quot+3)^0,c
  3562  001A7E  0E7F               	movlw	127
  3563  001A80  5E0F               	subwf	__tdiv_to_l_@exp1^0,f,c
  3564  001A82  500E               	movf	__tdiv_to_l_@cntr^0,w,c
  3565  001A84  0F98               	addlw	152
  3566  001A86  5E0F               	subwf	__tdiv_to_l_@exp1^0,f,c
  3567  001A88  0E18               	movlw	24
  3568  001A8A  6E0E               	movwf	__tdiv_to_l_@cntr^0,c
  3569  001A8C                     l616:
  3570  001A8C  90D8               	bcf	status,0,c
  3571  001A8E  360A               	rlcf	__tdiv_to_l_@quot^0,f,c
  3572  001A90  360B               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  3573  001A92  360C               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  3574  001A94  360D               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  3575  001A96  5004               	movf	__tdiv_to_l_@f2^0,w,c
  3576  001A98  5C01               	subwf	__tdiv_to_l_@f1^0,w,c
  3577  001A9A  5005               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  3578  001A9C  5802               	subwfb	(__tdiv_to_l_@f1+1)^0,w,c
  3579  001A9E  5006               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  3580  001AA0  5803               	subwfb	(__tdiv_to_l_@f1+2)^0,w,c
  3581  001AA2  A0D8               	btfss	status,0,c
  3582  001AA4  D007               	goto	l617
  3583  001AA6  5004               	movf	__tdiv_to_l_@f2^0,w,c
  3584  001AA8  5E01               	subwf	__tdiv_to_l_@f1^0,f,c
  3585  001AAA  5005               	movf	(__tdiv_to_l_@f2+1)^0,w,c
  3586  001AAC  5A02               	subwfb	(__tdiv_to_l_@f1+1)^0,f,c
  3587  001AAE  5006               	movf	(__tdiv_to_l_@f2+2)^0,w,c
  3588  001AB0  5A03               	subwfb	(__tdiv_to_l_@f1+2)^0,f,c
  3589  001AB2  800A               	bsf	__tdiv_to_l_@quot^0,0,c
  3590  001AB4                     l617:
  3591  001AB4  90D8               	bcf	status,0,c
  3592  001AB6  3601               	rlcf	__tdiv_to_l_@f1^0,f,c
  3593  001AB8  3602               	rlcf	(__tdiv_to_l_@f1+1)^0,f,c
  3594  001ABA  3603               	rlcf	(__tdiv_to_l_@f1+2)^0,f,c
  3595  001ABC  2E0E               	decfsz	__tdiv_to_l_@cntr^0,f,c
  3596  001ABE  D7E6               	goto	l616
  3597  001AC0  AE0F               	btfss	__tdiv_to_l_@exp1^0,7,c
  3598  001AC2  D00D               	goto	l2599
  3599  001AC4  500F               	movf	__tdiv_to_l_@exp1^0,w,c
  3600  001AC6  0A80               	xorlw	128
  3601  001AC8  0F97               	addlw	151
  3602  001ACA  A0D8               	btfss	status,0,c
  3603  001ACC  D7AC               	goto	u2450
  3604  001ACE                     l2595:
  3605  001ACE  90D8               	bcf	status,0,c
  3606  001AD0  320D               	rrcf	(__tdiv_to_l_@quot+3)^0,f,c
  3607  001AD2  320C               	rrcf	(__tdiv_to_l_@quot+2)^0,f,c
  3608  001AD4  320B               	rrcf	(__tdiv_to_l_@quot+1)^0,f,c
  3609  001AD6  320A               	rrcf	__tdiv_to_l_@quot^0,f,c
  3610  001AD8  3E0F               	incfsz	__tdiv_to_l_@exp1^0,f,c
  3611  001ADA  D7F9               	goto	l2595
  3612  001ADC  D00D               	goto	u2520
  3613  001ADE                     l2599:
  3614  001ADE  0E17               	movlw	23
  3615  001AE0  640F               	cpfsgt	__tdiv_to_l_@exp1^0,c
  3616  001AE2  D007               	goto	l2607
  3617  001AE4  D7A0               	goto	u2450
  3618  001AE6                     l2605:
  3619  001AE6  90D8               	bcf	status,0,c
  3620  001AE8  360A               	rlcf	__tdiv_to_l_@quot^0,f,c
  3621  001AEA  360B               	rlcf	(__tdiv_to_l_@quot+1)^0,f,c
  3622  001AEC  360C               	rlcf	(__tdiv_to_l_@quot+2)^0,f,c
  3623  001AEE  360D               	rlcf	(__tdiv_to_l_@quot+3)^0,f,c
  3624  001AF0  060F               	decf	__tdiv_to_l_@exp1^0,f,c
  3625  001AF2                     l2607:
  3626  001AF2  500F               	movf	__tdiv_to_l_@exp1^0,w,c
  3627  001AF4  A4D8               	btfss	status,2,c
  3628  001AF6  D7F7               	goto	l2605
  3629  001AF8                     u2520:
  3630  001AF8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3631  001AFC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3632  001B00  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3633  001B04  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3634  001B08  0012               	return		;funcret
  3635  001B0A                     __end_of__tdiv_to_l_:
  3636                           	callstack 0
  3637                           
  3638 ;; *************** function __div_to_l_ *****************
  3639 ;; Defined at:
  3640 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fldivl.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  f1              3    0[COMRAM] unsigned long 
  3643 ;;  f2              3    3[COMRAM] unsigned long 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  quot            4    6[COMRAM] unsigned long 
  3646 ;;  exp1            1   11[COMRAM] unsigned char 
  3647 ;;  cntr            1   10[COMRAM] unsigned char 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  4    0[COMRAM] unsigned long 
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, status,0
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3657 ;;      Params:         6       0       0       0       0       0       0       0       0
  3658 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3660 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3661 ;;Total ram usage:       12 bytes
  3662 ;; Hardware stack levels used: 1
  3663 ;; This function calls:
  3664 ;;		Nothing
  3665 ;; This function is called by:
  3666 ;;		_printf
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text12
  3671  001B0A                     __ptext12:
  3672                           	callstack 0
  3673  001B0A                     __div_to_l_:
  3674                           	callstack 29
  3675                           
  3676                           ;incstack = 0
  3677  001B0A  3403               	rlcf	(__div_to_l_@f1+2)^0,w,c
  3678  001B0C  3404               	rlcf	(__div_to_l_@f1+3)^0,w,c
  3679  001B0E  6E0C               	movwf	__div_to_l_@exp1^0,c
  3680  001B10  500C               	movf	__div_to_l_@exp1^0,w,c
  3681  001B12  A4D8               	btfss	status,2,c
  3682  001B14  D009               	goto	l2615
  3683  001B16                     u2530:
  3684  001B16  0E00               	movlw	0
  3685  001B18  6E01               	movwf	?__div_to_l_^0,c
  3686  001B1A  0E00               	movlw	0
  3687  001B1C  6E02               	movwf	(?__div_to_l_+1)^0,c
  3688  001B1E  0E00               	movlw	0
  3689  001B20  6E03               	movwf	(?__div_to_l_+2)^0,c
  3690  001B22  0E00               	movlw	0
  3691  001B24  6E04               	movwf	(?__div_to_l_+3)^0,c
  3692  001B26  0012               	return	
  3693  001B28                     l2615:
  3694  001B28  3406               	rlcf	(__div_to_l_@f2+2)^0,w,c
  3695  001B2A  3407               	rlcf	(__div_to_l_@f2+3)^0,w,c
  3696  001B2C  6E0B               	movwf	__div_to_l_@cntr^0,c
  3697  001B2E  500B               	movf	__div_to_l_@cntr^0,w,c
  3698  001B30  B4D8               	btfsc	status,2,c
  3699  001B32  D7F1               	goto	u2530
  3700  001B34  8E03               	bsf	(__div_to_l_@f1+2)^0,7,c
  3701  001B36  0EFF               	movlw	255
  3702  001B38  1601               	andwf	__div_to_l_@f1^0,f,c
  3703  001B3A  0EFF               	movlw	255
  3704  001B3C  1602               	andwf	(__div_to_l_@f1+1)^0,f,c
  3705  001B3E  0EFF               	movlw	255
  3706  001B40  1603               	andwf	(__div_to_l_@f1+2)^0,f,c
  3707  001B42  0E00               	movlw	0
  3708  001B44  1604               	andwf	(__div_to_l_@f1+3)^0,f,c
  3709  001B46  8E06               	bsf	(__div_to_l_@f2+2)^0,7,c
  3710  001B48  0EFF               	movlw	255
  3711  001B4A  1604               	andwf	__div_to_l_@f2^0,f,c
  3712  001B4C  0EFF               	movlw	255
  3713  001B4E  1605               	andwf	(__div_to_l_@f2+1)^0,f,c
  3714  001B50  0EFF               	movlw	255
  3715  001B52  1606               	andwf	(__div_to_l_@f2+2)^0,f,c
  3716  001B54  0E00               	movlw	0
  3717  001B56  1607               	andwf	(__div_to_l_@f2+3)^0,f,c
  3718  001B58  0E00               	movlw	0
  3719  001B5A  6E07               	movwf	__div_to_l_@quot^0,c
  3720  001B5C  0E00               	movlw	0
  3721  001B5E  6E08               	movwf	(__div_to_l_@quot+1)^0,c
  3722  001B60  0E00               	movlw	0
  3723  001B62  6E09               	movwf	(__div_to_l_@quot+2)^0,c
  3724  001B64  0E00               	movlw	0
  3725  001B66  6E0A               	movwf	(__div_to_l_@quot+3)^0,c
  3726  001B68  0E7F               	movlw	127
  3727  001B6A  5E0C               	subwf	__div_to_l_@exp1^0,f,c
  3728  001B6C  500B               	movf	__div_to_l_@cntr^0,w,c
  3729  001B6E  0FA0               	addlw	160
  3730  001B70  5E0C               	subwf	__div_to_l_@exp1^0,f,c
  3731  001B72  0E20               	movlw	32
  3732  001B74  6E0B               	movwf	__div_to_l_@cntr^0,c
  3733  001B76                     l2635:
  3734  001B76  90D8               	bcf	status,0,c
  3735  001B78  3607               	rlcf	__div_to_l_@quot^0,f,c
  3736  001B7A  3608               	rlcf	(__div_to_l_@quot+1)^0,f,c
  3737  001B7C  3609               	rlcf	(__div_to_l_@quot+2)^0,f,c
  3738  001B7E  360A               	rlcf	(__div_to_l_@quot+3)^0,f,c
  3739  001B80  5004               	movf	__div_to_l_@f2^0,w,c
  3740  001B82  5C01               	subwf	__div_to_l_@f1^0,w,c
  3741  001B84  5005               	movf	(__div_to_l_@f2+1)^0,w,c
  3742  001B86  5802               	subwfb	(__div_to_l_@f1+1)^0,w,c
  3743  001B88  5006               	movf	(__div_to_l_@f2+2)^0,w,c
  3744  001B8A  5803               	subwfb	(__div_to_l_@f1+2)^0,w,c
  3745  001B8C  5007               	movf	(__div_to_l_@f2+3)^0,w,c
  3746  001B8E  5804               	subwfb	(__div_to_l_@f1+3)^0,w,c
  3747  001B90  A0D8               	btfss	status,0,c
  3748  001B92  D009               	goto	l2643
  3749  001B94  5004               	movf	__div_to_l_@f2^0,w,c
  3750  001B96  5E01               	subwf	__div_to_l_@f1^0,f,c
  3751  001B98  5005               	movf	(__div_to_l_@f2+1)^0,w,c
  3752  001B9A  5A02               	subwfb	(__div_to_l_@f1+1)^0,f,c
  3753  001B9C  5006               	movf	(__div_to_l_@f2+2)^0,w,c
  3754  001B9E  5A03               	subwfb	(__div_to_l_@f1+2)^0,f,c
  3755  001BA0  5007               	movf	(__div_to_l_@f2+3)^0,w,c
  3756  001BA2  5A04               	subwfb	(__div_to_l_@f1+3)^0,f,c
  3757  001BA4  8007               	bsf	__div_to_l_@quot^0,0,c
  3758  001BA6                     l2643:
  3759  001BA6  90D8               	bcf	status,0,c
  3760  001BA8  3601               	rlcf	__div_to_l_@f1^0,f,c
  3761  001BAA  3602               	rlcf	(__div_to_l_@f1+1)^0,f,c
  3762  001BAC  3603               	rlcf	(__div_to_l_@f1+2)^0,f,c
  3763  001BAE  3604               	rlcf	(__div_to_l_@f1+3)^0,f,c
  3764  001BB0  2E0B               	decfsz	__div_to_l_@cntr^0,f,c
  3765  001BB2  D7E1               	goto	l2635
  3766  001BB4  AE0C               	btfss	__div_to_l_@exp1^0,7,c
  3767  001BB6  D00D               	goto	l2659
  3768  001BB8  500C               	movf	__div_to_l_@exp1^0,w,c
  3769  001BBA  0A80               	xorlw	128
  3770  001BBC  0F9F               	addlw	159
  3771  001BBE  A0D8               	btfss	status,0,c
  3772  001BC0  D7AA               	goto	u2530
  3773  001BC2                     l2655:
  3774  001BC2  90D8               	bcf	status,0,c
  3775  001BC4  320A               	rrcf	(__div_to_l_@quot+3)^0,f,c
  3776  001BC6  3209               	rrcf	(__div_to_l_@quot+2)^0,f,c
  3777  001BC8  3208               	rrcf	(__div_to_l_@quot+1)^0,f,c
  3778  001BCA  3207               	rrcf	__div_to_l_@quot^0,f,c
  3779  001BCC  3E0C               	incfsz	__div_to_l_@exp1^0,f,c
  3780  001BCE  D7F9               	goto	l2655
  3781  001BD0  D00D               	goto	u2590
  3782  001BD2                     l2659:
  3783  001BD2  0E1F               	movlw	31
  3784  001BD4  640C               	cpfsgt	__div_to_l_@exp1^0,c
  3785  001BD6  D007               	goto	l2667
  3786  001BD8  D79E               	goto	u2530
  3787  001BDA                     l2665:
  3788  001BDA  90D8               	bcf	status,0,c
  3789  001BDC  3607               	rlcf	__div_to_l_@quot^0,f,c
  3790  001BDE  3608               	rlcf	(__div_to_l_@quot+1)^0,f,c
  3791  001BE0  3609               	rlcf	(__div_to_l_@quot+2)^0,f,c
  3792  001BE2  360A               	rlcf	(__div_to_l_@quot+3)^0,f,c
  3793  001BE4  060C               	decf	__div_to_l_@exp1^0,f,c
  3794  001BE6                     l2667:
  3795  001BE6  500C               	movf	__div_to_l_@exp1^0,w,c
  3796  001BE8  A4D8               	btfss	status,2,c
  3797  001BEA  D7F7               	goto	l2665
  3798  001BEC                     u2590:
  3799  001BEC  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3800  001BF0  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3801  001BF4  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3802  001BF8  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3803  001BFC  0012               	return		;funcret
  3804  001BFE                     __end_of__div_to_l_:
  3805                           	callstack 0
  3806                           
  3807 ;; *************** function ___lltoft *****************
  3808 ;; Defined at:
  3809 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lltoft.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;  c               4    8[COMRAM] unsigned long 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  exp             1   16[COMRAM] unsigned char 
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  3    8[COMRAM] float 
  3816 ;; Registers used:
  3817 ;;		wreg, status,2, status,0, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3823 ;;      Params:         4       0       0       0       0       0       0       0       0
  3824 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3825 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3826 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3827 ;;Total ram usage:        9 bytes
  3828 ;; Hardware stack levels used: 1
  3829 ;; Hardware stack levels required when called: 1
  3830 ;; This function calls:
  3831 ;;		___ftpack
  3832 ;; This function is called by:
  3833 ;;		_printf
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text13
  3838  00229C                     __ptext13:
  3839                           	callstack 0
  3840  00229C                     ___lltoft:
  3841                           	callstack 28
  3842                           
  3843                           ;incstack = 0
  3844  00229C  0E8E               	movlw	142
  3845  00229E  6E11               	movwf	___lltoft@exp^0,c
  3846  0022A0  D006               	goto	l2833
  3847  0022A2                     l2831:
  3848  0022A2  90D8               	bcf	status,0,c
  3849  0022A4  320C               	rrcf	(___lltoft@c+3)^0,f,c
  3850  0022A6  320B               	rrcf	(___lltoft@c+2)^0,f,c
  3851  0022A8  320A               	rrcf	(___lltoft@c+1)^0,f,c
  3852  0022AA  3209               	rrcf	___lltoft@c^0,f,c
  3853  0022AC  2A11               	incf	___lltoft@exp^0,f,c
  3854  0022AE                     l2833:
  3855  0022AE  0E00               	movlw	0
  3856  0022B0  1409               	andwf	___lltoft@c^0,w,c
  3857  0022B2  6E0D               	movwf	??___lltoft^0,c
  3858  0022B4  0E00               	movlw	0
  3859  0022B6  140A               	andwf	(___lltoft@c+1)^0,w,c
  3860  0022B8  6E0E               	movwf	(??___lltoft+1)^0,c
  3861  0022BA  0E00               	movlw	0
  3862  0022BC  140B               	andwf	(___lltoft@c+2)^0,w,c
  3863  0022BE  6E0F               	movwf	(??___lltoft+2)^0,c
  3864  0022C0  0EFF               	movlw	255
  3865  0022C2  140C               	andwf	(___lltoft@c+3)^0,w,c
  3866  0022C4  6E10               	movwf	(??___lltoft+3)^0,c
  3867  0022C6  500D               	movf	??___lltoft^0,w,c
  3868  0022C8  100E               	iorwf	(??___lltoft+1)^0,w,c
  3869  0022CA  100F               	iorwf	(??___lltoft+2)^0,w,c
  3870  0022CC  1010               	iorwf	(??___lltoft+3)^0,w,c
  3871  0022CE  A4D8               	btfss	status,2,c
  3872  0022D0  D7E8               	goto	l2831
  3873  0022D2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3874  0022D6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3875  0022DA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3876  0022DE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3877  0022E2  0E00               	movlw	0
  3878  0022E4  6E05               	movwf	___ftpack@sign^0,c
  3879  0022E6  EC55  F00F         	call	___ftpack	;wreg free
  3880  0022EA  C001  F009         	movff	?___ftpack,?___lltoft
  3881  0022EE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3882  0022F2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3883  0022F6  0012               	return		;funcret
  3884  0022F8                     __end_of___lltoft:
  3885                           	callstack 0
  3886                           
  3887 ;; *************** function ___llmod *****************
  3888 ;; Defined at:
  3889 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\llmod.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  dividend        4    0[COMRAM] unsigned long 
  3892 ;;  divisor         4    4[COMRAM] unsigned long 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;  counter         1    8[COMRAM] unsigned char 
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  4    0[COMRAM] unsigned long 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3904 ;;      Params:         8       0       0       0       0       0       0       0       0
  3905 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3907 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3908 ;;Total ram usage:        9 bytes
  3909 ;; Hardware stack levels used: 1
  3910 ;; This function calls:
  3911 ;;		Nothing
  3912 ;; This function is called by:
  3913 ;;		_printf
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text14
  3918  002236                     __ptext14:
  3919                           	callstack 0
  3920  002236                     ___llmod:
  3921                           	callstack 29
  3922                           
  3923                           ;incstack = 0
  3924  002236  5005               	movf	___llmod@divisor^0,w,c
  3925  002238  1006               	iorwf	(___llmod@divisor+1)^0,w,c
  3926  00223A  1007               	iorwf	(___llmod@divisor+2)^0,w,c
  3927  00223C  1008               	iorwf	(___llmod@divisor+3)^0,w,c
  3928  00223E  B4D8               	btfsc	status,2,c
  3929  002240  D024               	goto	l693
  3930  002242  0E01               	movlw	1
  3931  002244  6E09               	movwf	___llmod@counter^0,c
  3932  002246  D006               	goto	l2819
  3933  002248                     l2817:
  3934  002248  90D8               	bcf	status,0,c
  3935  00224A  3605               	rlcf	___llmod@divisor^0,f,c
  3936  00224C  3606               	rlcf	(___llmod@divisor+1)^0,f,c
  3937  00224E  3607               	rlcf	(___llmod@divisor+2)^0,f,c
  3938  002250  3608               	rlcf	(___llmod@divisor+3)^0,f,c
  3939  002252  2A09               	incf	___llmod@counter^0,f,c
  3940  002254                     l2819:
  3941  002254  AE08               	btfss	(___llmod@divisor+3)^0,7,c
  3942  002256  D7F8               	goto	l2817
  3943  002258                     u2820:
  3944  002258  5005               	movf	___llmod@divisor^0,w,c
  3945  00225A  5C01               	subwf	___llmod@dividend^0,w,c
  3946  00225C  5006               	movf	(___llmod@divisor+1)^0,w,c
  3947  00225E  5802               	subwfb	(___llmod@dividend+1)^0,w,c
  3948  002260  5007               	movf	(___llmod@divisor+2)^0,w,c
  3949  002262  5803               	subwfb	(___llmod@dividend+2)^0,w,c
  3950  002264  5008               	movf	(___llmod@divisor+3)^0,w,c
  3951  002266  5804               	subwfb	(___llmod@dividend+3)^0,w,c
  3952  002268  A0D8               	btfss	status,0,c
  3953  00226A  D008               	goto	l2825
  3954  00226C  5005               	movf	___llmod@divisor^0,w,c
  3955  00226E  5E01               	subwf	___llmod@dividend^0,f,c
  3956  002270  5006               	movf	(___llmod@divisor+1)^0,w,c
  3957  002272  5A02               	subwfb	(___llmod@dividend+1)^0,f,c
  3958  002274  5007               	movf	(___llmod@divisor+2)^0,w,c
  3959  002276  5A03               	subwfb	(___llmod@dividend+2)^0,f,c
  3960  002278  5008               	movf	(___llmod@divisor+3)^0,w,c
  3961  00227A  5A04               	subwfb	(___llmod@dividend+3)^0,f,c
  3962  00227C                     l2825:
  3963  00227C  90D8               	bcf	status,0,c
  3964  00227E  3208               	rrcf	(___llmod@divisor+3)^0,f,c
  3965  002280  3207               	rrcf	(___llmod@divisor+2)^0,f,c
  3966  002282  3206               	rrcf	(___llmod@divisor+1)^0,f,c
  3967  002284  3205               	rrcf	___llmod@divisor^0,f,c
  3968  002286  2E09               	decfsz	___llmod@counter^0,f,c
  3969  002288  D7E7               	goto	u2820
  3970  00228A                     l693:
  3971  00228A  C001  F001         	movff	___llmod@dividend,?___llmod
  3972  00228E  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3973  002292  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3974  002296  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3975  00229A  0012               	return		;funcret
  3976  00229C                     __end_of___llmod:
  3977                           	callstack 0
  3978                           
  3979 ;; *************** function ___lldiv *****************
  3980 ;; Defined at:
  3981 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\__lldiv.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  dividend        4    0[COMRAM] unsigned long 
  3984 ;;  divisor         4    4[COMRAM] unsigned long 
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  quotient        4    8[COMRAM] unsigned long 
  3987 ;;  counter         1   12[COMRAM] unsigned char 
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  4    0[COMRAM] unsigned long 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2, status,0
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3997 ;;      Params:         8       0       0       0       0       0       0       0       0
  3998 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3999 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4000 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4001 ;;Total ram usage:       13 bytes
  4002 ;; Hardware stack levels used: 1
  4003 ;; This function calls:
  4004 ;;		Nothing
  4005 ;; This function is called by:
  4006 ;;		_printf
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           	psect	text15
  4011  002062                     __ptext15:
  4012                           	callstack 0
  4013  002062                     ___lldiv:
  4014                           	callstack 29
  4015                           
  4016                           ;incstack = 0
  4017  002062  0E00               	movlw	0
  4018  002064  6E09               	movwf	___lldiv@quotient^0,c
  4019  002066  0E00               	movlw	0
  4020  002068  6E0A               	movwf	(___lldiv@quotient+1)^0,c
  4021  00206A  0E00               	movlw	0
  4022  00206C  6E0B               	movwf	(___lldiv@quotient+2)^0,c
  4023  00206E  0E00               	movlw	0
  4024  002070  6E0C               	movwf	(___lldiv@quotient+3)^0,c
  4025  002072  5005               	movf	___lldiv@divisor^0,w,c
  4026  002074  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
  4027  002076  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
  4028  002078  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
  4029  00207A  B4D8               	btfsc	status,2,c
  4030  00207C  D02A               	goto	l278
  4031  00207E  0E01               	movlw	1
  4032  002080  6E0D               	movwf	___lldiv@counter^0,c
  4033  002082  D006               	goto	l2677
  4034  002084                     l2675:
  4035  002084  90D8               	bcf	status,0,c
  4036  002086  3605               	rlcf	___lldiv@divisor^0,f,c
  4037  002088  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
  4038  00208A  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
  4039  00208C  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
  4040  00208E  2A0D               	incf	___lldiv@counter^0,f,c
  4041  002090                     l2677:
  4042  002090  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
  4043  002092  D7F8               	goto	l2675
  4044  002094                     u2610:
  4045  002094  90D8               	bcf	status,0,c
  4046  002096  3609               	rlcf	___lldiv@quotient^0,f,c
  4047  002098  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
  4048  00209A  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
  4049  00209C  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
  4050  00209E  5005               	movf	___lldiv@divisor^0,w,c
  4051  0020A0  5C01               	subwf	___lldiv@dividend^0,w,c
  4052  0020A2  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4053  0020A4  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
  4054  0020A6  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4055  0020A8  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
  4056  0020AA  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4057  0020AC  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
  4058  0020AE  A0D8               	btfss	status,0,c
  4059  0020B0  D009               	goto	l2687
  4060  0020B2  5005               	movf	___lldiv@divisor^0,w,c
  4061  0020B4  5E01               	subwf	___lldiv@dividend^0,f,c
  4062  0020B6  5006               	movf	(___lldiv@divisor+1)^0,w,c
  4063  0020B8  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
  4064  0020BA  5007               	movf	(___lldiv@divisor+2)^0,w,c
  4065  0020BC  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
  4066  0020BE  5008               	movf	(___lldiv@divisor+3)^0,w,c
  4067  0020C0  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
  4068  0020C2  8009               	bsf	___lldiv@quotient^0,0,c
  4069  0020C4                     l2687:
  4070  0020C4  90D8               	bcf	status,0,c
  4071  0020C6  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
  4072  0020C8  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
  4073  0020CA  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
  4074  0020CC  3205               	rrcf	___lldiv@divisor^0,f,c
  4075  0020CE  2E0D               	decfsz	___lldiv@counter^0,f,c
  4076  0020D0  D7E1               	goto	u2610
  4077  0020D2                     l278:
  4078  0020D2  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4079  0020D6  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4080  0020DA  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4081  0020DE  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4082  0020E2  0012               	return		;funcret
  4083  0020E4                     __end_of___lldiv:
  4084                           	callstack 0
  4085                           
  4086 ;; *************** function ___fttol *****************
  4087 ;; Defined at:
  4088 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fttol.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  f1              3   48[COMRAM] float 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  lval            4   58[COMRAM] unsigned long 
  4093 ;;  exp1            1   62[COMRAM] unsigned char 
  4094 ;;  sign1           1   57[COMRAM] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  4   48[COMRAM] long 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2, status,0
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4104 ;;      Params:         4       0       0       0       0       0       0       0       0
  4105 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4106 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4107 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4108 ;;Total ram usage:       15 bytes
  4109 ;; Hardware stack levels used: 1
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_printf
  4114 ;; This function uses a non-reentrant model
  4115 ;;
  4116                           
  4117                           	psect	text16
  4118  001DD8                     __ptext16:
  4119                           	callstack 0
  4120  001DD8                     ___fttol:
  4121                           	callstack 29
  4122                           
  4123                           ;incstack = 0
  4124  001DD8  C033  F035         	movff	___fttol@f1+2,??___fttol
  4125  001DDC  6A36               	clrf	(??___fttol+1)^0,c
  4126  001DDE  6A37               	clrf	(??___fttol+2)^0,c
  4127  001DE0  3432               	rlcf	(___fttol@f1+1)^0,w,c
  4128  001DE2  3635               	rlcf	??___fttol^0,f,c
  4129  001DE4  E301               	bnc	u2731
  4130  001DE6  8036               	bsf	(??___fttol+1)^0,0,c
  4131  001DE8                     u2731:
  4132  001DE8  5035               	movf	??___fttol^0,w,c
  4133  001DEA  6E3F               	movwf	___fttol@exp1^0,c
  4134  001DEC  503F               	movf	___fttol@exp1^0,w,c
  4135  001DEE  A4D8               	btfss	status,2,c
  4136  001DF0  D009               	goto	l2773
  4137  001DF2                     u2740:
  4138  001DF2  0E00               	movlw	0
  4139  001DF4  6E31               	movwf	?___fttol^0,c
  4140  001DF6  0E00               	movlw	0
  4141  001DF8  6E32               	movwf	(?___fttol+1)^0,c
  4142  001DFA  0E00               	movlw	0
  4143  001DFC  6E33               	movwf	(?___fttol+2)^0,c
  4144  001DFE  0E00               	movlw	0
  4145  001E00  6E34               	movwf	(?___fttol+3)^0,c
  4146  001E02  0012               	return	
  4147  001E04                     l2773:
  4148  001E04  0E17               	movlw	23
  4149  001E06  6E35               	movwf	??___fttol^0,c
  4150  001E08  C031  F036         	movff	___fttol@f1,??___fttol+1
  4151  001E0C  C032  F037         	movff	___fttol@f1+1,??___fttol+2
  4152  001E10  C033  F038         	movff	___fttol@f1+2,??___fttol+3
  4153  001E14  2835               	incf	??___fttol^0,w,c
  4154  001E16  6E39               	movwf	(??___fttol+4)^0,c
  4155  001E18  D004               	goto	u2750
  4156  001E1A                     u2755:
  4157  001E1A  90D8               	bcf	status,0,c
  4158  001E1C  3238               	rrcf	(??___fttol+3)^0,f,c
  4159  001E1E  3237               	rrcf	(??___fttol+2)^0,f,c
  4160  001E20  3236               	rrcf	(??___fttol+1)^0,f,c
  4161  001E22                     u2750:
  4162  001E22  2E39               	decfsz	(??___fttol+4)^0,f,c
  4163  001E24  D7FA               	goto	u2755
  4164  001E26  5036               	movf	(??___fttol+1)^0,w,c
  4165  001E28  6E3A               	movwf	___fttol@sign1^0,c
  4166  001E2A  8E32               	bsf	(___fttol@f1+1)^0,7,c
  4167  001E2C  0EFF               	movlw	255
  4168  001E2E  1631               	andwf	___fttol@f1^0,f,c
  4169  001E30  0EFF               	movlw	255
  4170  001E32  1632               	andwf	(___fttol@f1+1)^0,f,c
  4171  001E34  0E00               	movlw	0
  4172  001E36  1633               	andwf	(___fttol@f1+2)^0,f,c
  4173  001E38  5031               	movf	___fttol@f1^0,w,c
  4174  001E3A  6E3B               	movwf	___fttol@lval^0,c
  4175  001E3C  5032               	movf	(___fttol@f1+1)^0,w,c
  4176  001E3E  6E3C               	movwf	(___fttol@lval+1)^0,c
  4177  001E40  5033               	movf	(___fttol@f1+2)^0,w,c
  4178  001E42  6E3D               	movwf	(___fttol@lval+2)^0,c
  4179  001E44  6A3E               	clrf	(___fttol@lval+3)^0,c
  4180  001E46  0E8E               	movlw	142
  4181  001E48  5E3F               	subwf	___fttol@exp1^0,f,c
  4182  001E4A  AE3F               	btfss	___fttol@exp1^0,7,c
  4183  001E4C  D00D               	goto	l2795
  4184  001E4E  503F               	movf	___fttol@exp1^0,w,c
  4185  001E50  0A80               	xorlw	128
  4186  001E52  0F8F               	addlw	143
  4187  001E54  A0D8               	btfss	status,0,c
  4188  001E56  D7CD               	goto	u2740
  4189  001E58                     l2791:
  4190  001E58  90D8               	bcf	status,0,c
  4191  001E5A  323E               	rrcf	(___fttol@lval+3)^0,f,c
  4192  001E5C  323D               	rrcf	(___fttol@lval+2)^0,f,c
  4193  001E5E  323C               	rrcf	(___fttol@lval+1)^0,f,c
  4194  001E60  323B               	rrcf	___fttol@lval^0,f,c
  4195  001E62  3E3F               	incfsz	___fttol@exp1^0,f,c
  4196  001E64  D7F9               	goto	l2791
  4197  001E66  D00D               	goto	u2790
  4198  001E68                     l2795:
  4199  001E68  0E17               	movlw	23
  4200  001E6A  643F               	cpfsgt	___fttol@exp1^0,c
  4201  001E6C  D007               	goto	l2803
  4202  001E6E  D7C1               	goto	u2740
  4203  001E70                     l2801:
  4204  001E70  90D8               	bcf	status,0,c
  4205  001E72  363B               	rlcf	___fttol@lval^0,f,c
  4206  001E74  363C               	rlcf	(___fttol@lval+1)^0,f,c
  4207  001E76  363D               	rlcf	(___fttol@lval+2)^0,f,c
  4208  001E78  363E               	rlcf	(___fttol@lval+3)^0,f,c
  4209  001E7A  063F               	decf	___fttol@exp1^0,f,c
  4210  001E7C                     l2803:
  4211  001E7C  503F               	movf	___fttol@exp1^0,w,c
  4212  001E7E  A4D8               	btfss	status,2,c
  4213  001E80  D7F7               	goto	l2801
  4214  001E82                     u2790:
  4215  001E82  503A               	movf	___fttol@sign1^0,w,c
  4216  001E84  B4D8               	btfsc	status,2,c
  4217  001E86  D008               	goto	l2809
  4218  001E88  1E3E               	comf	(___fttol@lval+3)^0,f,c
  4219  001E8A  1E3D               	comf	(___fttol@lval+2)^0,f,c
  4220  001E8C  1E3C               	comf	(___fttol@lval+1)^0,f,c
  4221  001E8E  6C3B               	negf	___fttol@lval^0,c
  4222  001E90  0E00               	movlw	0
  4223  001E92  223C               	addwfc	(___fttol@lval+1)^0,f,c
  4224  001E94  223D               	addwfc	(___fttol@lval+2)^0,f,c
  4225  001E96  223E               	addwfc	(___fttol@lval+3)^0,f,c
  4226  001E98                     l2809:
  4227  001E98  C03B  F031         	movff	___fttol@lval,?___fttol
  4228  001E9C  C03C  F032         	movff	___fttol@lval+1,?___fttol+1
  4229  001EA0  C03D  F033         	movff	___fttol@lval+2,?___fttol+2
  4230  001EA4  C03E  F034         	movff	___fttol@lval+3,?___fttol+3
  4231  001EA8  0012               	return		;funcret
  4232  001EAA                     __end_of___fttol:
  4233                           	callstack 0
  4234                           
  4235 ;; *************** function ___ftsub *****************
  4236 ;; Defined at:
  4237 ;;		line 19 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftsub.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  f1              3   63[COMRAM] float 
  4240 ;;  f2              3   66[COMRAM] float 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;		None
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  3   63[COMRAM] float 
  4245 ;; Registers used:
  4246 ;;		wreg, status,2, status,0, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4252 ;;      Params:         6       0       0       0       0       0       0       0       0
  4253 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4255 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4256 ;;Total ram usage:        6 bytes
  4257 ;; Hardware stack levels used: 1
  4258 ;; Hardware stack levels required when called: 2
  4259 ;; This function calls:
  4260 ;;		___ftadd
  4261 ;; This function is called by:
  4262 ;;		_printf
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text17
  4267  002426                     __ptext17:
  4268                           	callstack 0
  4269  002426                     ___ftsub:
  4270                           	callstack 27
  4271                           
  4272                           ;incstack = 0
  4273  002426  5043               	movf	___ftsub@f2^0,w,c
  4274  002428  1044               	iorwf	(___ftsub@f2+1)^0,w,c
  4275  00242A  1045               	iorwf	(___ftsub@f2+2)^0,w,c
  4276  00242C  B4D8               	btfsc	status,2,c
  4277  00242E  D006               	goto	l2741
  4278  002430  0E00               	movlw	0
  4279  002432  1A43               	xorwf	___ftsub@f2^0,f,c
  4280  002434  0E00               	movlw	0
  4281  002436  1A44               	xorwf	(___ftsub@f2+1)^0,f,c
  4282  002438  0E80               	movlw	128
  4283  00243A  1A45               	xorwf	(___ftsub@f2+2)^0,f,c
  4284  00243C                     l2741:
  4285  00243C  C040  F034         	movff	___ftsub@f1,___ftadd@f1
  4286  002440  C041  F035         	movff	___ftsub@f1+1,___ftadd@f1+1
  4287  002444  C042  F036         	movff	___ftsub@f1+2,___ftadd@f1+2
  4288  002448  C043  F037         	movff	___ftsub@f2,___ftadd@f2
  4289  00244C  C044  F038         	movff	___ftsub@f2+1,___ftadd@f2+1
  4290  002450  C045  F039         	movff	___ftsub@f2+2,___ftadd@f2+2
  4291  002454  EC32  F00C         	call	___ftadd	;wreg free
  4292  002458  C034  F040         	movff	?___ftadd,?___ftsub
  4293  00245C  C035  F041         	movff	?___ftadd+1,?___ftsub+1
  4294  002460  C036  F042         	movff	?___ftadd+2,?___ftsub+2
  4295  002464  0012               	return		;funcret
  4296  002466                     __end_of___ftsub:
  4297                           	callstack 0
  4298                           
  4299 ;; *************** function ___ftadd *****************
  4300 ;; Defined at:
  4301 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftadd.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  f1              3   51[COMRAM] float 
  4304 ;;  f2              3   54[COMRAM] float 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;  exp1            1   62[COMRAM] unsigned char 
  4307 ;;  exp2            1   61[COMRAM] unsigned char 
  4308 ;;  sign            1   60[COMRAM] unsigned char 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  3   51[COMRAM] float 
  4311 ;; Registers used:
  4312 ;;		wreg, status,2, status,0, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4318 ;;      Params:         6       0       0       0       0       0       0       0       0
  4319 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4320 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4321 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4322 ;;Total ram usage:       12 bytes
  4323 ;; Hardware stack levels used: 1
  4324 ;; Hardware stack levels required when called: 1
  4325 ;; This function calls:
  4326 ;;		___ftpack
  4327 ;; This function is called by:
  4328 ;;		_printf
  4329 ;;		___ftsub
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           	psect	text18
  4334  001864                     __ptext18:
  4335                           	callstack 0
  4336  001864                     ___ftadd:
  4337                           	callstack 27
  4338                           
  4339                           ;incstack = 0
  4340  001864  C036  F03A         	movff	___ftadd@f1+2,??___ftadd
  4341  001868  6A3B               	clrf	(??___ftadd+1)^0,c
  4342  00186A  6A3C               	clrf	(??___ftadd+2)^0,c
  4343  00186C  3435               	rlcf	(___ftadd@f1+1)^0,w,c
  4344  00186E  363A               	rlcf	??___ftadd^0,f,c
  4345  001870  E301               	bnc	u1901
  4346  001872  803B               	bsf	(??___ftadd+1)^0,0,c
  4347  001874                     u1901:
  4348  001874  503A               	movf	??___ftadd^0,w,c
  4349  001876  6E3F               	movwf	___ftadd@exp1^0,c
  4350  001878  C039  F03A         	movff	___ftadd@f2+2,??___ftadd
  4351  00187C  6A3B               	clrf	(??___ftadd+1)^0,c
  4352  00187E  6A3C               	clrf	(??___ftadd+2)^0,c
  4353  001880  3438               	rlcf	(___ftadd@f2+1)^0,w,c
  4354  001882  363A               	rlcf	??___ftadd^0,f,c
  4355  001884  E301               	bnc	u1911
  4356  001886  803B               	bsf	(??___ftadd+1)^0,0,c
  4357  001888                     u1911:
  4358  001888  503A               	movf	??___ftadd^0,w,c
  4359  00188A  6E3E               	movwf	___ftadd@exp2^0,c
  4360  00188C  503F               	movf	___ftadd@exp1^0,w,c
  4361  00188E  B4D8               	btfsc	status,2,c
  4362  001890  D00A               	goto	u1940
  4363  001892  503E               	movf	___ftadd@exp2^0,w,c
  4364  001894  5C3F               	subwf	___ftadd@exp1^0,w,c
  4365  001896  B0D8               	btfsc	status,0,c
  4366  001898  D00D               	goto	l2247
  4367  00189A  503F               	movf	___ftadd@exp1^0,w,c
  4368  00189C  5C3E               	subwf	___ftadd@exp2^0,w,c
  4369  00189E  6E3A               	movwf	??___ftadd^0,c
  4370  0018A0  0E18               	movlw	24
  4371  0018A2  643A               	cpfsgt	??___ftadd^0,c
  4372  0018A4  D007               	goto	l2247
  4373  0018A6                     u1940:
  4374  0018A6  C037  F034         	movff	___ftadd@f2,?___ftadd
  4375  0018AA  C038  F035         	movff	___ftadd@f2+1,?___ftadd+1
  4376  0018AE  C039  F036         	movff	___ftadd@f2+2,?___ftadd+2
  4377  0018B2  0012               	return	
  4378  0018B4                     l2247:
  4379  0018B4  503E               	movf	___ftadd@exp2^0,w,c
  4380  0018B6  B4D8               	btfsc	status,2,c
  4381  0018B8  D00A               	goto	u1970
  4382  0018BA  503F               	movf	___ftadd@exp1^0,w,c
  4383  0018BC  5C3E               	subwf	___ftadd@exp2^0,w,c
  4384  0018BE  B0D8               	btfsc	status,0,c
  4385  0018C0  D00D               	goto	l2253
  4386  0018C2  503E               	movf	___ftadd@exp2^0,w,c
  4387  0018C4  5C3F               	subwf	___ftadd@exp1^0,w,c
  4388  0018C6  6E3A               	movwf	??___ftadd^0,c
  4389  0018C8  0E18               	movlw	24
  4390  0018CA  643A               	cpfsgt	??___ftadd^0,c
  4391  0018CC  D007               	goto	l2253
  4392  0018CE                     u1970:
  4393  0018CE  C034  F034         	movff	___ftadd@f1,?___ftadd
  4394  0018D2  C035  F035         	movff	___ftadd@f1+1,?___ftadd+1
  4395  0018D6  C036  F036         	movff	___ftadd@f1+2,?___ftadd+2
  4396  0018DA  0012               	return	
  4397  0018DC                     l2253:
  4398  0018DC  0E06               	movlw	6
  4399  0018DE  6E3D               	movwf	___ftadd@sign^0,c
  4400  0018E0  BE36               	btfsc	(___ftadd@f1+2)^0,7,c
  4401  0018E2  8E3D               	bsf	___ftadd@sign^0,7,c
  4402  0018E4  BE39               	btfsc	(___ftadd@f2+2)^0,7,c
  4403  0018E6  8C3D               	bsf	___ftadd@sign^0,6,c
  4404  0018E8  8E35               	bsf	(___ftadd@f1+1)^0,7,c
  4405  0018EA  0EFF               	movlw	255
  4406  0018EC  1634               	andwf	___ftadd@f1^0,f,c
  4407  0018EE  0EFF               	movlw	255
  4408  0018F0  1635               	andwf	(___ftadd@f1+1)^0,f,c
  4409  0018F2  0E00               	movlw	0
  4410  0018F4  1636               	andwf	(___ftadd@f1+2)^0,f,c
  4411  0018F6  8E38               	bsf	(___ftadd@f2+1)^0,7,c
  4412  0018F8  0EFF               	movlw	255
  4413  0018FA  1637               	andwf	___ftadd@f2^0,f,c
  4414  0018FC  0EFF               	movlw	255
  4415  0018FE  1638               	andwf	(___ftadd@f2+1)^0,f,c
  4416  001900  0E00               	movlw	0
  4417  001902  1639               	andwf	(___ftadd@f2+2)^0,f,c
  4418  001904  503E               	movf	___ftadd@exp2^0,w,c
  4419  001906  5C3F               	subwf	___ftadd@exp1^0,w,c
  4420  001908  B0D8               	btfsc	status,0,c
  4421  00190A  D01B               	goto	l2279
  4422  00190C                     u2000:
  4423  00190C  90D8               	bcf	status,0,c
  4424  00190E  3637               	rlcf	___ftadd@f2^0,f,c
  4425  001910  3638               	rlcf	(___ftadd@f2+1)^0,f,c
  4426  001912  3639               	rlcf	(___ftadd@f2+2)^0,f,c
  4427  001914  063E               	decf	___ftadd@exp2^0,f,c
  4428  001916  503F               	movf	___ftadd@exp1^0,w,c
  4429  001918  183E               	xorwf	___ftadd@exp2^0,w,c
  4430  00191A  B4D8               	btfsc	status,2,c
  4431  00191C  D00D               	goto	l2277
  4432  00191E  063D               	decf	___ftadd@sign^0,f,c
  4433  001920  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  4434  001924  0E07               	movlw	7
  4435  001926  163A               	andwf	??___ftadd^0,f,c
  4436  001928  B4D8               	btfsc	status,2,c
  4437  00192A  D006               	goto	l2277
  4438  00192C  D7EF               	goto	u2000
  4439  00192E                     l2275:
  4440  00192E  90D8               	bcf	status,0,c
  4441  001930  3236               	rrcf	(___ftadd@f1+2)^0,f,c
  4442  001932  3235               	rrcf	(___ftadd@f1+1)^0,f,c
  4443  001934  3234               	rrcf	___ftadd@f1^0,f,c
  4444  001936  2A3F               	incf	___ftadd@exp1^0,f,c
  4445  001938                     l2277:
  4446  001938  503E               	movf	___ftadd@exp2^0,w,c
  4447  00193A  183F               	xorwf	___ftadd@exp1^0,w,c
  4448  00193C  B4D8               	btfsc	status,2,c
  4449  00193E  D01F               	goto	u2070
  4450  001940  D7F6               	goto	l2275
  4451  001942                     l2279:
  4452  001942  503F               	movf	___ftadd@exp1^0,w,c
  4453  001944  5C3E               	subwf	___ftadd@exp2^0,w,c
  4454  001946  B0D8               	btfsc	status,0,c
  4455  001948  D01A               	goto	u2070
  4456  00194A                     u2040:
  4457  00194A  90D8               	bcf	status,0,c
  4458  00194C  3634               	rlcf	___ftadd@f1^0,f,c
  4459  00194E  3635               	rlcf	(___ftadd@f1+1)^0,f,c
  4460  001950  3636               	rlcf	(___ftadd@f1+2)^0,f,c
  4461  001952  063F               	decf	___ftadd@exp1^0,f,c
  4462  001954  503F               	movf	___ftadd@exp1^0,w,c
  4463  001956  183E               	xorwf	___ftadd@exp2^0,w,c
  4464  001958  B4D8               	btfsc	status,2,c
  4465  00195A  D00D               	goto	l2289
  4466  00195C  063D               	decf	___ftadd@sign^0,f,c
  4467  00195E  C03D  F03A         	movff	___ftadd@sign,??___ftadd
  4468  001962  0E07               	movlw	7
  4469  001964  163A               	andwf	??___ftadd^0,f,c
  4470  001966  B4D8               	btfsc	status,2,c
  4471  001968  D006               	goto	l2289
  4472  00196A  D7EF               	goto	u2040
  4473  00196C                     l2287:
  4474  00196C  90D8               	bcf	status,0,c
  4475  00196E  3239               	rrcf	(___ftadd@f2+2)^0,f,c
  4476  001970  3238               	rrcf	(___ftadd@f2+1)^0,f,c
  4477  001972  3237               	rrcf	___ftadd@f2^0,f,c
  4478  001974  2A3E               	incf	___ftadd@exp2^0,f,c
  4479  001976                     l2289:
  4480  001976  503E               	movf	___ftadd@exp2^0,w,c
  4481  001978  183F               	xorwf	___ftadd@exp1^0,w,c
  4482  00197A  A4D8               	btfss	status,2,c
  4483  00197C  D7F7               	goto	l2287
  4484  00197E                     u2070:
  4485  00197E  AE3D               	btfss	___ftadd@sign^0,7,c
  4486  001980  D00C               	goto	l598
  4487  001982  0EFF               	movlw	255
  4488  001984  1A34               	xorwf	___ftadd@f1^0,f,c
  4489  001986  0EFF               	movlw	255
  4490  001988  1A35               	xorwf	(___ftadd@f1+1)^0,f,c
  4491  00198A  0EFF               	movlw	255
  4492  00198C  1A36               	xorwf	(___ftadd@f1+2)^0,f,c
  4493  00198E  0E01               	movlw	1
  4494  001990  2634               	addwf	___ftadd@f1^0,f,c
  4495  001992  0E00               	movlw	0
  4496  001994  2235               	addwfc	(___ftadd@f1+1)^0,f,c
  4497  001996  0E00               	movlw	0
  4498  001998  2236               	addwfc	(___ftadd@f1+2)^0,f,c
  4499  00199A                     l598:
  4500  00199A  AC3D               	btfss	___ftadd@sign^0,6,c
  4501  00199C  D00C               	goto	l2295
  4502  00199E  0EFF               	movlw	255
  4503  0019A0  1A37               	xorwf	___ftadd@f2^0,f,c
  4504  0019A2  0EFF               	movlw	255
  4505  0019A4  1A38               	xorwf	(___ftadd@f2+1)^0,f,c
  4506  0019A6  0EFF               	movlw	255
  4507  0019A8  1A39               	xorwf	(___ftadd@f2+2)^0,f,c
  4508  0019AA  0E01               	movlw	1
  4509  0019AC  2637               	addwf	___ftadd@f2^0,f,c
  4510  0019AE  0E00               	movlw	0
  4511  0019B0  2238               	addwfc	(___ftadd@f2+1)^0,f,c
  4512  0019B2  0E00               	movlw	0
  4513  0019B4  2239               	addwfc	(___ftadd@f2+2)^0,f,c
  4514  0019B6                     l2295:
  4515  0019B6  0E00               	movlw	0
  4516  0019B8  6E3D               	movwf	___ftadd@sign^0,c
  4517  0019BA  5034               	movf	___ftadd@f1^0,w,c
  4518  0019BC  2637               	addwf	___ftadd@f2^0,f,c
  4519  0019BE  5035               	movf	(___ftadd@f1+1)^0,w,c
  4520  0019C0  2238               	addwfc	(___ftadd@f2+1)^0,f,c
  4521  0019C2  5036               	movf	(___ftadd@f1+2)^0,w,c
  4522  0019C4  2239               	addwfc	(___ftadd@f2+2)^0,f,c
  4523  0019C6  AE39               	btfss	(___ftadd@f2+2)^0,7,c
  4524  0019C8  D00E               	goto	l2305
  4525  0019CA  0EFF               	movlw	255
  4526  0019CC  1A37               	xorwf	___ftadd@f2^0,f,c
  4527  0019CE  0EFF               	movlw	255
  4528  0019D0  1A38               	xorwf	(___ftadd@f2+1)^0,f,c
  4529  0019D2  0EFF               	movlw	255
  4530  0019D4  1A39               	xorwf	(___ftadd@f2+2)^0,f,c
  4531  0019D6  0E01               	movlw	1
  4532  0019D8  2637               	addwf	___ftadd@f2^0,f,c
  4533  0019DA  0E00               	movlw	0
  4534  0019DC  2238               	addwfc	(___ftadd@f2+1)^0,f,c
  4535  0019DE  0E00               	movlw	0
  4536  0019E0  2239               	addwfc	(___ftadd@f2+2)^0,f,c
  4537  0019E2  0E01               	movlw	1
  4538  0019E4  6E3D               	movwf	___ftadd@sign^0,c
  4539  0019E6                     l2305:
  4540  0019E6  C037  F001         	movff	___ftadd@f2,___ftpack@arg
  4541  0019EA  C038  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4542  0019EE  C039  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4543  0019F2  C03F  F004         	movff	___ftadd@exp1,___ftpack@exp
  4544  0019F6  C03D  F005         	movff	___ftadd@sign,___ftpack@sign
  4545  0019FA  EC55  F00F         	call	___ftpack	;wreg free
  4546  0019FE  C001  F034         	movff	?___ftpack,?___ftadd
  4547  001A02  C002  F035         	movff	?___ftpack+1,?___ftadd+1
  4548  001A06  C003  F036         	movff	?___ftpack+2,?___ftadd+2
  4549  001A0A  0012               	return		;funcret
  4550  001A0C                     __end_of___ftadd:
  4551                           	callstack 0
  4552                           
  4553 ;; *************** function ___ftneg *****************
  4554 ;; Defined at:
  4555 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftneg.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  f1              3    0[COMRAM] float 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  3    0[COMRAM] float 
  4562 ;; Registers used:
  4563 ;;		wreg, status,2, status,0
  4564 ;; Tracked objects:
  4565 ;;		On entry : 0/0
  4566 ;;		On exit  : 0/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4569 ;;      Params:         3       0       0       0       0       0       0       0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4572 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4573 ;;Total ram usage:        3 bytes
  4574 ;; Hardware stack levels used: 1
  4575 ;; This function calls:
  4576 ;;		Nothing
  4577 ;; This function is called by:
  4578 ;;		_printf
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text19
  4583  00248C                     __ptext19:
  4584                           	callstack 0
  4585  00248C                     ___ftneg:
  4586                           	callstack 29
  4587                           
  4588                           ;incstack = 0
  4589  00248C  5001               	movf	___ftneg@f1^0,w,c
  4590  00248E  1002               	iorwf	(___ftneg@f1+1)^0,w,c
  4591  002490  1003               	iorwf	(___ftneg@f1+2)^0,w,c
  4592  002492  B4D8               	btfsc	status,2,c
  4593  002494  D006               	goto	l648
  4594  002496  0E00               	movlw	0
  4595  002498  1A01               	xorwf	___ftneg@f1^0,f,c
  4596  00249A  0E00               	movlw	0
  4597  00249C  1A02               	xorwf	(___ftneg@f1+1)^0,f,c
  4598  00249E  0E80               	movlw	128
  4599  0024A0  1A03               	xorwf	(___ftneg@f1+2)^0,f,c
  4600  0024A2                     l648:
  4601  0024A2  C001  F001         	movff	___ftneg@f1,?___ftneg
  4602  0024A6  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4603  0024AA  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4604  0024AE  0012               	return		;funcret
  4605  0024B0                     __end_of___ftneg:
  4606                           	callstack 0
  4607                           
  4608 ;; *************** function ___ftge *****************
  4609 ;; Defined at:
  4610 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftge.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  ff1             3    0[COMRAM] float 
  4613 ;;  ff2             3    3[COMRAM] float 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;		None
  4616 ;; Return value:  Size  Location     Type
  4617 ;;		None               void
  4618 ;; Registers used:
  4619 ;;		wreg, status,2, status,0
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4625 ;;      Params:         6       0       0       0       0       0       0       0       0
  4626 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4627 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4628 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4629 ;;Total ram usage:        9 bytes
  4630 ;; Hardware stack levels used: 1
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_printf
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text20
  4639  0020E4                     __ptext20:
  4640                           	callstack 0
  4641  0020E4                     ___ftge:
  4642                           	callstack 29
  4643                           
  4644                           ;incstack = 0
  4645  0020E4  AE03               	btfss	(___ftge@ff1+2)^0,7,c
  4646  0020E6  D00F               	goto	l2749
  4647  0020E8  0E00               	movlw	0
  4648  0020EA  6E07               	movwf	??___ftge^0,c
  4649  0020EC  0E00               	movlw	0
  4650  0020EE  6E08               	movwf	(??___ftge+1)^0,c
  4651  0020F0  0E80               	movlw	128
  4652  0020F2  6E09               	movwf	(??___ftge+2)^0,c
  4653  0020F4  5001               	movf	___ftge@ff1^0,w,c
  4654  0020F6  5C07               	subwf	??___ftge^0,w,c
  4655  0020F8  6E01               	movwf	___ftge@ff1^0,c
  4656  0020FA  5002               	movf	(___ftge@ff1+1)^0,w,c
  4657  0020FC  5808               	subwfb	(??___ftge+1)^0,w,c
  4658  0020FE  6E02               	movwf	(___ftge@ff1+1)^0,c
  4659  002100  5003               	movf	(___ftge@ff1+2)^0,w,c
  4660  002102  5809               	subwfb	(??___ftge+2)^0,w,c
  4661  002104  6E03               	movwf	(___ftge@ff1+2)^0,c
  4662  002106                     l2749:
  4663  002106  AE06               	btfss	(___ftge@ff2+2)^0,7,c
  4664  002108  D00F               	goto	l2753
  4665  00210A  0E00               	movlw	0
  4666  00210C  6E07               	movwf	??___ftge^0,c
  4667  00210E  0E00               	movlw	0
  4668  002110  6E08               	movwf	(??___ftge+1)^0,c
  4669  002112  0E80               	movlw	128
  4670  002114  6E09               	movwf	(??___ftge+2)^0,c
  4671  002116  5004               	movf	___ftge@ff2^0,w,c
  4672  002118  5C07               	subwf	??___ftge^0,w,c
  4673  00211A  6E04               	movwf	___ftge@ff2^0,c
  4674  00211C  5005               	movf	(___ftge@ff2+1)^0,w,c
  4675  00211E  5808               	subwfb	(??___ftge+1)^0,w,c
  4676  002120  6E05               	movwf	(___ftge@ff2+1)^0,c
  4677  002122  5006               	movf	(___ftge@ff2+2)^0,w,c
  4678  002124  5809               	subwfb	(??___ftge+2)^0,w,c
  4679  002126  6E06               	movwf	(___ftge@ff2+2)^0,c
  4680  002128                     l2753:
  4681  002128  0E00               	movlw	0
  4682  00212A  1A01               	xorwf	___ftge@ff1^0,f,c
  4683  00212C  0E00               	movlw	0
  4684  00212E  1A02               	xorwf	(___ftge@ff1+1)^0,f,c
  4685  002130  0E80               	movlw	128
  4686  002132  1A03               	xorwf	(___ftge@ff1+2)^0,f,c
  4687  002134  0E00               	movlw	0
  4688  002136  1A04               	xorwf	___ftge@ff2^0,f,c
  4689  002138  0E00               	movlw	0
  4690  00213A  1A05               	xorwf	(___ftge@ff2+1)^0,f,c
  4691  00213C  0E80               	movlw	128
  4692  00213E  1A06               	xorwf	(___ftge@ff2+2)^0,f,c
  4693  002140  5004               	movf	___ftge@ff2^0,w,c
  4694  002142  5C01               	subwf	___ftge@ff1^0,w,c
  4695  002144  5005               	movf	(___ftge@ff2+1)^0,w,c
  4696  002146  5802               	subwfb	(___ftge@ff1+1)^0,w,c
  4697  002148  5006               	movf	(___ftge@ff2+2)^0,w,c
  4698  00214A  5803               	subwfb	(___ftge@ff1+2)^0,w,c
  4699  00214C  B0D8               	btfsc	status,0,c
  4700  00214E  D002               	goto	l2759
  4701  002150  90D8               	bcf	status,0,c
  4702  002152  0012               	return	
  4703  002154                     l2759:
  4704  002154  80D8               	bsf	status,0,c
  4705  002156  0012               	return		;funcret
  4706  002158                     __end_of___ftge:
  4707                           	callstack 0
  4708                           
  4709 ;; *************** function _LCD_segunda_linea *****************
  4710 ;; Defined at:
  4711 ;;		line 146 in file "LCD.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4725 ;;      Params:         0       0       0       0       0       0       0       0       0
  4726 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4728 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 2
  4732 ;; This function calls:
  4733 ;;		_LCD_cmd
  4734 ;; This function is called by:
  4735 ;;		_main
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           	psect	text21
  4740  002540                     __ptext21:
  4741                           	callstack 0
  4742  002540                     _LCD_segunda_linea:
  4743                           	callstack 28
  4744                           
  4745                           ;LCD.c: 147: LCD_cmd(0xC0);
  4746                           
  4747                           ;incstack = 0
  4748  002540  0EC0               	movlw	192
  4749  002542  EC95  F012         	call	_LCD_cmd
  4750  002546  0012               	return		;funcret
  4751  002548                     __end_of_LCD_segunda_linea:
  4752                           	callstack 0
  4753                           
  4754 ;; *************** function _LCD_printf *****************
  4755 ;; Defined at:
  4756 ;;		line 97 in file "LCD.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  dato            2    2[COMRAM] PTR unsigned char 
  4759 ;;		 -> LCD_integer@st(8), STR_3(6), 
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;		None
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  1    wreg      void 
  4764 ;; Registers used:
  4765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4771 ;;      Params:         2       0       0       0       0       0       0       0       0
  4772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4774 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4775 ;;Total ram usage:        2 bytes
  4776 ;; Hardware stack levels used: 1
  4777 ;; Hardware stack levels required when called: 2
  4778 ;; This function calls:
  4779 ;;		_LCD_dato
  4780 ;; This function is called by:
  4781 ;;		_main
  4782 ;;		_LCD_integer
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text22
  4787  00234A                     __ptext22:
  4788                           	callstack 0
  4789  00234A                     _LCD_printf:
  4790                           	callstack 28
  4791                           
  4792                           ;LCD.c: 98: while (*dato){
  4793                           
  4794                           ;incstack = 0
  4795  00234A  D014               	goto	l3183
  4796  00234C                     l3179:
  4797                           
  4798                           ;LCD.c: 99: LCD_dato(*dato);
  4799  00234C  C003  FFF6         	movff	LCD_printf@dato,tblptrl
  4800  002350  C004  FFF7         	movff	LCD_printf@dato+1,tblptrh
  4801  002354  6AF8               	clrf	tblptru,c
  4802  002356  0E07               	movlw	(high __ramtop+-1)
  4803  002358  64F7               	cpfsgt	tblptrh,c
  4804  00235A  D003               	bra	u3397
  4805  00235C  0008               	tblrd		*
  4806  00235E  50F5               	movf	tablat,w,c
  4807  002360  D005               	bra	u3390
  4808  002362                     u3397:
  4809  002362  CFF6 FFE9          	movff	tblptrl,fsr0l
  4810  002366  CFF7 FFEA          	movff	tblptrh,fsr0h
  4811  00236A  50EF               	movf	indf0,w,c
  4812  00236C                     u3390:
  4813  00236C  EC8F  F012         	call	_LCD_dato
  4814                           
  4815                           ;LCD.c: 100: dato++;
  4816  002370  4A03               	infsnz	LCD_printf@dato^0,f,c
  4817  002372  2A04               	incf	(LCD_printf@dato+1)^0,f,c
  4818  002374                     l3183:
  4819  002374  C003  FFF6         	movff	LCD_printf@dato,tblptrl
  4820  002378  C004  FFF7         	movff	LCD_printf@dato+1,tblptrh
  4821  00237C  6AF8               	clrf	tblptru,c
  4822  00237E  0E07               	movlw	(high __ramtop+-1)
  4823  002380  64F7               	cpfsgt	tblptrh,c
  4824  002382  D003               	bra	u3407
  4825  002384  0008               	tblrd		*
  4826  002386  50F5               	movf	tablat,w,c
  4827  002388  D005               	bra	u3400
  4828  00238A                     u3407:
  4829  00238A  CFF6 FFE9          	movff	tblptrl,fsr0l
  4830  00238E  CFF7 FFEA          	movff	tblptrh,fsr0h
  4831  002392  50EF               	movf	indf0,w,c
  4832  002394                     u3400:
  4833  002394  0900               	iorlw	0
  4834  002396  B4D8               	btfsc	status,2,c
  4835  002398  0012               	return	
  4836  00239A  D7D8               	goto	l3179
  4837  00239C                     __end_of_LCD_printf:
  4838                           	callstack 0
  4839                           
  4840 ;; *************** function _LCD_dato *****************
  4841 ;; Defined at:
  4842 ;;		line 85 in file "LCD.c"
  4843 ;; Parameters:    Size  Location     Type
  4844 ;;  dato            1    wreg     unsigned char 
  4845 ;; Auto vars:     Size  Location     Type
  4846 ;;  dato            1    1[COMRAM] unsigned char 
  4847 ;; Return value:  Size  Location     Type
  4848 ;;                  1    wreg      void 
  4849 ;; Registers used:
  4850 ;;		wreg, status,2, status,0, cstack
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4856 ;;      Params:         0       0       0       0       0       0       0       0       0
  4857 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4858 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4859 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4860 ;;Total ram usage:        1 bytes
  4861 ;; Hardware stack levels used: 1
  4862 ;; Hardware stack levels required when called: 1
  4863 ;; This function calls:
  4864 ;;		_LCD_write
  4865 ;; This function is called by:
  4866 ;;		_putch
  4867 ;;		_LCD_printf
  4868 ;;		_LCD_custom_char
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text23
  4873  00251E                     __ptext23:
  4874                           	callstack 0
  4875  00251E                     _LCD_dato:
  4876                           	callstack 27
  4877                           
  4878                           ;incstack = 0
  4879                           ;LCD_dato@dato stored from wreg
  4880  00251E  6E02               	movwf	LCD_dato@dato^0,c
  4881                           
  4882                           ;LCD.c: 88: LATDbits.LATD3 = 1;
  4883  002520  868C               	bsf	140,3,c	;volatile
  4884                           
  4885                           ;LCD.c: 89: LCD_write(dato);
  4886  002522  5002               	movf	LCD_dato@dato^0,w,c
  4887  002524  ECE4  F010         	call	_LCD_write
  4888  002528  0012               	return		;funcret
  4889  00252A                     __end_of_LCD_dato:
  4890                           	callstack 0
  4891                           
  4892 ;; *************** function _LCD_init *****************
  4893 ;; Defined at:
  4894 ;;		line 18 in file "LCD.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;		None
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 0/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4908 ;;      Params:         0       0       0       0       0       0       0       0       0
  4909 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4910 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4911 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4912 ;;Total ram usage:        2 bytes
  4913 ;; Hardware stack levels used: 1
  4914 ;; Hardware stack levels required when called: 2
  4915 ;; This function calls:
  4916 ;;		_LCD_cmd
  4917 ;; This function is called by:
  4918 ;;		_main
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text24
  4923  00239C                     __ptext24:
  4924                           	callstack 0
  4925  00239C                     _LCD_init:
  4926                           	callstack 28
  4927                           
  4928                           ;LCD.c: 20: TRISDbits.TRISD4 = 0;
  4929                           
  4930                           ;incstack = 0
  4931  00239C  9895               	bcf	149,4,c	;volatile
  4932                           
  4933                           ;LCD.c: 21: TRISDbits.TRISD5 = 0;
  4934  00239E  9A95               	bcf	149,5,c	;volatile
  4935                           
  4936                           ;LCD.c: 22: TRISDbits.TRISD6 = 0;
  4937  0023A0  9C95               	bcf	149,6,c	;volatile
  4938                           
  4939                           ;LCD.c: 23: TRISDbits.TRISD7 = 0;
  4940  0023A2  9E95               	bcf	149,7,c	;volatile
  4941                           
  4942                           ;LCD.c: 25: TRISDbits.TRISD3 = 0;
  4943  0023A4  9695               	bcf	149,3,c	;volatile
  4944                           
  4945                           ;LCD.c: 26: TRISDbits.TRISD2 = 0;
  4946  0023A6  9495               	bcf	149,2,c	;volatile
  4947                           
  4948                           ;LCD.c: 27: LATDbits.LATD3 = 0;
  4949  0023A8  968C               	bcf	140,3,c	;volatile
  4950                           
  4951                           ;LCD.c: 28: LATDbits.LATD2 = 0;
  4952  0023AA  948C               	bcf	140,2,c	;volatile
  4953                           
  4954                           ;LCD.c: 30: LATDbits.LATD4 = 0;
  4955  0023AC  988C               	bcf	140,4,c	;volatile
  4956                           
  4957                           ;LCD.c: 31: LATDbits.LATD5 = 0;
  4958  0023AE  9A8C               	bcf	140,5,c	;volatile
  4959                           
  4960                           ;LCD.c: 32: LATDbits.LATD6 = 0;
  4961  0023B0  9C8C               	bcf	140,6,c	;volatile
  4962                           
  4963                           ;LCD.c: 33: LATDbits.LATD7 = 0;
  4964  0023B2  9E8C               	bcf	140,7,c	;volatile
  4965                           
  4966                           ;LCD.c: 35: _delay((unsigned long)((50)*(20000000/4000.0)));
  4967  0023B4  0E02               	movlw	2
  4968  0023B6  6E04               	movwf	(??_LCD_init+1)^0,c
  4969  0023B8  0E45               	movlw	69
  4970  0023BA  6E03               	movwf	??_LCD_init^0,c
  4971  0023BC  0EAA               	movlw	170
  4972  0023BE                     u3527:
  4973  0023BE  2EE8               	decfsz	wreg,f,c
  4974  0023C0  D7FE               	bra	u3527
  4975  0023C2  2E03               	decfsz	??_LCD_init^0,f,c
  4976  0023C4  D7FC               	bra	u3527
  4977  0023C6  2E04               	decfsz	(??_LCD_init+1)^0,f,c
  4978  0023C8  D7FA               	bra	u3527
  4979                           
  4980                           ;LCD.c: 36: LCD_cmd(0x02);
  4981  0023CA  0E02               	movlw	2
  4982  0023CC  EC95  F012         	call	_LCD_cmd
  4983                           
  4984                           ;LCD.c: 37: LCD_cmd(0x28);
  4985  0023D0  0E28               	movlw	40
  4986  0023D2  EC95  F012         	call	_LCD_cmd
  4987                           
  4988                           ;LCD.c: 38: LCD_cmd(0x0C);
  4989  0023D6  0E0C               	movlw	12
  4990  0023D8  EC95  F012         	call	_LCD_cmd
  4991                           
  4992                           ;LCD.c: 39: LCD_cmd(0x06);
  4993  0023DC  0E06               	movlw	6
  4994  0023DE  EC95  F012         	call	_LCD_cmd
  4995  0023E2  0012               	return		;funcret
  4996  0023E4                     __end_of_LCD_init:
  4997                           	callstack 0
  4998                           
  4999 ;; *************** function _LCD_clear *****************
  5000 ;; Defined at:
  5001 ;;		line 154 in file "LCD.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		wreg, status,2, status,0, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5015 ;;      Params:         0       0       0       0       0       0       0       0       0
  5016 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5017 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5018 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5019 ;;Total ram usage:        1 bytes
  5020 ;; Hardware stack levels used: 1
  5021 ;; Hardware stack levels required when called: 2
  5022 ;; This function calls:
  5023 ;;		_LCD_cmd
  5024 ;; This function is called by:
  5025 ;;		_main
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text25
  5030  002508                     __ptext25:
  5031                           	callstack 0
  5032  002508                     _LCD_clear:
  5033                           	callstack 28
  5034                           
  5035                           ;LCD.c: 155: LCD_cmd(0x01);
  5036                           
  5037                           ;incstack = 0
  5038  002508  0E01               	movlw	1
  5039  00250A  EC95  F012         	call	_LCD_cmd
  5040                           
  5041                           ;LCD.c: 156: _delay((unsigned long)((2)*(20000000/4000.0)));
  5042  00250E  0E0D               	movlw	13
  5043  002510  6E03               	movwf	??_LCD_clear^0,c
  5044  002512  0EFC               	movlw	252
  5045  002514                     u3537:
  5046  002514  2EE8               	decfsz	wreg,f,c
  5047  002516  D7FE               	bra	u3537
  5048  002518  2E03               	decfsz	??_LCD_clear^0,f,c
  5049  00251A  D7FC               	bra	u3537
  5050  00251C  0012               	return		;funcret
  5051  00251E                     __end_of_LCD_clear:
  5052                           	callstack 0
  5053                           
  5054 ;; *************** function _LCD_cmd *****************
  5055 ;; Defined at:
  5056 ;;		line 71 in file "LCD.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  dato            1    wreg     unsigned char 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  dato            1    1[COMRAM] unsigned char 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, status,2, status,0, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5070 ;;      Params:         0       0       0       0       0       0       0       0       0
  5071 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5073 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5074 ;;Total ram usage:        1 bytes
  5075 ;; Hardware stack levels used: 1
  5076 ;; Hardware stack levels required when called: 1
  5077 ;; This function calls:
  5078 ;;		_LCD_write
  5079 ;; This function is called by:
  5080 ;;		_LCD_init
  5081 ;;		_LCD_segunda_linea
  5082 ;;		_LCD_clear
  5083 ;;		_LCD_goto
  5084 ;;		_LCD_cursor
  5085 ;;		_LCD_home
  5086 ;;		_LCD_custom_char
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text26
  5091  00252A                     __ptext26:
  5092                           	callstack 0
  5093  00252A                     _LCD_cmd:
  5094                           	callstack 28
  5095                           
  5096                           ;incstack = 0
  5097                           ;LCD_cmd@dato stored from wreg
  5098  00252A  6E02               	movwf	LCD_cmd@dato^0,c
  5099                           
  5100                           ;LCD.c: 74: LATDbits.LATD3 = 0;
  5101  00252C  968C               	bcf	140,3,c	;volatile
  5102                           
  5103                           ;LCD.c: 75: LCD_write(dato);
  5104  00252E  5002               	movf	LCD_cmd@dato^0,w,c
  5105  002530  ECE4  F010         	call	_LCD_write
  5106  002534  0012               	return		;funcret
  5107  002536                     __end_of_LCD_cmd:
  5108                           	callstack 0
  5109                           
  5110 ;; *************** function _LCD_write *****************
  5111 ;; Defined at:
  5112 ;;		line 47 in file "LCD.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  dato            1    wreg     unsigned char 
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;  dato            1    0[COMRAM] unsigned char 
  5117 ;; Return value:  Size  Location     Type
  5118 ;;                  1    wreg      void 
  5119 ;; Registers used:
  5120 ;;		wreg, status,2, status,0
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5126 ;;      Params:         0       0       0       0       0       0       0       0       0
  5127 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5129 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5130 ;;Total ram usage:        1 bytes
  5131 ;; Hardware stack levels used: 1
  5132 ;; This function calls:
  5133 ;;		Nothing
  5134 ;; This function is called by:
  5135 ;;		_LCD_cmd
  5136 ;;		_LCD_dato
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text27
  5141  0021C8                     __ptext27:
  5142                           	callstack 0
  5143  0021C8                     _LCD_write:
  5144                           	callstack 27
  5145                           
  5146                           ;incstack = 0
  5147                           ;LCD_write@dato stored from wreg
  5148  0021C8  6E01               	movwf	LCD_write@dato^0,c
  5149                           
  5150                           ;LCD.c: 49: if (dato & (1<<4)) LATDbits.LATD4 = 1; else LATDbits.LATD4 = 0;
  5151  0021CA  A801               	btfss	LCD_write@dato^0,4,c
  5152  0021CC  D002               	goto	l70
  5153  0021CE  888C               	bsf	140,4,c	;volatile
  5154  0021D0  D001               	goto	l2167
  5155  0021D2                     l70:
  5156  0021D2  988C               	bcf	140,4,c	;volatile
  5157  0021D4                     l2167:
  5158                           
  5159                           ;LCD.c: 50: if (dato & (1<<5)) LATDbits.LATD5 = 1; else LATDbits.LATD5 = 0;
  5160  0021D4  AA01               	btfss	LCD_write@dato^0,5,c
  5161  0021D6  D002               	goto	l72
  5162  0021D8  8A8C               	bsf	140,5,c	;volatile
  5163  0021DA  D001               	goto	l2171
  5164  0021DC                     l72:
  5165  0021DC  9A8C               	bcf	140,5,c	;volatile
  5166  0021DE                     l2171:
  5167                           
  5168                           ;LCD.c: 51: if (dato & (1<<6)) LATDbits.LATD6 = 1; else LATDbits.LATD6 = 0;
  5169  0021DE  AC01               	btfss	LCD_write@dato^0,6,c
  5170  0021E0  D002               	goto	l74
  5171  0021E2  8C8C               	bsf	140,6,c	;volatile
  5172  0021E4  D001               	goto	l2175
  5173  0021E6                     l74:
  5174  0021E6  9C8C               	bcf	140,6,c	;volatile
  5175  0021E8                     l2175:
  5176                           
  5177                           ;LCD.c: 52: if (dato & (1<<7)) LATDbits.LATD7 = 1; else LATDbits.LATD7 = 0;
  5178  0021E8  AE01               	btfss	LCD_write@dato^0,7,c
  5179  0021EA  D002               	goto	l76
  5180  0021EC  8E8C               	bsf	140,7,c	;volatile
  5181  0021EE  D001               	goto	l77
  5182  0021F0                     l76:
  5183  0021F0  9E8C               	bcf	140,7,c	;volatile
  5184  0021F2                     l77:
  5185                           
  5186                           ;LCD.c: 53: LATDbits.LATD2 = 1;
  5187  0021F2  848C               	bsf	140,2,c	;volatile
  5188                           
  5189                           ;LCD.c: 54: __nop();
  5190  0021F4  F000               	nop	
  5191                           
  5192                           ;LCD.c: 55: LATDbits.LATD2 = 0;
  5193  0021F6  948C               	bcf	140,2,c	;volatile
  5194                           
  5195                           ;LCD.c: 57: dato = (dato << 4);
  5196  0021F8  3801               	swapf	LCD_write@dato^0,w,c
  5197  0021FA  0BF0               	andlw	240
  5198  0021FC  6E01               	movwf	LCD_write@dato^0,c
  5199                           
  5200                           ;LCD.c: 58: if (dato & (1<<4)) LATDbits.LATD4 = 1; else LATDbits.LATD4 = 0;
  5201  0021FE  A801               	btfss	LCD_write@dato^0,4,c
  5202  002200  D002               	goto	l78
  5203  002202  888C               	bsf	140,4,c	;volatile
  5204  002204  D001               	goto	l79
  5205  002206                     l78:
  5206  002206  988C               	bcf	140,4,c	;volatile
  5207  002208                     l79:
  5208                           
  5209                           ;LCD.c: 59: if (dato & (1<<5)) LATDbits.LATD5 = 1; else LATDbits.LATD5 = 0;
  5210  002208  AA01               	btfss	LCD_write@dato^0,5,c
  5211  00220A  D002               	goto	l80
  5212  00220C  8A8C               	bsf	140,5,c	;volatile
  5213  00220E  D001               	goto	l81
  5214  002210                     l80:
  5215  002210  9A8C               	bcf	140,5,c	;volatile
  5216  002212                     l81:
  5217                           
  5218                           ;LCD.c: 60: if (dato & (1<<6)) LATDbits.LATD6 = 1; else LATDbits.LATD6 = 0;
  5219  002212  AC01               	btfss	LCD_write@dato^0,6,c
  5220  002214  D002               	goto	l82
  5221  002216  8C8C               	bsf	140,6,c	;volatile
  5222  002218  D001               	goto	l83
  5223  00221A                     l82:
  5224  00221A  9C8C               	bcf	140,6,c	;volatile
  5225  00221C                     l83:
  5226                           
  5227                           ;LCD.c: 61: if (dato & (1<<7)) LATDbits.LATD7 = 1; else LATDbits.LATD7 = 0;
  5228  00221C  AE01               	btfss	LCD_write@dato^0,7,c
  5229  00221E  D002               	goto	l84
  5230  002220  8E8C               	bsf	140,7,c	;volatile
  5231  002222  D001               	goto	l85
  5232  002224                     l84:
  5233  002224  9E8C               	bcf	140,7,c	;volatile
  5234  002226                     l85:
  5235                           
  5236                           ;LCD.c: 62: LATDbits.LATD2 = 1;
  5237  002226  848C               	bsf	140,2,c	;volatile
  5238                           
  5239                           ;LCD.c: 63: __nop();
  5240  002228  F000               	nop	
  5241                           
  5242                           ;LCD.c: 64: LATDbits.LATD2 = 0;
  5243  00222A  948C               	bcf	140,2,c	;volatile
  5244                           
  5245                           ;LCD.c: 65: _delay((unsigned long)((50)*(20000000/4000000.0)));
  5246  00222C  0E53               	movlw	83
  5247  00222E                     u3547:
  5248  00222E  2EE8               	decfsz	wreg,f,c
  5249  002230  D7FE               	bra	u3547
  5250  002232  F000               	nop	
  5251  002234  0012               	return		;funcret
  5252  002236                     __end_of_LCD_write:
  5253                           	callstack 0
  5254                           
  5255 ;; *************** function _DHT22_read *****************
  5256 ;; Defined at:
  5257 ;;		line 13 in file "DHT22.h"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;  dht_temperat    2   41[COMRAM] PTR float 
  5260 ;;		 -> main@temperatura(3), 
  5261 ;;  dht_humedad     2   43[COMRAM] PTR float 
  5262 ;;		 -> main@humedad(3), 
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  result          1   49[COMRAM] unsigned char 
  5265 ;;  rawtemperatu    2   55[COMRAM] unsigned int 
  5266 ;;  rawhumidity     2   47[COMRAM] unsigned int 
  5267 ;;  bits            5   50[COMRAM] unsigned char [5]
  5268 ;;  j               1   58[COMRAM] unsigned char 
  5269 ;;  i               1   57[COMRAM] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      unsigned char 
  5272 ;; Registers used:
  5273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5279 ;;      Params:         4       0       0       0       0       0       0       0       0
  5280 ;;      Locals:        12       0       0       0       0       0       0       0       0
  5281 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5282 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5283 ;;Total ram usage:       18 bytes
  5284 ;; Hardware stack levels used: 1
  5285 ;; Hardware stack levels required when called: 2
  5286 ;; This function calls:
  5287 ;;		___ftdiv
  5288 ;;		___ftmul
  5289 ;;		___lwtoft
  5290 ;; This function is called by:
  5291 ;;		_main
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text28
  5296  0016B0                     __ptext28:
  5297                           	callstack 0
  5298  0016B0                     _DHT22_read:
  5299                           	callstack 28
  5300                           
  5301                           ;DHT22.h: 18: LATCbits.LATC2 = 0;
  5302                           
  5303                           ;incstack = 0
  5304  0016B0  948B               	bcf	139,2,c	;volatile
  5305                           
  5306                           ;DHT22.h: 19: _delay((unsigned long)((18)*(20000000/4000.0)));
  5307  0016B2  0E75               	movlw	117
  5308  0016B4  6E2E               	movwf	??_DHT22_read^0,c
  5309  0016B6  0EE1               	movlw	225
  5310  0016B8                     u3557:
  5311  0016B8  2EE8               	decfsz	wreg,f,c
  5312  0016BA  D7FE               	bra	u3557
  5313  0016BC  2E2E               	decfsz	??_DHT22_read^0,f,c
  5314  0016BE  D7FC               	bra	u3557
  5315  0016C0  F000               	nop	
  5316                           
  5317                           ;DHT22.h: 21: LATCbits.LATC2 = 1;
  5318  0016C2  848B               	bsf	139,2,c	;volatile
  5319                           
  5320                           ;DHT22.h: 22: _delay((unsigned long)((40)*(20000000/4000000.0)));
  5321  0016C4  0E42               	movlw	66
  5322  0016C6                     u3567:
  5323  0016C6  2EE8               	decfsz	wreg,f,c
  5324  0016C8  D7FE               	bra	u3567
  5325  0016CA  D000               	nop2	
  5326                           
  5327                           ;DHT22.h: 24: TRISCbits.TRISC2 = 1;
  5328  0016CC  8494               	bsf	148,2,c	;volatile
  5329                           
  5330                           ;DHT22.h: 26: if(PORTCbits.RC2){
  5331  0016CE  A482               	btfss	130,2,c	;volatile
  5332  0016D0  D004               	goto	l2863
  5333  0016D2                     u2850:
  5334                           
  5335                           ;DHT22.h: 27: TRISCbits.TRISC2 = 0;
  5336  0016D2  9494               	bcf	148,2,c	;volatile
  5337                           
  5338                           ;DHT22.h: 28: PORTCbits.RC2 = 1;
  5339  0016D4  8482               	bsf	130,2,c	;volatile
  5340  0016D6                     l2859:
  5341                           
  5342                           ;DHT22.h: 29: return 0;
  5343  0016D6  0E00               	movlw	0
  5344  0016D8  0012               	return	
  5345  0016DA                     l2863:
  5346                           
  5347                           ;DHT22.h: 30: };DHT22.h: 31: _delay((unsigned long)((80)*(20000000/4000000.0)));
  5348  0016DA  0E85               	movlw	133
  5349  0016DC                     u3577:
  5350  0016DC  2EE8               	decfsz	wreg,f,c
  5351  0016DE  D7FE               	bra	u3577
  5352  0016E0  F000               	nop	
  5353                           
  5354                           ;DHT22.h: 33: if(!PORTCbits.RC2){
  5355  0016E2  A482               	btfss	130,2,c	;volatile
  5356  0016E4  D7F6               	goto	u2850
  5357                           
  5358                           ;DHT22.h: 37: };DHT22.h: 38: _delay((unsigned long)((80)*(20000000/4000000.0)));
  5359                           
  5360                           ;DHT22.h: 35: PORTCbits.RC2 = 1;
  5361                           
  5362                           ;DHT22.h: 34: TRISCbits.TRISC2 = 0;
  5363  0016E6  0E85               	movlw	133
  5364  0016E8                     u3587:
  5365  0016E8  2EE8               	decfsz	wreg,f,c
  5366  0016EA  D7FE               	bra	u3587
  5367  0016EC  F000               	nop	
  5368                           
  5369                           ;DHT22.h: 40: for (j=0; j<5; j++)
  5370  0016EE  0E00               	movlw	0
  5371  0016F0  6E3B               	movwf	DHT22_read@j^0,c
  5372  0016F2                     l2881:
  5373                           
  5374                           ;DHT22.h: 41: {;DHT22.h: 42: uint8_t result=0;
  5375  0016F2  0E00               	movlw	0
  5376  0016F4  6E32               	movwf	DHT22_read@result^0,c
  5377                           
  5378                           ;DHT22.h: 43: for (i=0; i<8; i++)
  5379  0016F6  0E00               	movlw	0
  5380  0016F8  6E3A               	movwf	DHT22_read@i^0,c
  5381  0016FA                     l31:
  5382  0016FA  A482               	btfss	130,2,c	;volatile
  5383  0016FC  D7FE               	goto	l31
  5384                           
  5385                           ;DHT22.h: 46: _delay((unsigned long)((35)*(20000000/4000000.0)));
  5386  0016FE  0E3A               	movlw	58
  5387  001700                     u3597:
  5388  001700  2EE8               	decfsz	wreg,f,c
  5389  001702  D7FE               	bra	u3597
  5390  001704  F000               	nop	
  5391                           
  5392                           ;DHT22.h: 48: if (PORTCbits.RC2)
  5393  001706  A482               	btfss	130,2,c	;volatile
  5394  001708  D00D               	goto	l35
  5395                           
  5396                           ;DHT22.h: 49: result |= (1<<(7-i));
  5397  00170A  503A               	movf	DHT22_read@i^0,w,c
  5398  00170C  0807               	sublw	7
  5399  00170E  6E2E               	movwf	??_DHT22_read^0,c
  5400  001710  0E01               	movlw	1
  5401  001712  6E2F               	movwf	(??_DHT22_read+1)^0,c
  5402  001714  2A2E               	incf	??_DHT22_read^0,f,c
  5403  001716  D002               	goto	u2894
  5404  001718                     u2895:
  5405  001718  90D8               	bcf	status,0,c
  5406  00171A  362F               	rlcf	(??_DHT22_read+1)^0,f,c
  5407  00171C                     u2894:
  5408  00171C  2E2E               	decfsz	??_DHT22_read^0,f,c
  5409  00171E  D7FC               	goto	u2895
  5410  001720  502F               	movf	(??_DHT22_read+1)^0,w,c
  5411  001722  1232               	iorwf	DHT22_read@result^0,f,c
  5412  001724                     l35:
  5413  001724  B482               	btfsc	130,2,c	;volatile
  5414  001726  D7FE               	goto	l35
  5415  001728  2A3A               	incf	DHT22_read@i^0,f,c
  5416  00172A  0E07               	movlw	7
  5417  00172C  643A               	cpfsgt	DHT22_read@i^0,c
  5418  00172E  D7E5               	goto	l31
  5419                           
  5420                           ;DHT22.h: 52: };DHT22.h: 53: bits[j] = result;
  5421  001730  0E33               	movlw	low DHT22_read@bits
  5422  001732  243B               	addwf	DHT22_read@j^0,w,c
  5423  001734  6ED9               	movwf	fsr2l,c
  5424  001736  6ADA               	clrf	fsr2h,c
  5425  001738  0E00               	movlw	high DHT22_read@bits
  5426  00173A  22DA               	addwfc	fsr2h,f,c
  5427  00173C  C032  FFDF         	movff	DHT22_read@result,indf2
  5428  001740  2A3B               	incf	DHT22_read@j^0,f,c
  5429  001742  0E04               	movlw	4
  5430  001744  643B               	cpfsgt	DHT22_read@j^0,c
  5431  001746  D7D5               	goto	l2881
  5432                           
  5433                           ;DHT22.h: 54: };DHT22.h: 56: TRISCbits.TRISC2 = 0;
  5434  001748  9494               	bcf	148,2,c	;volatile
  5435                           
  5436                           ;DHT22.h: 57: PORTCbits.RC2 = 1;
  5437  00174A  8482               	bsf	130,2,c	;volatile
  5438                           
  5439                           ;DHT22.h: 60: if ((uint8_t) (bits[0] + bits[1] + bits[2] +bits[3]) == bits[4])
  5440  00174C  5034               	movf	(DHT22_read@bits+1)^0,w,c
  5441  00174E  2435               	addwf	(DHT22_read@bits+2)^0,w,c
  5442  001750  2436               	addwf	(DHT22_read@bits+3)^0,w,c
  5443  001752  2433               	addwf	DHT22_read@bits^0,w,c
  5444  001754  1837               	xorwf	(DHT22_read@bits+4)^0,w,c
  5445  001756  A4D8               	btfss	status,2,c
  5446  001758  D7BE               	goto	l2859
  5447                           
  5448                           ;DHT22.h: 61: {;DHT22.h: 63: uint16_t rawhumidity = bits[0]<<8 | bits[1];
  5449  00175A  5034               	movf	(DHT22_read@bits+1)^0,w,c
  5450  00175C  C033  F02E         	movff	DHT22_read@bits,??_DHT22_read
  5451  001760  6A2F               	clrf	(??_DHT22_read+1)^0,c
  5452  001762  C02E  F02F         	movff	??_DHT22_read,??_DHT22_read+1
  5453  001766  6A2E               	clrf	??_DHT22_read^0,c
  5454  001768  102E               	iorwf	??_DHT22_read^0,w,c
  5455  00176A  6E30               	movwf	DHT22_read@rawhumidity^0,c
  5456  00176C  502F               	movf	(??_DHT22_read+1)^0,w,c
  5457  00176E  6E31               	movwf	(DHT22_read@rawhumidity+1)^0,c
  5458                           
  5459                           ;DHT22.h: 64: uint16_t rawtemperature = bits[2] <<8 | bits[3];
  5460  001770  5036               	movf	(DHT22_read@bits+3)^0,w,c
  5461  001772  C035  F02E         	movff	DHT22_read@bits+2,??_DHT22_read
  5462  001776  6A2F               	clrf	(??_DHT22_read+1)^0,c
  5463  001778  C02E  F02F         	movff	??_DHT22_read,??_DHT22_read+1
  5464  00177C  6A2E               	clrf	??_DHT22_read^0,c
  5465  00177E  102E               	iorwf	??_DHT22_read^0,w,c
  5466  001780  6E38               	movwf	DHT22_read@rawtemperature^0,c
  5467  001782  502F               	movf	(??_DHT22_read+1)^0,w,c
  5468  001784  6E39               	movwf	(DHT22_read@rawtemperature+1)^0,c
  5469                           
  5470                           ;DHT22.h: 66: if (rawtemperature & 0x8000){
  5471  001786  AE39               	btfss	(DHT22_read@rawtemperature+1)^0,7,c
  5472  001788  D02F               	goto	l2911
  5473                           
  5474                           ;DHT22.h: 67: *dht_temperatura = (float)((rawtemperature & 0x7fff) / 10.0)* -1.0;
  5475  00178A  0E00               	movlw	0
  5476  00178C  6E0F               	movwf	___ftdiv@f2^0,c
  5477  00178E  0E20               	movlw	32
  5478  001790  6E10               	movwf	(___ftdiv@f2+1)^0,c
  5479  001792  0E41               	movlw	65
  5480  001794  6E11               	movwf	(___ftdiv@f2+2)^0,c
  5481  001796  0EFF               	movlw	255
  5482  001798  1438               	andwf	DHT22_read@rawtemperature^0,w,c
  5483  00179A  6E09               	movwf	___lwtoft@c^0,c
  5484  00179C  0E7F               	movlw	127
  5485  00179E  1439               	andwf	(DHT22_read@rawtemperature+1)^0,w,c
  5486  0017A0  6E0A               	movwf	(___lwtoft@c+1)^0,c
  5487  0017A2  EC58  F012         	call	___lwtoft	;wreg free
  5488  0017A6  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  5489  0017AA  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  5490  0017AE  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  5491  0017B2  EC79  F00E         	call	___ftdiv	;wreg free
  5492  0017B6  C00C  F01B         	movff	?___ftdiv,___ftmul@f1
  5493  0017BA  C00D  F01C         	movff	?___ftdiv+1,___ftmul@f1+1
  5494  0017BE  C00E  F01D         	movff	?___ftdiv+2,___ftmul@f1+2
  5495  0017C2  0E00               	movlw	0
  5496  0017C4  6E1E               	movwf	___ftmul@f2^0,c
  5497  0017C6  0E80               	movlw	128
  5498  0017C8  6E1F               	movwf	(___ftmul@f2+1)^0,c
  5499  0017CA  0EBF               	movlw	191
  5500  0017CC  6E20               	movwf	(___ftmul@f2+2)^0,c
  5501  0017CE  ECFF  F00D         	call	___ftmul	;wreg free
  5502  0017D2  C02A  FFD9         	movff	DHT22_read@dht_temperatura,fsr2l
  5503  0017D6  C02B  FFDA         	movff	DHT22_read@dht_temperatura+1,fsr2h
  5504  0017DA  C01B  FFDE         	movff	?___ftmul,postinc2
  5505  0017DE  C01C  FFDE         	movff	?___ftmul+1,postinc2
  5506  0017E2  C01D  FFDE         	movff	?___ftmul+2,postinc2
  5507                           
  5508                           ;DHT22.h: 68: }else{
  5509  0017E6  D01E               	goto	l40
  5510  0017E8                     l2911:
  5511                           
  5512                           ;DHT22.h: 69: *dht_temperatura = (float)(rawtemperature)/10.0;
  5513  0017E8  C038  F009         	movff	DHT22_read@rawtemperature,___lwtoft@c
  5514  0017EC  C039  F00A         	movff	DHT22_read@rawtemperature+1,___lwtoft@c+1
  5515  0017F0  EC58  F012         	call	___lwtoft	;wreg free
  5516  0017F4  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  5517  0017F8  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  5518  0017FC  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  5519  001800  0E00               	movlw	0
  5520  001802  6E0F               	movwf	___ftdiv@f2^0,c
  5521  001804  0E20               	movlw	32
  5522  001806  6E10               	movwf	(___ftdiv@f2+1)^0,c
  5523  001808  0E41               	movlw	65
  5524  00180A  6E11               	movwf	(___ftdiv@f2+2)^0,c
  5525  00180C  EC79  F00E         	call	___ftdiv	;wreg free
  5526  001810  C02A  FFD9         	movff	DHT22_read@dht_temperatura,fsr2l
  5527  001814  C02B  FFDA         	movff	DHT22_read@dht_temperatura+1,fsr2h
  5528  001818  C00C  FFDE         	movff	?___ftdiv,postinc2
  5529  00181C  C00D  FFDE         	movff	?___ftdiv+1,postinc2
  5530  001820  C00E  FFDE         	movff	?___ftdiv+2,postinc2
  5531  001824                     l40:
  5532                           
  5533                           ;DHT22.h: 70: };DHT22.h: 72: *dht_humedad = (float)((rawhumidity)/10.0);
  5534  001824  C030  F009         	movff	DHT22_read@rawhumidity,___lwtoft@c
  5535  001828  C031  F00A         	movff	DHT22_read@rawhumidity+1,___lwtoft@c+1
  5536  00182C  EC58  F012         	call	___lwtoft	;wreg free
  5537  001830  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  5538  001834  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  5539  001838  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  5540  00183C  0E00               	movlw	0
  5541  00183E  6E0F               	movwf	___ftdiv@f2^0,c
  5542  001840  0E20               	movlw	32
  5543  001842  6E10               	movwf	(___ftdiv@f2+1)^0,c
  5544  001844  0E41               	movlw	65
  5545  001846  6E11               	movwf	(___ftdiv@f2+2)^0,c
  5546  001848  EC79  F00E         	call	___ftdiv	;wreg free
  5547  00184C  C02C  FFD9         	movff	DHT22_read@dht_humedad,fsr2l
  5548  001850  C02D  FFDA         	movff	DHT22_read@dht_humedad+1,fsr2h
  5549  001854  C00C  FFDE         	movff	?___ftdiv,postinc2
  5550  001858  C00D  FFDE         	movff	?___ftdiv+1,postinc2
  5551  00185C  C00E  FFDE         	movff	?___ftdiv+2,postinc2
  5552                           
  5553                           ;DHT22.h: 73: return 1;
  5554  001860  0E01               	movlw	1
  5555  001862  0012               	return		;funcret
  5556  001864                     __end_of_DHT22_read:
  5557                           	callstack 0
  5558                           
  5559 ;; *************** function ___lwtoft *****************
  5560 ;; Defined at:
  5561 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwtoft.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  c               2    8[COMRAM] unsigned int 
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;		None
  5566 ;; Return value:  Size  Location     Type
  5567 ;;                  3    8[COMRAM] float 
  5568 ;; Registers used:
  5569 ;;		wreg, status,2, status,0, cstack
  5570 ;; Tracked objects:
  5571 ;;		On entry : 0/0
  5572 ;;		On exit  : 0/0
  5573 ;;		Unchanged: 0/0
  5574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5575 ;;      Params:         3       0       0       0       0       0       0       0       0
  5576 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5578 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5579 ;;Total ram usage:        3 bytes
  5580 ;; Hardware stack levels used: 1
  5581 ;; Hardware stack levels required when called: 1
  5582 ;; This function calls:
  5583 ;;		___ftpack
  5584 ;; This function is called by:
  5585 ;;		_DHT22_read
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           	psect	text29
  5590  0024B0                     __ptext29:
  5591                           	callstack 0
  5592  0024B0                     ___lwtoft:
  5593                           	callstack 28
  5594                           
  5595                           ;incstack = 0
  5596  0024B0  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5597  0024B4  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5598  0024B8  6A03               	clrf	(___ftpack@arg+2)^0,c
  5599  0024BA  0E8E               	movlw	142
  5600  0024BC  6E04               	movwf	___ftpack@exp^0,c
  5601  0024BE  0E00               	movlw	0
  5602  0024C0  6E05               	movwf	___ftpack@sign^0,c
  5603  0024C2  EC55  F00F         	call	___ftpack	;wreg free
  5604  0024C6  C001  F009         	movff	?___ftpack,?___lwtoft
  5605  0024CA  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5606  0024CE  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5607  0024D2  0012               	return		;funcret
  5608  0024D4                     __end_of___lwtoft:
  5609                           	callstack 0
  5610                           
  5611 ;; *************** function ___ftmul *****************
  5612 ;; Defined at:
  5613 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftmul.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  f1              3   26[COMRAM] float 
  5616 ;;  f2              3   29[COMRAM] float 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  5619 ;;  sign            1   40[COMRAM] unsigned char 
  5620 ;;  cntr            1   39[COMRAM] unsigned char 
  5621 ;;  exp             1   35[COMRAM] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  3   26[COMRAM] float 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5631 ;;      Params:         6       0       0       0       0       0       0       0       0
  5632 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5633 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5634 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5635 ;;Total ram usage:       15 bytes
  5636 ;; Hardware stack levels used: 1
  5637 ;; Hardware stack levels required when called: 1
  5638 ;; This function calls:
  5639 ;;		___ftpack
  5640 ;; This function is called by:
  5641 ;;		_DHT22_read
  5642 ;;		_fround
  5643 ;;		_scale
  5644 ;;		_printf
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           	psect	text30
  5649  001BFE                     __ptext30:
  5650                           	callstack 0
  5651  001BFE                     ___ftmul:
  5652                           	callstack 27
  5653                           
  5654                           ;incstack = 0
  5655  001BFE  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  5656  001C02  6A22               	clrf	(??___ftmul+1)^0,c
  5657  001C04  6A23               	clrf	(??___ftmul+2)^0,c
  5658  001C06  341C               	rlcf	(___ftmul@f1+1)^0,w,c
  5659  001C08  3621               	rlcf	??___ftmul^0,f,c
  5660  001C0A  E301               	bnc	u2111
  5661  001C0C  8022               	bsf	(??___ftmul+1)^0,0,c
  5662  001C0E                     u2111:
  5663  001C0E  5021               	movf	??___ftmul^0,w,c
  5664  001C10  6E24               	movwf	___ftmul@exp^0,c
  5665  001C12  5024               	movf	___ftmul@exp^0,w,c
  5666  001C14  A4D8               	btfss	status,2,c
  5667  001C16  D007               	goto	l2315
  5668  001C18  0E00               	movlw	0
  5669  001C1A  6E1B               	movwf	?___ftmul^0,c
  5670  001C1C  0E00               	movlw	0
  5671  001C1E  6E1C               	movwf	(?___ftmul+1)^0,c
  5672  001C20  0E00               	movlw	0
  5673  001C22  6E1D               	movwf	(?___ftmul+2)^0,c
  5674  001C24  0012               	return	
  5675  001C26                     l2315:
  5676  001C26  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  5677  001C2A  6A22               	clrf	(??___ftmul+1)^0,c
  5678  001C2C  6A23               	clrf	(??___ftmul+2)^0,c
  5679  001C2E  341F               	rlcf	(___ftmul@f2+1)^0,w,c
  5680  001C30  3621               	rlcf	??___ftmul^0,f,c
  5681  001C32  E301               	bnc	u2131
  5682  001C34  8022               	bsf	(??___ftmul+1)^0,0,c
  5683  001C36                     u2131:
  5684  001C36  5021               	movf	??___ftmul^0,w,c
  5685  001C38  6E29               	movwf	___ftmul@sign^0,c
  5686  001C3A  5029               	movf	___ftmul@sign^0,w,c
  5687  001C3C  A4D8               	btfss	status,2,c
  5688  001C3E  D007               	goto	l2321
  5689  001C40  0E00               	movlw	0
  5690  001C42  6E1B               	movwf	?___ftmul^0,c
  5691  001C44  0E00               	movlw	0
  5692  001C46  6E1C               	movwf	(?___ftmul+1)^0,c
  5693  001C48  0E00               	movlw	0
  5694  001C4A  6E1D               	movwf	(?___ftmul+2)^0,c
  5695  001C4C  0012               	return	
  5696  001C4E                     l2321:
  5697  001C4E  5029               	movf	___ftmul@sign^0,w,c
  5698  001C50  0F7B               	addlw	123
  5699  001C52  2624               	addwf	___ftmul@exp^0,f,c
  5700  001C54  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  5701  001C58  5020               	movf	(___ftmul@f2+2)^0,w,c
  5702  001C5A  1A29               	xorwf	___ftmul@sign^0,f,c
  5703  001C5C  0E80               	movlw	128
  5704  001C5E  1629               	andwf	___ftmul@sign^0,f,c
  5705  001C60  8E1C               	bsf	(___ftmul@f1+1)^0,7,c
  5706  001C62  8E1F               	bsf	(___ftmul@f2+1)^0,7,c
  5707  001C64  0EFF               	movlw	255
  5708  001C66  161E               	andwf	___ftmul@f2^0,f,c
  5709  001C68  0EFF               	movlw	255
  5710  001C6A  161F               	andwf	(___ftmul@f2+1)^0,f,c
  5711  001C6C  0E00               	movlw	0
  5712  001C6E  1620               	andwf	(___ftmul@f2+2)^0,f,c
  5713  001C70  0E00               	movlw	0
  5714  001C72  6E25               	movwf	___ftmul@f3_as_product^0,c
  5715  001C74  0E00               	movlw	0
  5716  001C76  6E26               	movwf	(___ftmul@f3_as_product+1)^0,c
  5717  001C78  0E00               	movlw	0
  5718  001C7A  6E27               	movwf	(___ftmul@f3_as_product+2)^0,c
  5719  001C7C  0E07               	movlw	7
  5720  001C7E  6E28               	movwf	___ftmul@cntr^0,c
  5721  001C80                     l2335:
  5722  001C80  A01B               	btfss	___ftmul@f1^0,0,c
  5723  001C82  D006               	goto	l2339
  5724  001C84  501E               	movf	___ftmul@f2^0,w,c
  5725  001C86  2625               	addwf	___ftmul@f3_as_product^0,f,c
  5726  001C88  501F               	movf	(___ftmul@f2+1)^0,w,c
  5727  001C8A  2226               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5728  001C8C  5020               	movf	(___ftmul@f2+2)^0,w,c
  5729  001C8E  2227               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5730  001C90                     l2339:
  5731  001C90  90D8               	bcf	status,0,c
  5732  001C92  321D               	rrcf	(___ftmul@f1+2)^0,f,c
  5733  001C94  321C               	rrcf	(___ftmul@f1+1)^0,f,c
  5734  001C96  321B               	rrcf	___ftmul@f1^0,f,c
  5735  001C98  90D8               	bcf	status,0,c
  5736  001C9A  361E               	rlcf	___ftmul@f2^0,f,c
  5737  001C9C  361F               	rlcf	(___ftmul@f2+1)^0,f,c
  5738  001C9E  3620               	rlcf	(___ftmul@f2+2)^0,f,c
  5739  001CA0  2E28               	decfsz	___ftmul@cntr^0,f,c
  5740  001CA2  D7EE               	goto	l2335
  5741  001CA4  0E09               	movlw	9
  5742  001CA6  6E28               	movwf	___ftmul@cntr^0,c
  5743  001CA8                     l2345:
  5744  001CA8  A01B               	btfss	___ftmul@f1^0,0,c
  5745  001CAA  D006               	goto	l2349
  5746  001CAC  501E               	movf	___ftmul@f2^0,w,c
  5747  001CAE  2625               	addwf	___ftmul@f3_as_product^0,f,c
  5748  001CB0  501F               	movf	(___ftmul@f2+1)^0,w,c
  5749  001CB2  2226               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5750  001CB4  5020               	movf	(___ftmul@f2+2)^0,w,c
  5751  001CB6  2227               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5752  001CB8                     l2349:
  5753  001CB8  90D8               	bcf	status,0,c
  5754  001CBA  321D               	rrcf	(___ftmul@f1+2)^0,f,c
  5755  001CBC  321C               	rrcf	(___ftmul@f1+1)^0,f,c
  5756  001CBE  321B               	rrcf	___ftmul@f1^0,f,c
  5757  001CC0  90D8               	bcf	status,0,c
  5758  001CC2  3227               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  5759  001CC4  3226               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  5760  001CC6  3225               	rrcf	___ftmul@f3_as_product^0,f,c
  5761  001CC8  2E28               	decfsz	___ftmul@cntr^0,f,c
  5762  001CCA  D7EE               	goto	l2345
  5763  001CCC  C025  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5764  001CD0  C026  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5765  001CD4  C027  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5766  001CD8  C024  F004         	movff	___ftmul@exp,___ftpack@exp
  5767  001CDC  C029  F005         	movff	___ftmul@sign,___ftpack@sign
  5768  001CE0  EC55  F00F         	call	___ftpack	;wreg free
  5769  001CE4  C001  F01B         	movff	?___ftpack,?___ftmul
  5770  001CE8  C002  F01C         	movff	?___ftpack+1,?___ftmul+1
  5771  001CEC  C003  F01D         	movff	?___ftpack+2,?___ftmul+2
  5772  001CF0  0012               	return		;funcret
  5773  001CF2                     __end_of___ftmul:
  5774                           	callstack 0
  5775                           
  5776 ;; *************** function ___ftdiv *****************
  5777 ;; Defined at:
  5778 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftdiv.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;  f1              3   11[COMRAM] float 
  5781 ;;  f2              3   14[COMRAM] float 
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  f3              3   21[COMRAM] float 
  5784 ;;  sign            1   25[COMRAM] unsigned char 
  5785 ;;  exp             1   24[COMRAM] unsigned char 
  5786 ;;  cntr            1   20[COMRAM] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  3   11[COMRAM] float 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5796 ;;      Params:         6       0       0       0       0       0       0       0       0
  5797 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5798 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5799 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5800 ;;Total ram usage:       15 bytes
  5801 ;; Hardware stack levels used: 1
  5802 ;; Hardware stack levels required when called: 1
  5803 ;; This function calls:
  5804 ;;		___ftpack
  5805 ;; This function is called by:
  5806 ;;		_DHT22_read
  5807 ;; This function uses a non-reentrant model
  5808 ;;
  5809                           
  5810                           	psect	text31
  5811  001CF2                     __ptext31:
  5812                           	callstack 0
  5813  001CF2                     ___ftdiv:
  5814                           	callstack 28
  5815                           
  5816                           ;incstack = 0
  5817  001CF2  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  5818  001CF6  6A13               	clrf	(??___ftdiv+1)^0,c
  5819  001CF8  6A14               	clrf	(??___ftdiv+2)^0,c
  5820  001CFA  340D               	rlcf	(___ftdiv@f1+1)^0,w,c
  5821  001CFC  3612               	rlcf	??___ftdiv^0,f,c
  5822  001CFE  E301               	bnc	u2631
  5823  001D00  8013               	bsf	(??___ftdiv+1)^0,0,c
  5824  001D02                     u2631:
  5825  001D02  5012               	movf	??___ftdiv^0,w,c
  5826  001D04  6E19               	movwf	___ftdiv@exp^0,c
  5827  001D06  5019               	movf	___ftdiv@exp^0,w,c
  5828  001D08  A4D8               	btfss	status,2,c
  5829  001D0A  D007               	goto	l2697
  5830  001D0C  0E00               	movlw	0
  5831  001D0E  6E0C               	movwf	?___ftdiv^0,c
  5832  001D10  0E00               	movlw	0
  5833  001D12  6E0D               	movwf	(?___ftdiv+1)^0,c
  5834  001D14  0E00               	movlw	0
  5835  001D16  6E0E               	movwf	(?___ftdiv+2)^0,c
  5836  001D18  0012               	return	
  5837  001D1A                     l2697:
  5838  001D1A  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  5839  001D1E  6A13               	clrf	(??___ftdiv+1)^0,c
  5840  001D20  6A14               	clrf	(??___ftdiv+2)^0,c
  5841  001D22  3410               	rlcf	(___ftdiv@f2+1)^0,w,c
  5842  001D24  3612               	rlcf	??___ftdiv^0,f,c
  5843  001D26  E301               	bnc	u2651
  5844  001D28  8013               	bsf	(??___ftdiv+1)^0,0,c
  5845  001D2A                     u2651:
  5846  001D2A  5012               	movf	??___ftdiv^0,w,c
  5847  001D2C  6E1A               	movwf	___ftdiv@sign^0,c
  5848  001D2E  501A               	movf	___ftdiv@sign^0,w,c
  5849  001D30  A4D8               	btfss	status,2,c
  5850  001D32  D007               	goto	l2703
  5851  001D34  0E00               	movlw	0
  5852  001D36  6E0C               	movwf	?___ftdiv^0,c
  5853  001D38  0E00               	movlw	0
  5854  001D3A  6E0D               	movwf	(?___ftdiv+1)^0,c
  5855  001D3C  0E00               	movlw	0
  5856  001D3E  6E0E               	movwf	(?___ftdiv+2)^0,c
  5857  001D40  0012               	return	
  5858  001D42                     l2703:
  5859  001D42  0E00               	movlw	0
  5860  001D44  6E16               	movwf	___ftdiv@f3^0,c
  5861  001D46  0E00               	movlw	0
  5862  001D48  6E17               	movwf	(___ftdiv@f3+1)^0,c
  5863  001D4A  0E00               	movlw	0
  5864  001D4C  6E18               	movwf	(___ftdiv@f3+2)^0,c
  5865  001D4E  501A               	movf	___ftdiv@sign^0,w,c
  5866  001D50  0F89               	addlw	137
  5867  001D52  5E19               	subwf	___ftdiv@exp^0,f,c
  5868  001D54  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  5869  001D58  5011               	movf	(___ftdiv@f2+2)^0,w,c
  5870  001D5A  1A1A               	xorwf	___ftdiv@sign^0,f,c
  5871  001D5C  0E80               	movlw	128
  5872  001D5E  161A               	andwf	___ftdiv@sign^0,f,c
  5873  001D60  8E0D               	bsf	(___ftdiv@f1+1)^0,7,c
  5874  001D62  0EFF               	movlw	255
  5875  001D64  160C               	andwf	___ftdiv@f1^0,f,c
  5876  001D66  0EFF               	movlw	255
  5877  001D68  160D               	andwf	(___ftdiv@f1+1)^0,f,c
  5878  001D6A  0E00               	movlw	0
  5879  001D6C  160E               	andwf	(___ftdiv@f1+2)^0,f,c
  5880  001D6E  8E10               	bsf	(___ftdiv@f2+1)^0,7,c
  5881  001D70  0EFF               	movlw	255
  5882  001D72  160F               	andwf	___ftdiv@f2^0,f,c
  5883  001D74  0EFF               	movlw	255
  5884  001D76  1610               	andwf	(___ftdiv@f2+1)^0,f,c
  5885  001D78  0E00               	movlw	0
  5886  001D7A  1611               	andwf	(___ftdiv@f2+2)^0,f,c
  5887  001D7C  0E18               	movlw	24
  5888  001D7E  6E15               	movwf	___ftdiv@cntr^0,c
  5889  001D80                     l2723:
  5890  001D80  90D8               	bcf	status,0,c
  5891  001D82  3616               	rlcf	___ftdiv@f3^0,f,c
  5892  001D84  3617               	rlcf	(___ftdiv@f3+1)^0,f,c
  5893  001D86  3618               	rlcf	(___ftdiv@f3+2)^0,f,c
  5894  001D88  500F               	movf	___ftdiv@f2^0,w,c
  5895  001D8A  5C0C               	subwf	___ftdiv@f1^0,w,c
  5896  001D8C  5010               	movf	(___ftdiv@f2+1)^0,w,c
  5897  001D8E  580D               	subwfb	(___ftdiv@f1+1)^0,w,c
  5898  001D90  5011               	movf	(___ftdiv@f2+2)^0,w,c
  5899  001D92  580E               	subwfb	(___ftdiv@f1+2)^0,w,c
  5900  001D94  A0D8               	btfss	status,0,c
  5901  001D96  D007               	goto	l609
  5902  001D98  500F               	movf	___ftdiv@f2^0,w,c
  5903  001D9A  5E0C               	subwf	___ftdiv@f1^0,f,c
  5904  001D9C  5010               	movf	(___ftdiv@f2+1)^0,w,c
  5905  001D9E  5A0D               	subwfb	(___ftdiv@f1+1)^0,f,c
  5906  001DA0  5011               	movf	(___ftdiv@f2+2)^0,w,c
  5907  001DA2  5A0E               	subwfb	(___ftdiv@f1+2)^0,f,c
  5908  001DA4  8016               	bsf	___ftdiv@f3^0,0,c
  5909  001DA6                     l609:
  5910  001DA6  90D8               	bcf	status,0,c
  5911  001DA8  360C               	rlcf	___ftdiv@f1^0,f,c
  5912  001DAA  360D               	rlcf	(___ftdiv@f1+1)^0,f,c
  5913  001DAC  360E               	rlcf	(___ftdiv@f1+2)^0,f,c
  5914  001DAE  2E15               	decfsz	___ftdiv@cntr^0,f,c
  5915  001DB0  D7E7               	goto	l2723
  5916  001DB2  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  5917  001DB6  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5918  001DBA  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5919  001DBE  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  5920  001DC2  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  5921  001DC6  EC55  F00F         	call	___ftpack	;wreg free
  5922  001DCA  C001  F00C         	movff	?___ftpack,?___ftdiv
  5923  001DCE  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  5924  001DD2  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  5925  001DD6  0012               	return		;funcret
  5926  001DD8                     __end_of___ftdiv:
  5927                           	callstack 0
  5928                           
  5929 ;; *************** function ___ftpack *****************
  5930 ;; Defined at:
  5931 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\float.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;  arg             3    0[COMRAM] unsigned um
  5934 ;;  exp             1    3[COMRAM] unsigned char 
  5935 ;;  sign            1    4[COMRAM] unsigned char 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;		None
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  3    0[COMRAM] float 
  5940 ;; Registers used:
  5941 ;;		wreg, status,2, status,0
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5947 ;;      Params:         5       0       0       0       0       0       0       0       0
  5948 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5949 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5950 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5951 ;;Total ram usage:        8 bytes
  5952 ;; Hardware stack levels used: 1
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		___ftadd
  5957 ;;		___ftdiv
  5958 ;;		___ftmul
  5959 ;;		___lltoft
  5960 ;;		___lwtoft
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text32
  5965  001EAA                     __ptext32:
  5966                           	callstack 0
  5967  001EAA                     ___ftpack:
  5968                           	callstack 27
  5969                           
  5970                           ;incstack = 0
  5971  001EAA  5004               	movf	___ftpack@exp^0,w,c
  5972  001EAC  B4D8               	btfsc	status,2,c
  5973  001EAE  D005               	goto	u1830
  5974  001EB0  5001               	movf	___ftpack@arg^0,w,c
  5975  001EB2  1002               	iorwf	(___ftpack@arg+1)^0,w,c
  5976  001EB4  1003               	iorwf	(___ftpack@arg+2)^0,w,c
  5977  001EB6  A4D8               	btfss	status,2,c
  5978  001EB8  D00C               	goto	l2203
  5979  001EBA                     u1830:
  5980  001EBA  0E00               	movlw	0
  5981  001EBC  6E01               	movwf	?___ftpack^0,c
  5982  001EBE  0E00               	movlw	0
  5983  001EC0  6E02               	movwf	(?___ftpack+1)^0,c
  5984  001EC2  0E00               	movlw	0
  5985  001EC4  6E03               	movwf	(?___ftpack+2)^0,c
  5986  001EC6  0012               	return	
  5987  001EC8                     l2201:
  5988  001EC8  2A04               	incf	___ftpack@exp^0,f,c
  5989  001ECA  90D8               	bcf	status,0,c
  5990  001ECC  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  5991  001ECE  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  5992  001ED0  3201               	rrcf	___ftpack@arg^0,f,c
  5993  001ED2                     l2203:
  5994  001ED2  0E00               	movlw	0
  5995  001ED4  1401               	andwf	___ftpack@arg^0,w,c
  5996  001ED6  6E06               	movwf	??___ftpack^0,c
  5997  001ED8  0E00               	movlw	0
  5998  001EDA  1402               	andwf	(___ftpack@arg+1)^0,w,c
  5999  001EDC  6E07               	movwf	(??___ftpack+1)^0,c
  6000  001EDE  0EFE               	movlw	254
  6001  001EE0  1403               	andwf	(___ftpack@arg+2)^0,w,c
  6002  001EE2  6E08               	movwf	(??___ftpack+2)^0,c
  6003  001EE4  5006               	movf	??___ftpack^0,w,c
  6004  001EE6  1007               	iorwf	(??___ftpack+1)^0,w,c
  6005  001EE8  1008               	iorwf	(??___ftpack+2)^0,w,c
  6006  001EEA  B4D8               	btfsc	status,2,c
  6007  001EEC  D00C               	goto	l2209
  6008  001EEE  D7EC               	goto	l2201
  6009  001EF0                     l2205:
  6010  001EF0  2A04               	incf	___ftpack@exp^0,f,c
  6011  001EF2  0E01               	movlw	1
  6012  001EF4  2601               	addwf	___ftpack@arg^0,f,c
  6013  001EF6  0E00               	movlw	0
  6014  001EF8  2202               	addwfc	(___ftpack@arg+1)^0,f,c
  6015  001EFA  0E00               	movlw	0
  6016  001EFC  2203               	addwfc	(___ftpack@arg+2)^0,f,c
  6017  001EFE  90D8               	bcf	status,0,c
  6018  001F00  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  6019  001F02  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  6020  001F04  3201               	rrcf	___ftpack@arg^0,f,c
  6021  001F06                     l2209:
  6022  001F06  0E00               	movlw	0
  6023  001F08  1401               	andwf	___ftpack@arg^0,w,c
  6024  001F0A  6E06               	movwf	??___ftpack^0,c
  6025  001F0C  0E00               	movlw	0
  6026  001F0E  1402               	andwf	(___ftpack@arg+1)^0,w,c
  6027  001F10  6E07               	movwf	(??___ftpack+1)^0,c
  6028  001F12  0EFF               	movlw	255
  6029  001F14  1403               	andwf	(___ftpack@arg+2)^0,w,c
  6030  001F16  6E08               	movwf	(??___ftpack+2)^0,c
  6031  001F18  5006               	movf	??___ftpack^0,w,c
  6032  001F1A  1007               	iorwf	(??___ftpack+1)^0,w,c
  6033  001F1C  1008               	iorwf	(??___ftpack+2)^0,w,c
  6034  001F1E  B4D8               	btfsc	status,2,c
  6035  001F20  D006               	goto	l2213
  6036  001F22  D7E6               	goto	l2205
  6037  001F24                     l2211:
  6038  001F24  0604               	decf	___ftpack@exp^0,f,c
  6039  001F26  90D8               	bcf	status,0,c
  6040  001F28  3601               	rlcf	___ftpack@arg^0,f,c
  6041  001F2A  3602               	rlcf	(___ftpack@arg+1)^0,f,c
  6042  001F2C  3603               	rlcf	(___ftpack@arg+2)^0,f,c
  6043  001F2E                     l2213:
  6044  001F2E  BE02               	btfsc	(___ftpack@arg+1)^0,7,c
  6045  001F30  D003               	goto	u1870
  6046  001F32  0E02               	movlw	2
  6047  001F34  6004               	cpfslt	___ftpack@exp^0,c
  6048  001F36  D7F6               	goto	l2211
  6049  001F38                     u1870:
  6050  001F38  A004               	btfss	___ftpack@exp^0,0,c
  6051  001F3A  9E02               	bcf	(___ftpack@arg+1)^0,7,c
  6052  001F3C  90D8               	bcf	status,0,c
  6053  001F3E  3204               	rrcf	___ftpack@exp^0,f,c
  6054  001F40  5004               	movf	___ftpack@exp^0,w,c
  6055  001F42  1203               	iorwf	(___ftpack@arg+2)^0,f,c
  6056  001F44  5005               	movf	___ftpack@sign^0,w,c
  6057  001F46  A4D8               	btfss	status,2,c
  6058  001F48  8E03               	bsf	(___ftpack@arg+2)^0,7,c
  6059  001F4A  C001  F001         	movff	___ftpack@arg,?___ftpack
  6060  001F4E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6061  001F52  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6062  001F56  0012               	return		;funcret
  6063  001F58                     __end_of___ftpack:
  6064                           	callstack 0
  6065                           
  6066 ;; *************** function _DHT22_init *****************
  6067 ;; Defined at:
  6068 ;;		line 8 in file "DHT22.h"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		None
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6085 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6086 ;;Total ram usage:        0 bytes
  6087 ;; Hardware stack levels used: 1
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_main
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text33
  6096  002548                     __ptext33:
  6097                           	callstack 0
  6098  002548                     _DHT22_init:
  6099                           	callstack 30
  6100                           
  6101                           ;DHT22.h: 9: TRISCbits.TRISC2 = 0;
  6102                           
  6103                           ;incstack = 0
  6104  002548  9494               	bcf	148,2,c	;volatile
  6105                           
  6106                           ;DHT22.h: 10: LATCbits.LATC2 = 1;
  6107  00254A  848B               	bsf	139,2,c	;volatile
  6108  00254C  0012               	return		;funcret
  6109  00254E                     __end_of_DHT22_init:
  6110                           	callstack 0
  6111                           
  6112                           	psect	rparam
  6113  0000                     
  6114                           	psect	idloc
  6115                           
  6116                           ;Config register IDLOC0 @ 0x200000
  6117                           ;	unspecified, using default values
  6118  200000                     	org	2097152
  6119  200000  FF                 	db	255
  6120                           
  6121                           ;Config register IDLOC1 @ 0x200001
  6122                           ;	unspecified, using default values
  6123  200001                     	org	2097153
  6124  200001  FF                 	db	255
  6125                           
  6126                           ;Config register IDLOC2 @ 0x200002
  6127                           ;	unspecified, using default values
  6128  200002                     	org	2097154
  6129  200002  FF                 	db	255
  6130                           
  6131                           ;Config register IDLOC3 @ 0x200003
  6132                           ;	unspecified, using default values
  6133  200003                     	org	2097155
  6134  200003  FF                 	db	255
  6135                           
  6136                           ;Config register IDLOC4 @ 0x200004
  6137                           ;	unspecified, using default values
  6138  200004                     	org	2097156
  6139  200004  FF                 	db	255
  6140                           
  6141                           ;Config register IDLOC5 @ 0x200005
  6142                           ;	unspecified, using default values
  6143  200005                     	org	2097157
  6144  200005  FF                 	db	255
  6145                           
  6146                           ;Config register IDLOC6 @ 0x200006
  6147                           ;	unspecified, using default values
  6148  200006                     	org	2097158
  6149  200006  FF                 	db	255
  6150                           
  6151                           ;Config register IDLOC7 @ 0x200007
  6152                           ;	unspecified, using default values
  6153  200007                     	org	2097159
  6154  200007  FF                 	db	255
  6155                           
  6156                           	psect	config
  6157                           
  6158                           ;Config register CONFIG1L @ 0x300000
  6159                           ;	PLL Prescaler Selection bits
  6160                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  6161                           ;	System Clock Postscaler Selection bits
  6162                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  6163                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  6164                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  6165  300000                     	org	3145728
  6166  300000  00                 	db	0
  6167                           
  6168                           ;Config register CONFIG1H @ 0x300001
  6169                           ;	Oscillator Selection bits
  6170                           ;	FOSC = HS, HS oscillator (HS)
  6171                           ;	Fail-Safe Clock Monitor Enable bit
  6172                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  6173                           ;	Internal/External Oscillator Switchover bit
  6174                           ;	IESO = OFF, Oscillator Switchover mode disabled
  6175  300001                     	org	3145729
  6176  300001  0C                 	db	12
  6177                           
  6178                           ;Config register CONFIG2L @ 0x300002
  6179                           ;	Power-up Timer Enable bit
  6180                           ;	PWRT = ON, PWRT enabled
  6181                           ;	Brown-out Reset Enable bits
  6182                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  6183                           ;	Brown-out Reset Voltage bits
  6184                           ;	BORV = 3, Minimum setting 2.05V
  6185                           ;	USB Voltage Regulator Enable bit
  6186                           ;	VREGEN = OFF, USB voltage regulator disabled
  6187  300002                     	org	3145730
  6188  300002  18                 	db	24
  6189                           
  6190                           ;Config register CONFIG2H @ 0x300003
  6191                           ;	Watchdog Timer Enable bit
  6192                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6193                           ;	Watchdog Timer Postscale Select bits
  6194                           ;	WDTPS = 32768, 1:32768
  6195  300003                     	org	3145731
  6196  300003  1E                 	db	30
  6197                           
  6198                           ; Padding undefined space
  6199  300004                     	org	3145732
  6200  300004  FF                 	db	255
  6201                           
  6202                           ;Config register CONFIG3H @ 0x300005
  6203                           ;	CCP2 MUX bit
  6204                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  6205                           ;	PORTB A/D Enable bit
  6206                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  6207                           ;	Low-Power Timer 1 Oscillator Enable bit
  6208                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  6209                           ;	MCLR Pin Enable bit
  6210                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  6211  300005                     	org	3145733
  6212  300005  83                 	db	131
  6213                           
  6214                           ;Config register CONFIG4L @ 0x300006
  6215                           ;	Stack Full/Underflow Reset Enable bit
  6216                           ;	STVREN = ON, Stack full/underflow will cause Reset
  6217                           ;	Single-Supply ICSP Enable bit
  6218                           ;	LVP = OFF, Single-Supply ICSP disabled
  6219                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  6220                           ;	ICPRT = OFF, ICPORT disabled
  6221                           ;	Extended Instruction Set Enable bit
  6222                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  6223                           ;	Background Debugger Enable bit
  6224                           ;	DEBUG = 0x1, unprogrammed default
  6225  300006                     	org	3145734
  6226  300006  81                 	db	129
  6227                           
  6228                           ; Padding undefined space
  6229  300007                     	org	3145735
  6230  300007  FF                 	db	255
  6231                           
  6232                           ;Config register CONFIG5L @ 0x300008
  6233                           ;	Code Protection bit
  6234                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  6235                           ;	Code Protection bit
  6236                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  6237                           ;	Code Protection bit
  6238                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  6239                           ;	Code Protection bit
  6240                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  6241  300008                     	org	3145736
  6242  300008  0F                 	db	15
  6243                           
  6244                           ;Config register CONFIG5H @ 0x300009
  6245                           ;	Boot Block Code Protection bit
  6246                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  6247                           ;	Data EEPROM Code Protection bit
  6248                           ;	CPD = OFF, Data EEPROM is not code-protected
  6249  300009                     	org	3145737
  6250  300009  C0                 	db	192
  6251                           
  6252                           ;Config register CONFIG6L @ 0x30000A
  6253                           ;	Write Protection bit
  6254                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  6255                           ;	Write Protection bit
  6256                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  6257                           ;	Write Protection bit
  6258                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  6259                           ;	Write Protection bit
  6260                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  6261  30000A                     	org	3145738
  6262  30000A  0F                 	db	15
  6263                           
  6264                           ;Config register CONFIG6H @ 0x30000B
  6265                           ;	Configuration Register Write Protection bit
  6266                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  6267                           ;	Boot Block Write Protection bit
  6268                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  6269                           ;	Data EEPROM Write Protection bit
  6270                           ;	WRTD = OFF, Data EEPROM is not write-protected
  6271  30000B                     	org	3145739
  6272  30000B  E0                 	db	224
  6273                           
  6274                           ;Config register CONFIG7L @ 0x30000C
  6275                           ;	Table Read Protection bit
  6276                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6277                           ;	Table Read Protection bit
  6278                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6279                           ;	Table Read Protection bit
  6280                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6281                           ;	Table Read Protection bit
  6282                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6283  30000C                     	org	3145740
  6284  30000C  0F                 	db	15
  6285                           
  6286                           ;Config register CONFIG7H @ 0x30000D
  6287                           ;	Boot Block Table Read Protection bit
  6288                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  6289  30000D                     	org	3145741
  6290  30000D  40                 	db	64
  6291                           tosu	equ	0xFFF
  6292                           tosh	equ	0xFFE
  6293                           tosl	equ	0xFFD
  6294                           stkptr	equ	0xFFC
  6295                           pclatu	equ	0xFFB
  6296                           pclath	equ	0xFFA
  6297                           pcl	equ	0xFF9
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           prodh	equ	0xFF4
  6303                           prodl	equ	0xFF3
  6304                           indf0	equ	0xFEF
  6305                           postinc0	equ	0xFEE
  6306                           postdec0	equ	0xFED
  6307                           preinc0	equ	0xFEC
  6308                           plusw0	equ	0xFEB
  6309                           fsr0h	equ	0xFEA
  6310                           fsr0l	equ	0xFE9
  6311                           wreg	equ	0xFE8
  6312                           indf1	equ	0xFE7
  6313                           postinc1	equ	0xFE6
  6314                           postdec1	equ	0xFE5
  6315                           preinc1	equ	0xFE4
  6316                           plusw1	equ	0xFE3
  6317                           fsr1h	equ	0xFE2
  6318                           fsr1l	equ	0xFE1
  6319                           bsr	equ	0xFE0
  6320                           indf2	equ	0xFDF
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           preinc2	equ	0xFDC
  6324                           plusw2	equ	0xFDB
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8

Data Sizes:
    Strings     34
    Constant    118
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     89      89
    BANK0           160     25      33
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 8
		 -> LCD_integer@st(COMRAM[8]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[14]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 8
		 -> LCD_integer@st(COMRAM[8]), 

    LCD_printf@dato	PTR unsigned char  size(2) Largest target is 8
		 -> LCD_integer@st(COMRAM[8]), STR_3(CODE[6]), 

    DHT22_read@dht_humedad	PTR float  size(2) Largest target is 3
		 -> main@humedad(COMRAM[3]), 

    DHT22_read@dht_temperatura	PTR float  size(2) Largest target is 3
		 -> main@temperatura(COMRAM[3]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _putch->_LCD_dato
    _fround->___ftmul
    ___wmul->___lwdiv
    ___lwdiv->___lwmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _LCD_segunda_linea->_LCD_cmd
    _LCD_printf->_LCD_dato
    _LCD_dato->_LCD_write
    _LCD_init->_LCD_cmd
    _LCD_clear->_LCD_cmd
    _LCD_cmd->_LCD_write
    _DHT22_read->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   57854
                                             80 COMRAM     9     9      0
                         _DHT22_init
                         _DHT22_read
                          _LCD_clear
                           _LCD_init
                         _LCD_printf
                  _LCD_segunda_linea
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   43465
                                             69 COMRAM    11     6      5
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3    8630
                                             41 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1208
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1364
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     243
                                              2 COMRAM     1     1      0
                           _LCD_dato
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3    8852
                                             41 COMRAM    10     7      3
                            ___ftmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1375
                                             12 COMRAM     6     2      4
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     743
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     874
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3028
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             48 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4498
                                             63 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4153
                                             51 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _LCD_segunda_linea                                    0     0      0     221
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_printf                                           2     0      2     418
                                              2 COMRAM     2     0      2
                           _LCD_dato
 ---------------------------------------------------------------------------------
 (3) _LCD_dato                                             1     1      0     221
                                              1 COMRAM     1     1      0
                          _LCD_write
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0     221
                                              2 COMRAM     2     2      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            1     1      0     221
                                              2 COMRAM     1     1      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_cmd                                              1     1      0     221
                                              1 COMRAM     1     1      0
                          _LCD_write
 ---------------------------------------------------------------------------------
 (4) _LCD_write                                            1     1      0     199
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DHT22_read                                          18    14      4   13191
                                             41 COMRAM    18    14      4
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3133
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5615
                                             26 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3745
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2883
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _DHT22_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DHT22_init
   _DHT22_read
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftdiv (ARG)
       ___ftpack (ARG)
       ___lwdiv (ARG)
         ___lwmod (ARG)
       ___lwmod (ARG)
       ___lwtoft (ARG)
       ___wmul (ARG)
         ___lwdiv (ARG)
         ___lwmod (ARG)
     ___lwtoft
   _LCD_clear
     _LCD_cmd
       _LCD_write
   _LCD_init
     _LCD_cmd
   _LCD_printf
     _LCD_dato
       _LCD_write
   _LCD_segunda_linea
     _LCD_cmd
   _printf
     ___awdiv
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___ftmul
         ___lwdiv
         ___lwmod
         ___wmul
     ___ftge
     ___ftmul
     ___ftneg
     ___ftsub
       ___ftadd
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
       _scale (ARG)
         ___awdiv
         ___awmod
         ___ftmul
     ___lldiv
     ___llmod
     ___lltoft
     ___wmul
     __div_to_l_
     __tdiv_to_l_
     _fround
     _isdigit
     _putch
       _LCD_dato
     _scale

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      21       5       20.6%
BITBIGSFRh          6A      0       0      20        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     59      59       1       93.7%
BITBIGSFRlll        22      0       0      23        0.0%
BITBIGSFRllh         8      0       0      22        0.0%
BITBIGSFRlh          7      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7A      24        0.0%
DATA                 0      0      7A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Mar 19 19:38:37 2022

                       l31 16FA                         l40 1824                         l35 1724  
                       l70 21D2                         l80 2210                         l72 21DC  
                       l81 2212                         l82 221A                         l74 21E6  
                       l83 221C                         l84 2224                         l76 21F0  
                       l85 2226                         l77 21F2                         l78 2206  
                       l79 2208               ___awdiv@sign 000C        ___wmul@multiplicand 000F  
             ___ftadd@exp1 003F               ___ftadd@exp2 003E               ___ftadd@sign 003D  
                      l224 0E5E                        l278 20D2                        l616 1A8C  
                      l609 1DA6                        l617 1AB4                        l648 24A2  
                      l764 2340                        l693 228A                        l598 199A  
                      l774 241C               ___awmod@sign 0006                ?_LCD_printf 0003  
                      wreg 000FE8               ___ftdiv@cntr 0015            __end_of_LCD_cmd 2536  
             ___ftdiv@sign 001A                       l2201 1EC8                       l2211 1F24  
                     l2203 1ED2                       l2213 1F2E                       l2205 1EF0  
                     l3021 0B4E                       l3013 0AE8                       l3111 0E76  
                     l2209 1F06                       l2321 1C4E                       l2305 19E6  
                     l3121 0FA0                       l3105 0E62                       l3041 0C24  
                     l3025 0B74                       l2315 1C26                       l2171 21DE  
                     l3123 0FAC                       l3115 0EC8                       l3051 0C7C  
                     l3203 1FC6                       l2253 18DC                       l2413 2178  
                     l3061 0CE6                       l3037 0BFE                       l3029 0BB4  
                     l2335 1C80                       l2175 21E8                       l2167 21D4  
                     l2247 18B4                       l3143 101C                       l3135 0FDC  
                     l3127 0FBA                       l3055 0CE2                       l2345 1CA8  
                     l2433 21BE                       l2425 21A6                       l2417 2186  
                     l2409 216C                       l2513 11EE                       l3161 108C  
                     l3081 0D6C                       l3073 0D46                       l3129 0FC4  
                     l2339 1C90                       l2275 192E                       l2443 230E  
                     l2371 2002                       l2419 218E                       l2531 139E  
                     l2523 12A2                       l3163 1094                       l3155 1060  
                     l3139 0FFC                       l2349 1CB8                       l2277 1938  
                     l2605 1AE6                       l2445 2316                       l2365 1FF2  
                     l2429 21B0                       l3157 1068                       l3149 103E  
                     l3093 0E20                       l3077 0D64                       l3173 10CC  
                     l2703 1D42                       l3183 2374                       l2295 19B6  
                     l2287 196C                       l2279 1942                       l2615 1B28  
                     l2607 1AF2                       l2455 2336                       l2471 2412  
                     l2463 23F2                       l2519 127E                       l3095 0E2C  
                     l3087 0D96                       l2289 1976                       l2801 1E70  
                     l2465 23FA                       l2377 2018                       l2393 204A  
                     l2537 142E                       l2723 1D80                       l3179 234C  
                     l2803 1E7C                       l2643 1BA6                       l2635 1B76  
                     l2491 15A0                       l2379 2020                       l3099 0E3A  
                     l2741 243C                       l2549 24EA                       l2397 2058  
                     l2389 2040                       l3189 1F60                       l2911 17E8  
                     l2831 22A2                       l2655 1BC2                       l2559 1A38  
                     l3199 1FB6                       l2753 2128                       l2809 1E98  
                     l2825 227C                       l2817 2248                       l2833 22AE  
                     l2665 1BDA                       l2675 2084                       l2819 2254  
                     l2667 1BE6                       l2659 1BD2                       l2595 1ACE  
                     l2499 1670                       l2749 2106                       l2773 1E04  
                     l2677 2090                       l2863 16DA                       l2759 2154  
                     l2791 1E58                       l2687 20C4                       l2599 1ADE  
                     l2943 08BA                       l2697 1D1A                       l2881 16F2  
                     l2859 16D6                       l2795 1E68                       l2963 096A  
                     l2971 09CA                       l2939 08A8                       l2981 0A00  
                     l2949 08E8                       l2975 09D8                       l2969 09B4  
                     l2987 0A14                       l2979 09DC                       l2997 0A56  
                     STR_1 0885                       STR_2 0877                       STR_3 0893  
                     u2000 190C                       u2111 1C0E                       u2040 194A  
                     u2200 2024                       u2131 1C36                       u2300 231A  
                     u2070 197E                       u3120 0BFE                       u3040 0A8E  
                     u2330 23FE                       u3210 0E48                       u2260 2192  
                     u3220 0E58                       u3045 0A84                       u3150 0D1C  
                     u3400 2394                       u2520 1AF8                       u3080 0B86  
                     u2441 1A1C                       u2610 2094                       u2530 1B16  
                     u2450 1A26                       u3170 0D5A                       u3090 0BC6  
                     u3180 0D7A                       u1901 1874                       u2461 1A48  
                     u1830 1EBA                       u3350 109C                       u2631 1D02  
                     u3407 238A                       u1911 1888                       u3360 10B2  
                     u2651 1D2A                       u2731 1DE8               printf@tmpval 006D  
                     u1940 18A6                       u2740 1DF2                       u2820 2258  
                     u3517 1FD0                       u1870 1F38                       u3390 236C  
                     u2750 1E22                       u2590 1BEC                       u3527 23BE  
                     u3537 2514                       u2850 16D2                       u1970 18CE  
                     u3547 222E                       u2755 1E1A                       u3557 16B8  
                     u3397 2362                       u2790 1E82                       u3567 16C6  
                     u3577 16DC                       u2970 0946                       u3587 16E8  
                     u3597 1700                       u2894 171C                       u2895 1718  
              main@humedad 0054                       _main 1F58               ___ftpack@arg 0001  
             ___ftpack@exp 0004                       fsr0h 000FEA                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr2l 000FD9                       prodh 000FF4                       prodl 000FF3  
                     start 0000      DHT22_read@dht_humedad 002C               ___ftmul@cntr 0028  
             ___param_bank 000000               ___ftmul@sign 0029               ___fttol@exp1 003F  
             ___fttol@lval 003B           __end_of_LCD_dato 252A           __end_of_LCD_init 23E4  
                    ?_main 0001            __end_of___awdiv 2062            __end_of___ftadd 1A0C  
          __end_of___awmod 21C8            __end_of___ftdiv 1DD8            __end_of___ftneg 24B0  
          __end_of___lldiv 20E4            __end_of___ftmul 1CF2            ___awdiv@divisor 0009  
          __end_of___llmod 229C            __end_of___ftsub 2466            __end_of___fttol 1EAA  
          __end_of___lwdiv 234A            __end_of___lwmod 2426            ___awdiv@counter 000B  
           DHT22_read@bits 0033               ___lltoft@exp 0011            __end_of_dpowers 0877  
              LCD_cmd@dato 0002                      _scale 10EA            __end_of_isdigit 24F2  
            ___ftpack@sign 0005                      _putch 2536                      tablat 000FF5  
                    status 000FD8            __initialization 24F2               __end_of_main 1FDE  
                   ??_main 0051              ___fttol@sign1 003A              __activetblptr 000002  
                ??_LCD_cmd 0002          __end_of_LCD_clear 251E          __end_of_LCD_write 2236  
         ___llmod@dividend 0001                     ?_scale 002A           ___awdiv@dividend 0007  
                   ?_putch 0001           __end_of___ftpack 1F58           __end_of___lltoft 22F8  
         __end_of___lwtoft 24D4               ??_DHT22_init 0001               ??_DHT22_read 002E  
         __end_of__powers_ 0828                     ___ftge 20E4                     ___wmul 2466  
                ??___awdiv 000B                  ??___ftadd 003A                  ??___awmod 0005  
                ??___ftdiv 0012                  ??___ftneg 0004                  ??___lldiv 0009  
                ??___ftmul 0021                  ??___llmod 0009                  ??___ftsub 0046  
                ??___fttol 0035                  ??___lwdiv 000A                  ??___lwmod 0005  
                   _fround 1452                     clear_0 24F8           ___awdiv@quotient 000D  
          ___awmod@divisor 0003                     isa$std 000001            ___awmod@counter 0005  
                   _printf 089A      ___ftmul@f3_as_product 0025               LCD_dato@dato 0002  
                ??_isdigit 0001               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8             LCD_printf@dato 0003  
       __end_of_DHT22_init 254E         __end_of_DHT22_read 1864                 __accesstop 0060  
  __end_of__initialization 24FE                 ___ftadd@f1 0034                 ___ftadd@f2 0037  
               ___ftge@ff1 0001                  ?_LCD_dato 0001                 ___ftge@ff2 0004  
                ?_LCD_init 0001              ___rparam_used 000001                 ___ftdiv@f1 000C  
               ___ftdiv@f2 000F                 ___ftdiv@f3 0016                 ___ftneg@f1 0001  
               ___ftmul@f1 001B                 ___ftmul@f2 001E                 ___ftsub@f1 0040  
               ___ftsub@f2 0043                 ___fttol@f1 0031             __pcstackCOMRAM 0001  
               ___lltoft@c 0009              __end_of_scale 1452              __end_of_putch 2540  
    DHT22_read@rawhumidity 0030                 ___lwtoft@c 0009                 __div_to_l_ 1B0A  
             ??_LCD_printf 0005            __div_to_l_@exp1 000C            __div_to_l_@cntr 000B  
                  ??_scale 002D            __div_to_l_@quot 0007                    ??_putch 0003  
               __pbssBANK0 0079                 ??_LCD_dato 0002                 ??_LCD_init 0003  
            __div_to_l_@f1 0001              __div_to_l_@f2 0004   DHT22_read@rawtemperature 0038  
                  ?___ftge 0001         __end_of_LCD_printf 239C                    ?___wmul 000D  
                  ?_fround 002A                  ?___ftpack 0001                    ?_printf 0046  
                ?___lltoft 0009                  ?___lwtoft 0009                    _LCD_cmd 252A  
         DHT22_read@result 0032          __end_of__npowers_ 084F                    __Hparam 0000  
               _scale$1100 002D                    __Lparam 0000           LCD_integer@F3205 0079  
                  ___awdiv 1FDE                    ___ftadd 1864                    ___awmod 2158  
                  ___ftdiv 1CF2                    ___ftneg 248C                    ___lldiv 2062  
                  ___ftmul 1BFE                    ___llmod 2236                    ___ftsub 2426  
                  ___fttol 1DD8                    ___lwdiv 22F8                    ___lwmod 23E4  
             __psmallconst 0800                    __pcinit 24F2                 ??___ftpack 0006  
                  __ramtop 0800                 ??___lltoft 000D                    __ptext0 1F58  
                  __ptext1 089A                    __ptext2 10EA                    __ptext3 2158  
                  __ptext4 1FDE                    __ptext5 2536                    __ptext6 24D4  
                  __ptext7 1452                    __ptext8 2466                    __ptext9 23E4  
               ??___lwtoft 000C                ?__div_to_l_ 0001                    _dpowers 084F  
                  _isdigit 24D4           ___awmod@dividend 0001                  _LCD_clear 2508  
     end_of_initialization 24FE                  _LCD_write 21C8              __Lmediumconst 0000  
          ___lldiv@divisor 0005            ___lldiv@counter 000D                    printf@c 0078  
                  printf@f 0046                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE             __tdiv_to_l_@f1 0001             __tdiv_to_l_@f2 0004  
            ??__tdiv_to_l_ 0007                  _PORTCbits 000F82                  _TRISCbits 000F94  
                _TRISDbits 000F95                 ?_LCD_clear 0001                 ?_LCD_write 0001  
              ___ftdiv@exp 0019                printf@width 006B                 main@status 0053  
              ___ftmul@exp 0024             __end_of___ftge 2158             __end_of___wmul 248C  
           __end_of_fround 16B0             __end_of_printf 10EA        start_initialization 24F2  
      __end_of__tdiv_to_l_ 1B0A          _LCD_segunda_linea 2540         ?_LCD_segunda_linea 0001  
          ___llmod@divisor 0005            ___llmod@counter 0009        ??_LCD_segunda_linea 0003  
                 ??___ftge 0007                   ??___wmul 0011                   ??_fround 002D  
                 ??_printf 004B                 fround@prec 0033                   ?_LCD_cmd 0001  
            __pcstackBANK0 0060  __end_of_LCD_segunda_linea 2548                ??_LCD_clear 0003  
              ??_LCD_write 0001           ___lwdiv@dividend 0006              LCD_write@dato 0001  
                 ?___awdiv 0007                   ?___ftadd 0034                   ?___awmod 0001  
                 ?___ftdiv 000C                   ?___ftneg 0001                   ?___lldiv 0001  
                 ?___ftmul 001B                   ?___llmod 0001                   ?___ftsub 0040  
                __npowers_ 0828                   ?___fttol 0031                   ?___lwdiv 0006  
                 ?___lwmod 0001  DHT22_read@dht_temperatura 002A                __tdiv_to_l_ 1A0C  
             ??__div_to_l_ 0007                __smallconst 0800                   ?_isdigit 0001  
         ___lwdiv@quotient 000A             ___wmul@product 0011                   _LATCbits 000F8B  
                 _LATDbits 000F8C                   _LCD_dato 251E                   _LCD_init 239C  
       __end_of__div_to_l_ 1BFE          ___wmul@multiplier 000D                 printf@flag 0069  
               printf@eexp 0071                 printf@fval 0073                 printf@prec 0076  
              DHT22_read@i 003A                DHT22_read@j 003B                   __Hrparam 0000  
               _DHT22_init 2548                 _DHT22_read 16B0                   __Lrparam 0000  
                 ___ftpack 1EAA                _fround$1098 0030                _fround$1099 002D  
                 ___lltoft 229C                _isdigit$881 0002                   ___lwtoft 24B0  
          ___lwdiv@divisor 0008            ___lwdiv@counter 000C                   __ptext10 22F8  
                 __ptext11 1A0C                   __ptext20 20E4                   __ptext12 1B0A  
                 __ptext21 2540                   __ptext13 229C                   __ptext30 1BFE  
                 __ptext22 234A                   __ptext14 2236                   __ptext31 1CF2  
                 __ptext23 251E                   __ptext15 2062                   __ptext32 1EAA  
                 __ptext24 239C                   __ptext16 1DD8                   __ptext33 2548  
                 __ptext25 2508                   __ptext17 2426                   __ptext26 252A  
                 __ptext18 1864                   __ptext27 21C8                   __ptext19 248C  
                 __ptext28 16B0                   __ptext29 24B0                   __powers_ 0801  
                 isa$xinst 000000                  printf@val 0065            main@temperatura 0057  
                putch@dato 0003                 _LCD_printf 234A                   isdigit@c 0003  
                 scale@scl 0030           __tdiv_to_l_@exp1 000F           __tdiv_to_l_@cntr 000E  
         __tdiv_to_l_@quot 000A           ___lwmod@dividend 0001           ___lldiv@dividend 0001  
              ?_DHT22_init 0001                ?_DHT22_read 002A                   printf@ap 0063  
             ?__tdiv_to_l_ 0001                _printf$1101 0060           ___lldiv@quotient 0009  
          ___lwmod@divisor 0003            ___lwmod@counter 0005  
