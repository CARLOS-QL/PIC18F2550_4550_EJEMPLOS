

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Mar 19 20:17:40 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F2550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _TXREG	set	4013
    57  0000                     _RCREG	set	4014
    58  0000                     _SPBRG	set	4015
    59  0000                     _TRISCbits	set	3988
    60  0000                     _PIR1bits	set	3998
    61  0000                     _RCSTAbits	set	4011
    62  0000                     _TXSTAbits	set	4012
    63                           
    64                           	psect	smallconst
    65  000800                     __psmallconst:
    66                           	callstack 0
    67  000800  00                 	db	0
    68  000801                     STR_1:
    69  000801  73                 	db	115	;'s'
    70  000802  75                 	db	117	;'u'
    71  000803  73                 	db	115	;'s'
    72  000804  63                 	db	99	;'c'
    73  000805  72                 	db	114	;'r'
    74  000806  69                 	db	105	;'i'
    75  000807  62                 	db	98	;'b'
    76  000808  65                 	db	101	;'e'
    77  000809  74                 	db	116	;'t'
    78  00080A  65                 	db	101	;'e'
    79  00080B  20                 	db	32
    80  00080C  61                 	db	97	;'a'
    81  00080D  6C                 	db	108	;'l'
    82  00080E  20                 	db	32
    83  00080F  63                 	db	99	;'c'
    84  000810  61                 	db	97	;'a'
    85  000811  6E                 	db	110	;'n'
    86  000812  61                 	db	97	;'a'
    87  000813  6C                 	db	108	;'l'
    88  000814  0A                 	db	10
    89  000815  0D                 	db	13
    90  000816  00                 	db	0
    91  000817                     STR_2:
    92  000817  6C                 	db	108	;'l'
    93  000818  65                 	db	101	;'e'
    94  000819  64                 	db	100	;'d'
    95  00081A  20                 	db	32
    96  00081B  65                 	db	101	;'e'
    97  00081C  6E                 	db	110	;'n'
    98  00081D  63                 	db	99	;'c'
    99  00081E  65                 	db	101	;'e'
   100  00081F  6E                 	db	110	;'n'
   101  000820  64                 	db	100	;'d'
   102  000821  69                 	db	105	;'i'
   103  000822  64                 	db	100	;'d'
   104  000823  6F                 	db	111	;'o'
   105  000824  20                 	db	32
   106  000825  0A                 	db	10
   107  000826  0D                 	db	13
   108  000827  00                 	db	0
   109  000828                     STR_3:
   110  000828  6C                 	db	108	;'l'
   111  000829  65                 	db	101	;'e'
   112  00082A  64                 	db	100	;'d'
   113  00082B  20                 	db	32
   114  00082C  61                 	db	97	;'a'
   115  00082D  70                 	db	112	;'p'
   116  00082E  61                 	db	97	;'a'
   117  00082F  67                 	db	103	;'g'
   118  000830  61                 	db	97	;'a'
   119  000831  64                 	db	100	;'d'
   120  000832  6F                 	db	111	;'o'
   121  000833  20                 	db	32
   122  000834  0A                 	db	10
   123  000835  0D                 	db	13
   124  000836  00                 	db	0
   125  000837  00                 	db	0	; dummy byte at the end
   126  0000                     
   127                           ; #config settings
   128                           
   129                           	psect	cinit
   130  000ABC                     __pcinit:
   131                           	callstack 0
   132  000ABC                     start_initialization:
   133                           	callstack 0
   134  000ABC                     __initialization:
   135                           	callstack 0
   136  000ABC                     end_of_initialization:
   137                           	callstack 0
   138  000ABC                     __end_of__initialization:
   139                           	callstack 0
   140  000ABC  0E00               	movlw	low (__Lsmallconst shr (0+16))
   141  000ABE  6EF8               	movwf	tblptru,c
   142  000AC0  0E08               	movlw	high __Lsmallconst
   143  000AC2  6EF7               	movwf	tblptrh,c
   144  000AC4  0100               	movlb	0
   145  000AC6  EFA2  F004         	goto	_main	;jump to C main() function
   146                           
   147                           	psect	cstackCOMRAM
   148  000001                     __pcstackCOMRAM:
   149                           	callstack 0
   150  000001                     ?___aldiv:
   151                           	callstack 0
   152  000001                     UART_write@dato:
   153                           	callstack 0
   154  000001                     ___aldiv@dividend:
   155                           	callstack 0
   156                           
   157                           ; 4 bytes @ 0x0
   158  000001                     	ds	1
   159  000002                     putch@dato:
   160                           	callstack 0
   161  000002                     UART_printf@cadena:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0x1
   165  000002                     	ds	1
   166  000003                     ?_printf:
   167                           	callstack 0
   168  000003                     printf@f:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0x2
   172  000003                     	ds	1
   173  000004                     
   174                           ; 1 bytes @ 0x3
   175  000004                     	ds	1
   176  000005                     printf@ap:
   177                           	callstack 0
   178  000005                     ___aldiv@divisor:
   179                           	callstack 0
   180                           
   181                           ; 4 bytes @ 0x4
   182  000005                     	ds	2
   183  000007                     printf@c:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x6
   187  000007                     	ds	2
   188  000009                     ___aldiv@counter:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x8
   192  000009                     	ds	1
   193  00000A                     ___aldiv@sign:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x9
   197  00000A                     	ds	1
   198  00000B                     ___aldiv@quotient:
   199                           	callstack 0
   200                           
   201                           ; 4 bytes @ 0xA
   202  00000B                     	ds	4
   203  00000F                     UART_init_baud@baudRate:
   204                           	callstack 0
   205                           
   206                           ; 4 bytes @ 0xE
   207  00000F                     	ds	4
   208  000013                     ??_UART_init_baud:
   209                           
   210                           ; 1 bytes @ 0x12
   211  000013                     	ds	4
   212  000017                     UART_init_baud@valor:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x16
   216  000017                     	ds	1
   217  000018                     main@dato_rx:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x17
   221  000018                     	ds	1
   222                           
   223 ;;
   224 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   225 ;;
   226 ;; *************** function _main *****************
   227 ;; Defined at:
   228 ;;		line 84 in file "main.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;  dato_rx         1   23[COMRAM] unsigned char 
   233 ;;  contador        2    0        int 
   234 ;; Return value:  Size  Location     Type
   235 ;;                  1    wreg      void 
   236 ;; Registers used:
   237 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   238 ;; Tracked objects:
   239 ;;		On entry : 0/0
   240 ;;		On exit  : 0/0
   241 ;;		Unchanged: 0/0
   242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   243 ;;      Params:         0       0       0       0       0       0       0       0       0
   244 ;;      Locals:         1       0       0       0       0       0       0       0       0
   245 ;;      Temps:          0       0       0       0       0       0       0       0       0
   246 ;;      Totals:         1       0       0       0       0       0       0       0       0
   247 ;;Total ram usage:        1 bytes
   248 ;; Hardware stack levels required when called: 3
   249 ;; This function calls:
   250 ;;		_UART_init_baud
   251 ;;		_UART_printf
   252 ;;		_UART_read
   253 ;;		_printf
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text0
   260  000944                     __ptext0:
   261                           	callstack 0
   262  000944                     _main:
   263                           	callstack 28
   264  000944                     
   265                           ;main.c: 88: UART_init_baud(19200);
   266  000944  0E00               	movlw	0
   267  000946  6E0F               	movwf	UART_init_baud@baudRate^0,c
   268  000948  0E4B               	movlw	75
   269  00094A  6E10               	movwf	(UART_init_baud@baudRate+1)^0,c
   270  00094C  0E00               	movlw	0
   271  00094E  6E11               	movwf	(UART_init_baud@baudRate+2)^0,c
   272  000950  0E00               	movlw	0
   273  000952  6E12               	movwf	(UART_init_baud@baudRate+3)^0,c
   274  000954  ECD7  F004         	call	_UART_init_baud	;wreg free
   275  000958                     
   276                           ;main.c: 90: printf("suscribete al canal\n\r");
   277  000958  0E01               	movlw	low STR_1
   278  00095A  6E03               	movwf	printf@f^0,c
   279  00095C  0E08               	movlw	high STR_1
   280  00095E  6E04               	movwf	(printf@f+1)^0,c
   281  000960  EC07  F005         	call	_printf	;wreg free
   282  000964                     l1030:
   283                           
   284                           ;main.c: 92: {;main.c: 93: char dato_rx = UART_read();
   285  000964  EC3D  F005         	call	_UART_read	;wreg free
   286  000968  6E18               	movwf	main@dato_rx^0,c
   287  00096A                     
   288                           ;main.c: 95: if(dato_rx == '1'){
   289  00096A  0E31               	movlw	49
   290  00096C  1818               	xorwf	main@dato_rx^0,w,c
   291  00096E  A4D8               	btfss	status,2,c
   292  000970  EFBC  F004         	goto	u241
   293  000974  EFBE  F004         	goto	u240
   294  000978                     u241:
   295  000978  EFC4  F004         	goto	l1036
   296  00097C                     u240:
   297  00097C                     
   298                           ;main.c: 96: UART_printf("led encendido \n\r");
   299  00097C  0E17               	movlw	low STR_2
   300  00097E  6E02               	movwf	UART_printf@cadena^0,c
   301  000980  0E08               	movlw	high STR_2
   302  000982  6E03               	movwf	(UART_printf@cadena+1)^0,c
   303  000984  EC22  F005         	call	_UART_printf	;wreg free
   304  000988                     l1036:
   305                           
   306                           ;main.c: 98: };main.c: 100: if(dato_rx == '0'){
   307  000988  0E30               	movlw	48
   308  00098A  1818               	xorwf	main@dato_rx^0,w,c
   309  00098C  A4D8               	btfss	status,2,c
   310  00098E  EFCB  F004         	goto	u251
   311  000992  EFCD  F004         	goto	u250
   312  000996                     u251:
   313  000996  EFB2  F004         	goto	l1030
   314  00099A                     u250:
   315  00099A                     
   316                           ;main.c: 101: UART_printf("led apagado \n\r");
   317  00099A  0E28               	movlw	low STR_3
   318  00099C  6E02               	movwf	UART_printf@cadena^0,c
   319  00099E  0E08               	movlw	high STR_3
   320  0009A0  6E03               	movwf	(UART_printf@cadena+1)^0,c
   321  0009A2  EC22  F005         	call	_UART_printf	;wreg free
   322  0009A6  EFB2  F004         	goto	l1030
   323  0009AA  EF00  F000         	goto	start
   324  0009AE                     __end_of_main:
   325                           	callstack 0
   326                           
   327 ;; *************** function _printf *****************
   328 ;; Defined at:
   329 ;;		line 477 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
   330 ;; Parameters:    Size  Location     Type
   331 ;;  f               2    2[COMRAM] PTR const unsigned char 
   332 ;;		 -> STR_1(22), 
   333 ;; Auto vars:     Size  Location     Type
   334 ;;  tmpval          4    0        struct .
   335 ;;  cp              3    0        PTR const unsigned char 
   336 ;;  ap              2    4[COMRAM] PTR void [1]
   337 ;;		 -> ?_printf(2), 
   338 ;;  len             2    0        unsigned int 
   339 ;;  val             2    0        unsigned int 
   340 ;;  c               1    6[COMRAM] unsigned char 
   341 ;;  flag            1    0        unsigned char 
   342 ;;  prec            1    0        char 
   343 ;; Return value:  Size  Location     Type
   344 ;;                  2    2[COMRAM] int 
   345 ;; Registers used:
   346 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   352 ;;      Params:         2       0       0       0       0       0       0       0       0
   353 ;;      Locals:         3       0       0       0       0       0       0       0       0
   354 ;;      Temps:          0       0       0       0       0       0       0       0       0
   355 ;;      Totals:         5       0       0       0       0       0       0       0       0
   356 ;;Total ram usage:        5 bytes
   357 ;; Hardware stack levels used: 1
   358 ;; Hardware stack levels required when called: 2
   359 ;; This function calls:
   360 ;;		_putch
   361 ;; This function is called by:
   362 ;;		_main
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           	psect	text1
   367  000A0E                     __ptext1:
   368                           	callstack 0
   369  000A0E                     _printf:
   370                           	callstack 28
   371  000A0E                     
   372                           ;doprnt.c: 479: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 521: signed char prec;;dopr
      +                          nt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c: 541: unsigned long vd;;d
      +                          oprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c: 545: unsigned int val;;do
      +                          prnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;doprnt.c: 550: *ap = __va_sta
      +                          rt();
   373  000A0E  0E05               	movlw	low (?_printf+2)
   374  000A10  6E05               	movwf	printf@ap^0,c
   375  000A12  0E00               	movlw	high (?_printf+2)
   376  000A14  6E06               	movwf	(printf@ap+1)^0,c
   377                           
   378                           ;doprnt.c: 553: while((c = *f++)) {
   379  000A16  EF10  F005         	goto	l1022
   380  000A1A                     l1020:
   381                           
   382                           ;doprnt.c: 557: {;doprnt.c: 558: (putch(c) );
   383  000A1A  5007               	movf	printf@c^0,w,c
   384  000A1C  EC65  F005         	call	_putch
   385  000A20                     l1022:
   386  000A20  C003  FFF6         	movff	printf@f,tblptrl
   387  000A24  C004  FFF7         	movff	printf@f+1,tblptrh
   388  000A28  4A03               	infsnz	printf@f^0,f,c
   389  000A2A  2A04               	incf	(printf@f+1)^0,f,c
   390  000A2C                     	if	0	;tblptru may be non-zero
   391  000A2C                     	endif
   392  000A2C                     	if	0	;tblptru may be non-zero
   393  000A2C                     	endif
   394  000A2C  0008               	tblrd		*
   395  000A2E  CFF5 F007          	movff	tablat,printf@c
   396  000A32  5007               	movf	printf@c^0,w,c
   397  000A34  A4D8               	btfss	status,2,c
   398  000A36  EF1F  F005         	goto	u231
   399  000A3A  EF21  F005         	goto	u230
   400  000A3E                     u231:
   401  000A3E  EF0D  F005         	goto	l1020
   402  000A42                     u230:
   403  000A42  0012               	return		;funcret
   404  000A44                     __end_of_printf:
   405                           	callstack 0
   406                           
   407 ;; *************** function _putch *****************
   408 ;; Defined at:
   409 ;;		line 88 in file "UART.h"
   410 ;; Parameters:    Size  Location     Type
   411 ;;  dato            1    wreg     unsigned char 
   412 ;; Auto vars:     Size  Location     Type
   413 ;;  dato            1    1[COMRAM] unsigned char 
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2, cstack
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   423 ;;      Params:         0       0       0       0       0       0       0       0       0
   424 ;;      Locals:         1       0       0       0       0       0       0       0       0
   425 ;;      Temps:          0       0       0       0       0       0       0       0       0
   426 ;;      Totals:         1       0       0       0       0       0       0       0       0
   427 ;;Total ram usage:        1 bytes
   428 ;; Hardware stack levels used: 1
   429 ;; Hardware stack levels required when called: 1
   430 ;; This function calls:
   431 ;;		_UART_write
   432 ;; This function is called by:
   433 ;;		_printf
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           	psect	text2
   438  000ACA                     __ptext2:
   439                           	callstack 0
   440  000ACA                     _putch:
   441                           	callstack 28
   442                           
   443                           ;incstack = 0
   444                           ;putch@dato stored from wreg
   445  000ACA  6E02               	movwf	putch@dato^0,c
   446  000ACC                     
   447                           ;UART.h: 90: UART_write(dato);
   448  000ACC  5002               	movf	putch@dato^0,w,c
   449  000ACE  EC53  F005         	call	_UART_write
   450  000AD2  0012               	return		;funcret
   451  000AD4                     __end_of_putch:
   452                           	callstack 0
   453                           
   454 ;; *************** function _UART_read *****************
   455 ;; Defined at:
   456 ;;		line 55 in file "UART.h"
   457 ;; Parameters:    Size  Location     Type
   458 ;;		None
   459 ;; Auto vars:     Size  Location     Type
   460 ;;		None
   461 ;; Return value:  Size  Location     Type
   462 ;;                  1    wreg      unsigned char 
   463 ;; Registers used:
   464 ;;		wreg, status,2
   465 ;; Tracked objects:
   466 ;;		On entry : 0/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   470 ;;      Params:         0       0       0       0       0       0       0       0       0
   471 ;;      Locals:         0       0       0       0       0       0       0       0       0
   472 ;;      Temps:          0       0       0       0       0       0       0       0       0
   473 ;;      Totals:         0       0       0       0       0       0       0       0       0
   474 ;;Total ram usage:        0 bytes
   475 ;; Hardware stack levels used: 1
   476 ;; This function calls:
   477 ;;		Nothing
   478 ;; This function is called by:
   479 ;;		_main
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text3
   484  000A7A                     __ptext3:
   485                           	callstack 0
   486  000A7A                     _UART_read:
   487                           	callstack 30
   488  000A7A                     
   489                           ;UART.h: 57: if (PIR1bits.RCIF == 1)
   490  000A7A  AA9E               	btfss	158,5,c	;volatile
   491  000A7C  EF42  F005         	goto	u91
   492  000A80  EF44  F005         	goto	u90
   493  000A84                     u91:
   494  000A84  EF51  F005         	goto	l898
   495  000A88                     u90:
   496  000A88                     
   497                           ;UART.h: 58: {;UART.h: 59: if(RCSTAbits.OERR)
   498  000A88  A2AB               	btfss	171,1,c	;volatile
   499  000A8A  EF49  F005         	goto	u101
   500  000A8E  EF4B  F005         	goto	u100
   501  000A92                     u101:
   502  000A92  EF4E  F005         	goto	l892
   503  000A96                     u100:
   504  000A96                     
   505                           ;UART.h: 60: {;UART.h: 61: RCSTAbits.CREN = 0;
   506  000A96  98AB               	bcf	171,4,c	;volatile
   507                           
   508                           ;UART.h: 62: __nop();
   509  000A98  F000               	nop	
   510                           
   511                           ;UART.h: 63: RCSTAbits.CREN = 1;
   512  000A9A  88AB               	bsf	171,4,c	;volatile
   513  000A9C                     l892:
   514                           
   515                           ;UART.h: 64: };UART.h: 65: return RCREG;
   516  000A9C  50AE               	movf	174,w,c	;volatile
   517  000A9E  EF52  F005         	goto	l30
   518  000AA2                     l898:
   519                           
   520                           ;UART.h: 68: else;UART.h: 69: return 0;
   521  000AA2  0E00               	movlw	0
   522  000AA4                     l30:
   523  000AA4  0012               	return		;funcret
   524  000AA6                     __end_of_UART_read:
   525                           	callstack 0
   526                           
   527 ;; *************** function _UART_printf *****************
   528 ;; Defined at:
   529 ;;		line 78 in file "UART.h"
   530 ;; Parameters:    Size  Location     Type
   531 ;;  cadena          2    1[COMRAM] PTR unsigned char 
   532 ;;		 -> STR_3(15), STR_2(17), 
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   544 ;;      Params:         2       0       0       0       0       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0       0       0       0       0
   546 ;;      Temps:          0       0       0       0       0       0       0       0       0
   547 ;;      Totals:         2       0       0       0       0       0       0       0       0
   548 ;;Total ram usage:        2 bytes
   549 ;; Hardware stack levels used: 1
   550 ;; Hardware stack levels required when called: 1
   551 ;; This function calls:
   552 ;;		_UART_write
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text4
   559  000A44                     __ptext4:
   560                           	callstack 0
   561  000A44                     _UART_printf:
   562                           	callstack 29
   563  000A44                     
   564                           ;UART.h: 80: while(*cadena !=0x00){
   565  000A44  EF2E  F005         	goto	l1016
   566  000A48                     l1012:
   567                           
   568                           ;UART.h: 81: UART_write(*cadena);
   569  000A48  C002  FFF6         	movff	UART_printf@cadena,tblptrl
   570  000A4C  C003  FFF7         	movff	UART_printf@cadena+1,tblptrh
   571  000A50                     	if	0	;tblptru may be non-zero
   572  000A50                     	endif
   573  000A50                     	if	0	;tblptru may be non-zero
   574  000A50                     	endif
   575  000A50  0008               	tblrd		*
   576  000A52  50F5               	movf	tablat,w,c
   577  000A54  EC53  F005         	call	_UART_write
   578  000A58                     
   579                           ;UART.h: 82: cadena++;
   580  000A58  4A02               	infsnz	UART_printf@cadena^0,f,c
   581  000A5A  2A03               	incf	(UART_printf@cadena+1)^0,f,c
   582  000A5C                     l1016:
   583  000A5C  C002  FFF6         	movff	UART_printf@cadena,tblptrl
   584  000A60  C003  FFF7         	movff	UART_printf@cadena+1,tblptrh
   585  000A64                     	if	0	;tblptru may be non-zero
   586  000A64                     	endif
   587  000A64                     	if	0	;tblptru may be non-zero
   588  000A64                     	endif
   589  000A64  0008               	tblrd		*
   590  000A66  50F5               	movf	tablat,w,c
   591  000A68  0900               	iorlw	0
   592  000A6A  A4D8               	btfss	status,2,c
   593  000A6C  EF3A  F005         	goto	u221
   594  000A70  EF3C  F005         	goto	u220
   595  000A74                     u221:
   596  000A74  EF24  F005         	goto	l1012
   597  000A78                     u220:
   598  000A78  0012               	return		;funcret
   599  000A7A                     __end_of_UART_printf:
   600                           	callstack 0
   601                           
   602 ;; *************** function _UART_write *****************
   603 ;; Defined at:
   604 ;;		line 72 in file "UART.h"
   605 ;; Parameters:    Size  Location     Type
   606 ;;  dato            1    wreg     unsigned char 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  dato            1    0[COMRAM] unsigned char 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      void 
   611 ;; Registers used:
   612 ;;		wreg
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   618 ;;      Params:         0       0       0       0       0       0       0       0       0
   619 ;;      Locals:         1       0       0       0       0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0       0       0       0       0
   621 ;;      Totals:         1       0       0       0       0       0       0       0       0
   622 ;;Total ram usage:        1 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; This function calls:
   625 ;;		Nothing
   626 ;; This function is called by:
   627 ;;		_UART_printf
   628 ;;		_putch
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text5
   633  000AA6                     __ptext5:
   634                           	callstack 0
   635  000AA6                     _UART_write:
   636                           	callstack 28
   637                           
   638                           ;incstack = 0
   639                           ;UART_write@dato stored from wreg
   640  000AA6  6E01               	movwf	UART_write@dato^0,c
   641  000AA8                     
   642                           ;UART.h: 74: TXREG = dato;
   643  000AA8  C001  FFAD         	movff	UART_write@dato,4013	;volatile
   644  000AAC                     l34:
   645  000AAC  A2AC               	btfss	172,1,c	;volatile
   646  000AAE  EF5B  F005         	goto	u11
   647  000AB2  EF5D  F005         	goto	u10
   648  000AB6                     u11:
   649  000AB6  EF56  F005         	goto	l34
   650  000ABA                     u10:
   651  000ABA  0012               	return		;funcret
   652  000ABC                     __end_of_UART_write:
   653                           	callstack 0
   654                           
   655 ;; *************** function _UART_init_baud *****************
   656 ;; Defined at:
   657 ;;		line 31 in file "UART.h"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  baudRate        4   14[COMRAM] const long 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  valor           1   22[COMRAM] unsigned char 
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, status,2, status,0, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   671 ;;      Params:         4       0       0       0       0       0       0       0       0
   672 ;;      Locals:         1       0       0       0       0       0       0       0       0
   673 ;;      Temps:          4       0       0       0       0       0       0       0       0
   674 ;;      Totals:         9       0       0       0       0       0       0       0       0
   675 ;;Total ram usage:        9 bytes
   676 ;; Hardware stack levels used: 1
   677 ;; Hardware stack levels required when called: 1
   678 ;; This function calls:
   679 ;;		___aldiv
   680 ;; This function is called by:
   681 ;;		_main
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           	psect	text6
   686  0009AE                     __ptext6:
   687                           	callstack 0
   688  0009AE                     _UART_init_baud:
   689                           	callstack 29
   690  0009AE                     
   691                           ;UART.h: 34: unsigned char valor = (unsigned char)((20000000/(baudRate*16)) -1);
   692  0009AE  0E00               	movlw	0
   693  0009B0  6E01               	movwf	___aldiv@dividend^0,c
   694  0009B2  0E2D               	movlw	45
   695  0009B4  6E02               	movwf	(___aldiv@dividend+1)^0,c
   696  0009B6  0E31               	movlw	49
   697  0009B8  6E03               	movwf	(___aldiv@dividend+2)^0,c
   698  0009BA  0E01               	movlw	1
   699  0009BC  6E04               	movwf	(___aldiv@dividend+3)^0,c
   700  0009BE  C00F  F013         	movff	UART_init_baud@baudRate,??_UART_init_baud
   701  0009C2  C010  F014         	movff	UART_init_baud@baudRate+1,??_UART_init_baud+1
   702  0009C6  C011  F015         	movff	UART_init_baud@baudRate+2,??_UART_init_baud+2
   703  0009CA  C012  F016         	movff	UART_init_baud@baudRate+3,??_UART_init_baud+3
   704  0009CE  0E04               	movlw	4
   705  0009D0                     u215:
   706  0009D0  90D8               	bcf	status,0,c
   707  0009D2  3613               	rlcf	??_UART_init_baud^0,f,c
   708  0009D4  3614               	rlcf	(??_UART_init_baud+1)^0,f,c
   709  0009D6  3615               	rlcf	(??_UART_init_baud+2)^0,f,c
   710  0009D8  3616               	rlcf	(??_UART_init_baud+3)^0,f,c
   711  0009DA  2EE8               	decfsz	wreg,f,c
   712  0009DC  EFE8  F004         	goto	u215
   713  0009E0  C013  F005         	movff	??_UART_init_baud,___aldiv@divisor
   714  0009E4  C014  F006         	movff	??_UART_init_baud+1,___aldiv@divisor+1
   715  0009E8  C015  F007         	movff	??_UART_init_baud+2,___aldiv@divisor+2
   716  0009EC  C016  F008         	movff	??_UART_init_baud+3,___aldiv@divisor+3
   717  0009F0  EC1C  F004         	call	___aldiv	;wreg free
   718  0009F4  0401               	decf	?___aldiv^0,w,c
   719  0009F6  6E17               	movwf	UART_init_baud@valor^0,c
   720  0009F8                     
   721                           ;UART.h: 35: TXSTAbits.BRGH = 1;
   722  0009F8  84AC               	bsf	172,2,c	;volatile
   723  0009FA                     
   724                           ;UART.h: 41: };UART.h: 43: TRISCbits.TRISC7 = 1;
   725  0009FA  8E94               	bsf	148,7,c	;volatile
   726  0009FC                     
   727                           ;UART.h: 44: TRISCbits.TRISC6 = 0;
   728  0009FC  9C94               	bcf	148,6,c	;volatile
   729  0009FE                     
   730                           ;UART.h: 46: TXSTAbits.SYNC = 0;
   731  0009FE  98AC               	bcf	172,4,c	;volatile
   732  000A00                     
   733                           ;UART.h: 47: TXSTAbits.TX9 = 0;
   734  000A00  9CAC               	bcf	172,6,c	;volatile
   735  000A02                     
   736                           ;UART.h: 49: SPBRG = valor;
   737  000A02  C017  FFAF         	movff	UART_init_baud@valor,4015	;volatile
   738  000A06                     
   739                           ;UART.h: 50: RCSTAbits.SPEN = 1;
   740  000A06  8EAB               	bsf	171,7,c	;volatile
   741  000A08                     
   742                           ;UART.h: 51: TXSTAbits.TXEN = 1;
   743  000A08  8AAC               	bsf	172,5,c	;volatile
   744  000A0A                     
   745                           ;UART.h: 52: RCSTAbits.CREN = 1;
   746  000A0A  88AB               	bsf	171,4,c	;volatile
   747  000A0C  0012               	return		;funcret
   748  000A0E                     __end_of_UART_init_baud:
   749                           	callstack 0
   750                           
   751 ;; *************** function ___aldiv *****************
   752 ;; Defined at:
   753 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\aldiv.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;  dividend        4    0[COMRAM] long 
   756 ;;  divisor         4    4[COMRAM] long 
   757 ;; Auto vars:     Size  Location     Type
   758 ;;  quotient        4   10[COMRAM] long 
   759 ;;  sign            1    9[COMRAM] unsigned char 
   760 ;;  counter         1    8[COMRAM] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  4    0[COMRAM] long 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   770 ;;      Params:         8       0       0       0       0       0       0       0       0
   771 ;;      Locals:         6       0       0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0       0
   773 ;;      Totals:        14       0       0       0       0       0       0       0       0
   774 ;;Total ram usage:       14 bytes
   775 ;; Hardware stack levels used: 1
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_UART_init_baud
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           	psect	text7
   784  000838                     __ptext7:
   785                           	callstack 0
   786  000838                     ___aldiv:
   787                           	callstack 29
   788  000838  0E00               	movlw	0
   789  00083A  6E0A               	movwf	___aldiv@sign^0,c
   790  00083C  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
   791  00083E  EF25  F004         	goto	u150
   792  000842  EF23  F004         	goto	u151
   793  000846                     u151:
   794  000846  EF2F  F004         	goto	l950
   795  00084A                     u150:
   796  00084A  1E08               	comf	(___aldiv@divisor+3)^0,f,c
   797  00084C  1E07               	comf	(___aldiv@divisor+2)^0,f,c
   798  00084E  1E06               	comf	(___aldiv@divisor+1)^0,f,c
   799  000850  6C05               	negf	___aldiv@divisor^0,c
   800  000852  0E00               	movlw	0
   801  000854  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
   802  000856  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
   803  000858  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
   804  00085A  0E01               	movlw	1
   805  00085C  6E0A               	movwf	___aldiv@sign^0,c
   806  00085E                     l950:
   807  00085E  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
   808  000860  EF36  F004         	goto	u160
   809  000864  EF34  F004         	goto	u161
   810  000868                     u161:
   811  000868  EF40  F004         	goto	l956
   812  00086C                     u160:
   813  00086C  1E04               	comf	(___aldiv@dividend+3)^0,f,c
   814  00086E  1E03               	comf	(___aldiv@dividend+2)^0,f,c
   815  000870  1E02               	comf	(___aldiv@dividend+1)^0,f,c
   816  000872  6C01               	negf	___aldiv@dividend^0,c
   817  000874  0E00               	movlw	0
   818  000876  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
   819  000878  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
   820  00087A  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
   821  00087C  0E01               	movlw	1
   822  00087E  1A0A               	xorwf	___aldiv@sign^0,f,c
   823  000880                     l956:
   824  000880  0E00               	movlw	0
   825  000882  6E0B               	movwf	___aldiv@quotient^0,c
   826  000884  0E00               	movlw	0
   827  000886  6E0C               	movwf	(___aldiv@quotient+1)^0,c
   828  000888  0E00               	movlw	0
   829  00088A  6E0D               	movwf	(___aldiv@quotient+2)^0,c
   830  00088C  0E00               	movlw	0
   831  00088E  6E0E               	movwf	(___aldiv@quotient+3)^0,c
   832  000890  5005               	movf	___aldiv@divisor^0,w,c
   833  000892  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
   834  000894  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
   835  000896  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
   836  000898  B4D8               	btfsc	status,2,c
   837  00089A  EF51  F004         	goto	u171
   838  00089E  EF53  F004         	goto	u170
   839  0008A2                     u171:
   840  0008A2  EF89  F004         	goto	l978
   841  0008A6                     u170:
   842  0008A6  0E01               	movlw	1
   843  0008A8  6E09               	movwf	___aldiv@counter^0,c
   844  0008AA  EF5D  F004         	goto	l964
   845  0008AE                     l962:
   846  0008AE  90D8               	bcf	status,0,c
   847  0008B0  3605               	rlcf	___aldiv@divisor^0,f,c
   848  0008B2  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
   849  0008B4  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
   850  0008B6  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
   851  0008B8  2A09               	incf	___aldiv@counter^0,f,c
   852  0008BA                     l964:
   853  0008BA  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   854  0008BC  EF62  F004         	goto	u181
   855  0008C0  EF64  F004         	goto	u180
   856  0008C4                     u181:
   857  0008C4  EF57  F004         	goto	l962
   858  0008C8                     u180:
   859  0008C8                     l966:
   860  0008C8  90D8               	bcf	status,0,c
   861  0008CA  360B               	rlcf	___aldiv@quotient^0,f,c
   862  0008CC  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
   863  0008CE  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
   864  0008D0  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
   865  0008D2  5005               	movf	___aldiv@divisor^0,w,c
   866  0008D4  5C01               	subwf	___aldiv@dividend^0,w,c
   867  0008D6  5006               	movf	(___aldiv@divisor+1)^0,w,c
   868  0008D8  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
   869  0008DA  5007               	movf	(___aldiv@divisor+2)^0,w,c
   870  0008DC  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
   871  0008DE  5008               	movf	(___aldiv@divisor+3)^0,w,c
   872  0008E0  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
   873  0008E2  A0D8               	btfss	status,0,c
   874  0008E4  EF76  F004         	goto	u191
   875  0008E8  EF78  F004         	goto	u190
   876  0008EC                     u191:
   877  0008EC  EF81  F004         	goto	l974
   878  0008F0                     u190:
   879  0008F0  5005               	movf	___aldiv@divisor^0,w,c
   880  0008F2  5E01               	subwf	___aldiv@dividend^0,f,c
   881  0008F4  5006               	movf	(___aldiv@divisor+1)^0,w,c
   882  0008F6  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
   883  0008F8  5007               	movf	(___aldiv@divisor+2)^0,w,c
   884  0008FA  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
   885  0008FC  5008               	movf	(___aldiv@divisor+3)^0,w,c
   886  0008FE  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
   887  000900  800B               	bsf	___aldiv@quotient^0,0,c
   888  000902                     l974:
   889  000902  90D8               	bcf	status,0,c
   890  000904  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
   891  000906  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
   892  000908  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
   893  00090A  3205               	rrcf	___aldiv@divisor^0,f,c
   894  00090C  2E09               	decfsz	___aldiv@counter^0,f,c
   895  00090E  EF64  F004         	goto	l966
   896  000912                     l978:
   897  000912  500A               	movf	___aldiv@sign^0,w,c
   898  000914  B4D8               	btfsc	status,2,c
   899  000916  EF8F  F004         	goto	u201
   900  00091A  EF91  F004         	goto	u200
   901  00091E                     u201:
   902  00091E  EF99  F004         	goto	l982
   903  000922                     u200:
   904  000922  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
   905  000924  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
   906  000926  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
   907  000928  6C0B               	negf	___aldiv@quotient^0,c
   908  00092A  0E00               	movlw	0
   909  00092C  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
   910  00092E  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
   911  000930  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
   912  000932                     l982:
   913  000932  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   914  000936  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   915  00093A  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   916  00093E  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   917  000942  0012               	return		;funcret
   918  000944                     __end_of___aldiv:
   919                           	callstack 0
   920                           
   921                           	psect	rparam
   922  0000                     
   923                           	psect	idloc
   924                           
   925                           ;Config register IDLOC0 @ 0x200000
   926                           ;	unspecified, using default values
   927  200000                     	org	2097152
   928  200000  FF                 	db	255
   929                           
   930                           ;Config register IDLOC1 @ 0x200001
   931                           ;	unspecified, using default values
   932  200001                     	org	2097153
   933  200001  FF                 	db	255
   934                           
   935                           ;Config register IDLOC2 @ 0x200002
   936                           ;	unspecified, using default values
   937  200002                     	org	2097154
   938  200002  FF                 	db	255
   939                           
   940                           ;Config register IDLOC3 @ 0x200003
   941                           ;	unspecified, using default values
   942  200003                     	org	2097155
   943  200003  FF                 	db	255
   944                           
   945                           ;Config register IDLOC4 @ 0x200004
   946                           ;	unspecified, using default values
   947  200004                     	org	2097156
   948  200004  FF                 	db	255
   949                           
   950                           ;Config register IDLOC5 @ 0x200005
   951                           ;	unspecified, using default values
   952  200005                     	org	2097157
   953  200005  FF                 	db	255
   954                           
   955                           ;Config register IDLOC6 @ 0x200006
   956                           ;	unspecified, using default values
   957  200006                     	org	2097158
   958  200006  FF                 	db	255
   959                           
   960                           ;Config register IDLOC7 @ 0x200007
   961                           ;	unspecified, using default values
   962  200007                     	org	2097159
   963  200007  FF                 	db	255
   964                           
   965                           	psect	config
   966                           
   967                           ;Config register CONFIG1L @ 0x300000
   968                           ;	PLL Prescaler Selection bits
   969                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   970                           ;	System Clock Postscaler Selection bits
   971                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   972                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   973                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   974  300000                     	org	3145728
   975  300000  00                 	db	0
   976                           
   977                           ;Config register CONFIG1H @ 0x300001
   978                           ;	Oscillator Selection bits
   979                           ;	FOSC = HS, HS oscillator (HS)
   980                           ;	Fail-Safe Clock Monitor Enable bit
   981                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   982                           ;	Internal/External Oscillator Switchover bit
   983                           ;	IESO = OFF, Oscillator Switchover mode disabled
   984  300001                     	org	3145729
   985  300001  0C                 	db	12
   986                           
   987                           ;Config register CONFIG2L @ 0x300002
   988                           ;	Power-up Timer Enable bit
   989                           ;	PWRT = ON, PWRT enabled
   990                           ;	Brown-out Reset Enable bits
   991                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   992                           ;	Brown-out Reset Voltage bits
   993                           ;	BORV = 3, Minimum setting 2.05V
   994                           ;	USB Voltage Regulator Enable bit
   995                           ;	VREGEN = OFF, USB voltage regulator disabled
   996  300002                     	org	3145730
   997  300002  18                 	db	24
   998                           
   999                           ;Config register CONFIG2H @ 0x300003
  1000                           ;	Watchdog Timer Enable bit
  1001                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1002                           ;	Watchdog Timer Postscale Select bits
  1003                           ;	WDTPS = 32768, 1:32768
  1004  300003                     	org	3145731
  1005  300003  1E                 	db	30
  1006                           
  1007                           ; Padding undefined space
  1008  300004                     	org	3145732
  1009  300004  FF                 	db	255
  1010                           
  1011                           ;Config register CONFIG3H @ 0x300005
  1012                           ;	CCP2 MUX bit
  1013                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1014                           ;	PORTB A/D Enable bit
  1015                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1016                           ;	Low-Power Timer 1 Oscillator Enable bit
  1017                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1018                           ;	MCLR Pin Enable bit
  1019                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1020  300005                     	org	3145733
  1021  300005  83                 	db	131
  1022                           
  1023                           ;Config register CONFIG4L @ 0x300006
  1024                           ;	Stack Full/Underflow Reset Enable bit
  1025                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1026                           ;	Single-Supply ICSP Enable bit
  1027                           ;	LVP = OFF, Single-Supply ICSP disabled
  1028                           ;	Extended Instruction Set Enable bit
  1029                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1030                           ;	Background Debugger Enable bit
  1031                           ;	DEBUG = 0x1, unprogrammed default
  1032  300006                     	org	3145734
  1033  300006  81                 	db	129
  1034                           
  1035                           ; Padding undefined space
  1036  300007                     	org	3145735
  1037  300007  FF                 	db	255
  1038                           
  1039                           ;Config register CONFIG5L @ 0x300008
  1040                           ;	Code Protection bit
  1041                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1042                           ;	Code Protection bit
  1043                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1044                           ;	Code Protection bit
  1045                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1046                           ;	Code Protection bit
  1047                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1048  300008                     	org	3145736
  1049  300008  0F                 	db	15
  1050                           
  1051                           ;Config register CONFIG5H @ 0x300009
  1052                           ;	Boot Block Code Protection bit
  1053                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1054                           ;	Data EEPROM Code Protection bit
  1055                           ;	CPD = OFF, Data EEPROM is not code-protected
  1056  300009                     	org	3145737
  1057  300009  C0                 	db	192
  1058                           
  1059                           ;Config register CONFIG6L @ 0x30000A
  1060                           ;	Write Protection bit
  1061                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1062                           ;	Write Protection bit
  1063                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1064                           ;	Write Protection bit
  1065                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1066                           ;	Write Protection bit
  1067                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1068  30000A                     	org	3145738
  1069  30000A  0F                 	db	15
  1070                           
  1071                           ;Config register CONFIG6H @ 0x30000B
  1072                           ;	Configuration Register Write Protection bit
  1073                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1074                           ;	Boot Block Write Protection bit
  1075                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1076                           ;	Data EEPROM Write Protection bit
  1077                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1078  30000B                     	org	3145739
  1079  30000B  E0                 	db	224
  1080                           
  1081                           ;Config register CONFIG7L @ 0x30000C
  1082                           ;	Table Read Protection bit
  1083                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1084                           ;	Table Read Protection bit
  1085                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1086                           ;	Table Read Protection bit
  1087                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1088                           ;	Table Read Protection bit
  1089                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1090  30000C                     	org	3145740
  1091  30000C  0F                 	db	15
  1092                           
  1093                           ;Config register CONFIG7H @ 0x30000D
  1094                           ;	Boot Block Table Read Protection bit
  1095                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1096  30000D                     	org	3145741
  1097  30000D  40                 	db	64
  1098                           tosu	equ	0xFFF
  1099                           tosh	equ	0xFFE
  1100                           tosl	equ	0xFFD
  1101                           stkptr	equ	0xFFC
  1102                           pclatu	equ	0xFFB
  1103                           pclath	equ	0xFFA
  1104                           pcl	equ	0xFF9
  1105                           tblptru	equ	0xFF8
  1106                           tblptrh	equ	0xFF7
  1107                           tblptrl	equ	0xFF6
  1108                           tablat	equ	0xFF5
  1109                           prodh	equ	0xFF4
  1110                           prodl	equ	0xFF3
  1111                           indf0	equ	0xFEF
  1112                           postinc0	equ	0xFEE
  1113                           postdec0	equ	0xFED
  1114                           preinc0	equ	0xFEC
  1115                           plusw0	equ	0xFEB
  1116                           fsr0h	equ	0xFEA
  1117                           fsr0l	equ	0xFE9
  1118                           wreg	equ	0xFE8
  1119                           indf1	equ	0xFE7
  1120                           postinc1	equ	0xFE6
  1121                           postdec1	equ	0xFE5
  1122                           preinc1	equ	0xFE4
  1123                           plusw1	equ	0xFE3
  1124                           fsr1h	equ	0xFE2
  1125                           fsr1l	equ	0xFE1
  1126                           bsr	equ	0xFE0
  1127                           indf2	equ	0xFDF
  1128                           postinc2	equ	0xFDE
  1129                           postdec2	equ	0xFDD
  1130                           preinc2	equ	0xFDC
  1131                           plusw2	equ	0xFDB
  1132                           fsr2h	equ	0xFDA
  1133                           fsr2l	equ	0xFD9
  1134                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     24      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART_printf@cadena	PTR unsigned char  size(2) Largest target is 17
		 -> STR_3(CODE[15]), STR_2(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_UART_init_baud
    _printf->_putch
    _putch->_UART_write
    _UART_printf->_UART_write
    _UART_init_baud->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1158
                                             23 COMRAM     1     1      0
                     _UART_init_baud
                        _UART_printf
                          _UART_read
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     152
                                              2 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      30
                                              1 COMRAM     1     1      0
                         _UART_write
 ---------------------------------------------------------------------------------
 (1) _UART_read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_printf                                          2     0      2     212
                                              1 COMRAM     2     0      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (3) _UART_write                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init_baud                                       9     5      4     748
                                             14 COMRAM     9     5      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init_baud
     ___aldiv
   _UART_printf
     _UART_write
   _UART_read
   _printf
     _putch
       _UART_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     18      18       1       25.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBIGSFRhhh        50      0       0      20        0.0%
BITBIGSFRhlh         C      0       0      21        0.0%
BITBIGSFRhll         9      0       0      22        0.0%
BITBIGSFRl          34      0       0      23        0.0%
ABS                  0      0       0      24        0.0%
BIGRAM             7FF      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Mar 19 20:17:40 2022

                     l30 0AA4                       l25 0A0C                       l34 0AAC  
                     l43 0A78                       l37 0ABA                       l46 0AD2  
                     l66 0A42                       u10 0ABA                       u11 0AB6  
                     u90 0A88                       u91 0A84                      l148 0942  
                    l814 0AA8                      l816 0ACC                      l950 085E  
                    l942 0838                      l960 08A6                      l952 086C  
                    l944 083C                      l970 08F0                      l962 08AE  
                    l954 087C                      l946 084A                      l890 0A96  
                    l980 0922                      l972 0900                      l964 08BA  
                    l956 0880                      l948 085A                      l892 0A9C  
                    l982 0932                      l974 0902                      l966 08C8  
                    l958 0890                      l886 0A7A                      l976 090C  
                    l968 08D2                      l888 0A88                      l978 0912  
                    l994 09FA                      l986 09AE                      l898 0AA2  
                    l996 09FC                      l988 09F8                      l998 09FE  
                    u100 0A96                      u101 0A92                      u200 0922  
                    u201 091E                      u220 0A78                      u221 0A74  
                    u150 084A                      u230 0A42                      u151 0846  
                    u215 09D0                      u231 0A3E                      u160 086C  
                    u240 097C                      u161 0868                      u241 0978  
                    u170 08A6                      u250 099A                      u171 08A2  
                    u251 0996                      u180 08C8                      u181 08C4  
                    u190 08F0                      u191 08EC                      wreg 000FE8  
            main@dato_rx 0018                     l1000 0A00                     l1002 0A02  
                   l1010 0A44                     l1004 0A06                     l1012 0A48  
                   l1020 0A1A                     l1006 0A08                     l1014 0A58  
                   l1022 0A20                     l1030 0964                     l1008 0A0A  
                   l1016 0A5C                     l1032 096A                     l1024 0944  
                   l1018 0A0E                     l1034 097C                     l1026 0944  
                   l1036 0988                     l1028 0958                     l1038 099A  
                   STR_1 0801                     STR_2 0817                     STR_3 0828  
                   _main 0944                     start 0000             ___param_bank 000000  
        __end_of___aldiv 0944                    ?_main 0001                    _RCREG 000FAE  
                  _SPBRG 000FAF                    _TXREG 000FAD              ?_UART_write 0001  
                  _putch 0ACA                    tablat 000FF5                    status 000FD8  
        __initialization 0ABC             __end_of_main 09AE                   ??_main 0018  
          __activetblptr 000001      UART_init_baud@valor 0017                   ?_putch 0001  
              ??___aldiv 0009        __end_of_UART_read 0AA6             ?_UART_printf 0002  
                 isa$std 000001                   _printf 0A0E             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 0ABC   UART_init_baud@baudRate 000F  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_putch 0AD4  
                ??_putch 0002                  ?_printf 0003             ??_UART_write 0001  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 0838  
           __psmallconst 0800                  __pcinit 0ABC                  __ramtop 0800  
     __end_of_UART_write 0ABC                  __ptext0 0944                  __ptext1 0A0E  
                __ptext2 0ACA                  __ptext3 0A7A                  __ptext4 0A44  
                __ptext5 0AA6                  __ptext6 09AE                  __ptext7 0838  
       ___aldiv@dividend 0001     end_of_initialization 0ABC                _RCSTAbits 000FAB  
                printf@c 0007                  printf@f 0003         ___aldiv@quotient 000B  
              _UART_read 0A7A                _TRISCbits 000F94                _TXSTAbits 000FAC  
         _UART_init_baud 09AE               ?_UART_read 0001           __end_of_printf 0A44  
    start_initialization 0ABC   __end_of_UART_init_baud 0A0E                 ??_printf 0005  
      UART_printf@cadena 0002          ?_UART_init_baud 000F                 ?___aldiv 0001  
            ??_UART_read 0001              __smallconst 0800          ___aldiv@divisor 0005  
        ___aldiv@counter 0009                 _PIR1bits 000F9E            ??_UART_printf 0004  
         UART_write@dato 0001                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800      __end_of_UART_printf 0A7A                 isa$xinst 000000  
              putch@dato 0002         ??_UART_init_baud 0013                 printf@ap 0005  
            _UART_printf 0A44             ___aldiv@sign 000A               _UART_write 0AA6  
